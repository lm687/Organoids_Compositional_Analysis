fle_counts = fles_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle_counts = list.files(paste0(flder, sf))
fle_counts
counts= lapply(subfolders, function(sf){
print(sf)
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
system(paste0("gunzip -d ", fle))
.x = read.table(fle_unzipped)
system(paste0("gzip  ", fle_unzipped))
.x
})
counts
sf="66099894-b6d2-42a4-8805-c3bc5d038ca5"
print(sf)
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
fle_unzipped
.x = read.table(fle_unzipped)
fle_unzipped
fle_unzipped
fle_counts
fle_counts
grepl("[.]gz", fle_counts)
counts = lapply(subfolders, function(sf){
print(sf)
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped)
system(paste0("gzip  ", fle_unzipped))
.x
})
counts
### Clinical data ####
clincal <- read.table("clinical.tsv", stringsAsFactors = FALSE)
### Clinical data ####
clincal <- read.table("clinical.tsv", stringsAsFactors = FALSE, sep = "\t")
clincal
clinical=clincal
### Clinical data ####
clinical <- read.table("clinical.tsv", stringsAsFactors = FALSE, sep = "\t", header = TRUE)
View(clinical)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",
stringsAsFactors = FALSE, sep = "\t", header = FALSE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",
stringsAsFactors = FALSE, sep = "\t")
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv")
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t")
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t")
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE, sep = "\t", header = FALSE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE, header = FALSE)
biospecimen_data
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE, header = TRUE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE, header = TRUE)
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE)
biospecimen_data
### Clinical data ####
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE)
biospecimen_data
### Clinical data ####
## this file had to be modifed: replace "'--" by "--"
biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
stringsAsFactors = FALSE, header = TRUE)
biospecimen_data
biospecimen_data$case_id
biospecimen_data$sample_type
sf
subfolders
mathc(subfolders, biospecimen_data$case_id)
match(subfolders, biospecimen_data$case_id)
subfolders
biospecimen_data$case_id
biospecimen_data$case_submitter_id
biospecimen_data$sample_id
match(subfolders, biospecimen_data$sample_id)
biospecimen_data$sample_submitter_id
subfolders
biospecimen_data$case_id
match(subfolders, biospecimen_data$case_id)
subfolders
biospecimen_data$case_id
subfolders
subfolders
require(devtools)
install_github("BioinformaticsFMRP/TCGAbiolinks")
install.packages('ggpubr')
require(devtools)
install_github("BioinformaticsFMRP/TCGAbiolinks")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Raw Sequencing Data",
sample.type = "Primary solid Tumor")
library(TCGAbiolinks)
library(TCGAbiolinks)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(TCGAbiolinks)
cached = TRUE
#### Read in counts data ####
flder = "../data/"
subfolders = list.files(flder)
if(cached){
counts = loadRDS("../objects/counts")
query = loadeRDS("../objects/counts")
}
if(!cached){
counts = lapply(subfolders, function(sf){
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped, stringsAsFactors = FALSE)
system(paste0("gzip  ", fle_unzipped))
.x
})
}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(TCGAbiolinks)
cached = TRUE
#### Read in counts data ####
flder = "../data/"
subfolders = list.files(flder)
if(cached){
counts = readRDS("../objects/counts")
query = readeRDS("../objects/counts")
}
query = readRDS("../objects/counts")
if(!cached){
counts = lapply(subfolders, function(sf){
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped, stringsAsFactors = FALSE)
system(paste0("gzip  ", fle_unzipped))
.x
})
}
counts
head(counts[[1]])
match(subfolders, biospecimen_data$sample_id)
match(subfolders, biospecimen_data$case_id)
biospecimen_data$sample_type
if(!cached){
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Transcriptome Profiling")
saveRDS(query, "../objects/query")
saveRDS(counts, "../objects/counts")
}
cases_sorted = query$results[[1]]['cases.submitter_id'][match(subfolders, query$results[[1]][,'id']),]
sample_type_sorted = query$results[[1]]['sample_type'][match(subfolders, query$results[[1]][,'id']),]
table(sample_type_sorted) ## there are no matched normals?
stopifnot(length(sample_type_sorted) == length(subfolders))
sample_type_sorted
cases_sorted
counts
query
query$results[[1]]['cases.submitter_id']
query
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Transcriptome Profiling")
query
saveRDS(query, "../objects/query")
query = readRDS("../objects/counts")
query
query = readRDS("../objects/query")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(TCGAbiolinks)
cached = TRUE
### Clinical data ####
## this file had to be modifed: replace "'--" by "--"
# biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
#                                stringsAsFactors = FALSE, header = TRUE)
#### Read in counts data ####
flder = "../data/"
subfolders = list.files(flder)
if(cached){
counts = readRDS("../objects/counts")
query = readRDS("../objects/query")
}
if(!cached){
counts = lapply(subfolders, function(sf){
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped, stringsAsFactors = FALSE)
system(paste0("gzip  ", fle_unzipped))
.x
})
}
head(counts[[1]])
# match(subfolders, biospecimen_data$sample_id)
# match(subfolders, biospecimen_data$case_id)
# biospecimen_data$sample_type
if(!cached){
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Transcriptome Profiling")
saveRDS(query, "../objects/query")
saveRDS(counts, "../objects/counts")
}
cases_sorted = query$results[[1]]['cases.submitter_id'][match(subfolders, query$results[[1]][,'id']),]
sample_type_sorted = query$results[[1]]['sample_type'][match(subfolders, query$results[[1]][,'id']),]
table(sample_type_sorted) ## there are no matched normals?
stopifnot(length(sample_type_sorted) == length(subfolders))
cases_sorted
length( query$results)
names( query$results[[1]])
names( query$results[[1]]['sample.submitter_id'])
query$results[[1]]['sample.submitter_id']
names( query$results[[1]])
query$results[[1]]['file_id']
names( query$results[[1]])
query$results[[1]]['id']
cbind.data.frame(sample.submitted_id= query$results[[1]]['sample.submitter_id'],
file_id=query$results[[1]]['file_id'],
id=query$results[[1]]['id']
)
saveRDS(cbind.data.frame(sample.submitted_id= query$results[[1]]['sample.submitter_id'],
)
)
saveRDS(object = cbind.data.frame(sample.submitted_id= query$results[[1]]['sample.submitter_id'],
file_id=query$results[[1]]['file_id'],
id=query$results[[1]]['id']), file = "../objects/list_files.RDS")
saveRDS(object = cbind.data.frame(sample.submitted_id= query$results[[1]]['sample.submitter_id'],
file_id=query$results[[1]]['file_id']), file = "../objects/list_files.RDS")
length(counts)
dim(query[[1]])
(query[[1]]
dim(query[[1]]['file_id'])
dim(query[[1]]['file_id'])
(query[[1]]['file_id'])
(query$results[[1]]['file_id'])
dim(query$results[[1]]['file_id'])
length(counts)
dim(query$results[[1]]['file_id'])
subfolders
match(subfolders, query$results[[1]]['file_id'])
match(subfolders, query$results[[1]]['sample.submitter_id'])
subfolders
names(query$results[[1]])
match(subfolders, query$results[[1]]['file_name'])
subfolders
query$results[[1]]
View(query$results[[1]])
subfolders
match(subfolders, query$results[[1]]['id'])
query$results[[1]]['id']
subfolders
match(subfolders, as.character(query$results[[1]]['id']))
subfolders
as.character(query$results[[1]]['id'])
query$results[[1]]['id']
as.vector(query$results[[1]]['id'])
unlist(query$results[[1]]['id'])
match(subfolders, unlist(query$results[[1]]['id']))
query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),]
query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),c('id', 'file_id', 'sample.submitter_id')]
query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),c('id', 'sample.submitter_id')]
dim(query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),c('id', 'sample.submitter_id')])
length(counts)
files_df = query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),c('id', 'sample.submitter_id')]
dim(files_df)
length(counts)
dim(files_df)
dim(files_df)[1]
saveRDS(object = files_df, file = "../objects/list_files.RDS")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MetaGxOvarian")
library("MetaGxOvarian")
library("MetaGxOvarian")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(MetaGxOvarian)
library(TCGAbiolinks)
library(MetaGxOvarian)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(MetaGxOvarian)
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
BiocManager::install("MetaGxOvarian")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(MetaGxOvarian)
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
BiocManager::install("MetaGxOvarian")
library(MetaGxOvarian)
library(TCGAbiolinks)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(MetaGxOvarian)
library(TCGAbiolinks)
cached = TRUE
#### Read in counts data ####
flder = "../data/"
subfolders = list.files(flder)
if(cached){
counts = readRDS("../objects/counts")
query = readRDS("../objects/query")
}
if(!cached){
counts = lapply(subfolders, function(sf){
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped, stringsAsFactors = FALSE)
system(paste0("gzip  ", fle_unzipped))
.x
})
}
head(counts[[1]])
if(!cached){
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Transcriptome Profiling")
saveRDS(query, "../objects/query")
saveRDS(counts, "../objects/counts")
}
cases_sorted = query$results[[1]]['cases.submitter_id'][match(subfolders, query$results[[1]][,'id']),]
sample_type_sorted = query$results[[1]]['sample_type'][match(subfolders, query$results[[1]][,'id']),]
table(sample_type_sorted) ## there are no matched normals?
query = readRDS("../objects/query")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(MetaGxOvarian)
library(TCGAbiolinks)
cached = FALSE
#### Read in counts data ####
flder = "../data/"
subfolders = list.files(flder)
if(cached){
counts = readRDS("../objects/counts")
query = readRDS("../objects/query")
}
if(!cached){
counts = lapply(subfolders, function(sf){
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped, stringsAsFactors = FALSE)
system(paste0("gzip  ", fle_unzipped))
.x
})
}
head(counts[[1]])
if(!cached){
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Transcriptome Profiling")
saveRDS(query, "../objects/query")
saveRDS(counts, "../objects/counts")
}
cases_sorted = query$results[[1]]['cases.submitter_id'][match(subfolders, query$results[[1]][,'id']),]
sample_type_sorted = query$results[[1]]['sample_type'][match(subfolders, query$results[[1]][,'id']),]
table(sample_type_sorted) ## there are no matched normals?
stopifnot(length(sample_type_sorted) == length(subfolders))
files_df = query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),c('id', 'sample.submitter_id')]
length(counts)
dim(files_df)[1]
files_df
dim(files_df)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(MetaGxOvarian)
library(TCGAbiolinks)
cached = TRUE
### Clinical data ####
## this file had to be modifed: replace "'--" by "--"
# biospecimen_data <- read.table("biospecimen.cases_selection.2020-05-04/sample.tsv",  sep = "\t", fill = TRUE,
#                                stringsAsFactors = FALSE, header = TRUE)
#### Read in counts data ####
flder = "../data/"
subfolders = list.files(flder)
if(cached){
counts = readRDS("../objects/counts")
query = readRDS("../objects/query")
}
if(!cached){
counts = lapply(subfolders, function(sf){
fle_counts = list.files(paste0(flder, sf))
fle_counts = fle_counts[grepl("htseq.counts", fle_counts)]
print(fle_counts)
fle = paste0(flder, sf, "/", fle_counts)
if(grepl("[.]gz", fle_counts)){
system(paste0("gunzip -d ", fle))
fle_unzipped = gsub(".gz", "", fle)
}else{
fle_unzipped = fle
}
.x = read.table(fle_unzipped, stringsAsFactors = FALSE)
system(paste0("gzip  ", fle_unzipped))
.x
})
}
head(counts[[1]])
# match(subfolders, biospecimen_data$sample_id)
# match(subfolders, biospecimen_data$case_id)
# biospecimen_data$sample_type
if(!cached){
query <- GDCquery(project = c("TCGA-OV"),
data.category = "Transcriptome Profiling")
saveRDS(query, "../objects/query")
saveRDS(counts, "../objects/counts")
}
cases_sorted = query$results[[1]]['cases.submitter_id'][match(subfolders, query$results[[1]][,'id']),]
sample_type_sorted = query$results[[1]]['sample_type'][match(subfolders, query$results[[1]][,'id']),]
table(sample_type_sorted) ## there are no matched normals?
stopifnot(length(sample_type_sorted) == length(subfolders))
files_df = query$results[[1]][match(subfolders, unlist(query$results[[1]]['id'])),c('id', 'sample.submitter_id')]
length(counts)
dim(files_df)[1]
#saveRDS(object = files_df, file = "../objects/list_files.RDS")
