while(dontstop){
if(.tree == "("){
nparsleft = nparsleft + 1
}
if(.tree == "("){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
}
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == "("){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
idx
nparsleft
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
idx
.tree
.tree[1:idx]
list(.tree[1:idx], .tree[(idx+1):length(.tree)]
}
find_split = function(.tree){
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
if(min(which(.tree == "(")) < min(which(.tree == ","))){
prnths = TRUE
}else{
prnths = FALSE
}
if(prnths){
which_close = find_close_parenthesis(.tree)
}
}
give_leaves = function(tree){
.x = split_tree(tree)
.x[.x != ""]
}
give_nleaves = function(tree){
length(give_leaves(tree))
}
get_next_split = function(tree){
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
.tree = split_tree(.tree,  keep = TRUE)
}
tree = gsub(";", "", tree)
nleaves = give_nleaves(tree)
nleaves
if(nleaves > 1){
## split tree into two
get_next_split(tree)
}else{
## do not remove parenthesis; do not split
}
list(.tree[1:idx], .tree[(idx+1):length(.tree)])
list(.tree[1:idx], .tree[(idx+2):length(.tree)])
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(.tree[1:idx], .tree[(idx+2):length(.tree)]))
}
which_close = find_close_parenthesis(.tree)
which_close
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
rm(find_close_parenthesis)
give_split = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
which_close = give_split(.tree)
which_close
splts = give_split(.tree)
splts
find_split(splts[[1]])
find_split(splts[[2]])
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
## Should not be necessary:
z[!is.finite(z)] <- NA
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1)
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple")
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", col='blue')
length(x)
rnorm(23)
contour(rnorm(23), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
dev.off()
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
image(x, x, z)
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(rstan)
library(optparse)
library(uuid)
source("helper_DA_stan.R")
model_file_name_DM = "stan_dirichlet_multinomial_ME.stan"
stanc(model_file_name_DM)
model_file_name_DM = "stan_dirichlet_multinomial_ME.stan"
stanc(model_file_name_DM)
stanc(model_file_name_DM)
stanc(model_file_name_DM)
model_file_name_DM = "stan_dirichlet_multinomial_ME.stan"
stanc(model_file_name_DM)
stanc(model_file_name_DM)
stanc(model_file_name_DM)
stanc(model_file_name_DM)
stanc(model_file_name_DM)
stanc(model_file_name_DM, verbose = TR)
stanc(model_file_name_DM, verbose = TRUE)
stanc("stan_logistic_normal_multinomial_ME.stan", verbose = TRUE)
stanc("stan_correlated_topic_model.stan", verbose = TRUE)
stanc("stan_correlated_topic_model.stan", verbose = FALSE)
rm(list = ls())
library(optparse)
library(rstan)
library(ggplot2)
library(dplyr)
library(reshape2)
library(patchwork)
library(latex2exp)
library(bayesplot)
library(rstanarm)
library(plyr)
option_list = list(
make_option(c("--file_in"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--type_data"), type="character", default=NA,
help="signatures/features1/features3 [default= %default]", metavar="character"),
make_option(c("--uuid_folder"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--folder_inference"), type="character", default="DM_PCAWG_10kits_gammaprior/",
help="", metavar="character"),
make_option(c("--save_figures"), action = "store_true", default=TRUE)
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
print(opt)
if(is.na(opt$type_data)){stop("\t <type_data> can not be NA!")}
if(is.na(opt$uuid_folder)){stop("\t <uuid_folder> can not be NA!")}
opt= list(); opt$type_data = "features1"; opt$uuid = "f1874e31-35e1-49d4-8ac5-b6cb9fdf4a1a"; opt$file_in="DM_PCAWG_Nits7000_features1_UCEC-US_f1874e31-35e1-49d4-8ac5-b6cb9fdf4a1a.Rdata"; opt$folder_inference="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/DA_stan/DM_PCAWG_7000_subclonalPCAWG"
if(is.na(opt$type_data)){stop("\t <type_data> can not be NA!")}
if(is.na(opt$uuid_folder)){stop("\t <uuid_folder> can not be NA!")}
if(is.na(opt$file_in)){stop("\t <file_in> can not be NA!")}
if(is.na(opt$folder_inference)){stop("\t <folder_inference> can not be NA!")}
opt= list(); opt$type_data = "features1"; opt$uuid_folder = "f1874e31-35e1-49d4-8ac5-b6cb9fdf4a1a"; opt$file_in="DM_PCAWG_Nits7000_features1_UCEC-US_f1874e31-35e1-49d4-8ac5-b6cb9fdf4a1a.Rdata"; opt$folder_inference="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/DA_stan/DM_PCAWG_7000_subclonalPCAWG"
if(is.na(opt$type_data)){stop("\t <type_data> can not be NA!")}
if(is.na(opt$uuid_folder)){stop("\t <uuid_folder> can not be NA!")}
if(is.na(opt$file_in)){stop("\t <file_in> can not be NA!")}
if(is.na(opt$folder_inference)){stop("\t <folder_inference> can not be NA!")}
type_data = opt$type_data
save_figures = opt$save_figures
mode_run = as.character(read.table("~/mode_run", sep = " ", stringsAsFactors = FALSE)[3])
if(mode_run == "local"){
setwd("/Users/morril01/Documents/PhD/CDA_in_Cancer/DifferentialAbundance_stan/analyse_PCAWG/")
}else if(mode_run == 'CRUK'){
setwd("/mnt/scratcha/fmlab/morril01/git_phd/code/ProjectDifferentialAbundance/DifferentialAbundance_stan/analyse_PCAWG/")
}else if(mode_run == 'HPC'){
setwd("/home/morril01/DifferentialAbundance_stan_link/analyse_PCAWG/")
}
source("header_analyse_DM_pcawg.R")
load("../../../../out/DA_stan/DM_PCAWG_7000_subclonalPCAWG/DM_PCAWG_Nits7000_features1_UCEC-US_f1874e31-35e1-49d4-8ac5-b6cb9fdf4a1a.Rdata")
extract(fit_LNM)
a = extract(fit_LNM)
a
\
load("../../../../out/DA_stan/DM_PCAWG_7000_subclonalPCAWG/DM_PCAWG_Nits7000_features1_UCEC-US_f1874e31-35e1-49d4-8ac5-b6cb9fdf4a1a.Rdata")
fit = extract(fit_LNM)
posterior2 <- as.matrix(fits[[f]])
posterior2 <- as.matrix(fit[[f]])
posterior2 <- as.matrix(fit)
posterior2 <- as.matrix(fit_)
posterior2 <- as.matrix(fit_LNM)
color_scheme_set("mix-blue-pink")
p <- bayesplot::mcmc_trace(posterior2,  pars = c("alpha", "beta"), n_warmup = 300,
facet_args = list(nrow = 2, labeller = label_parsed))
p <- bayesplot::mcmc_trace(posterior2,  pars = c("beta"), n_warmup = 300,
facet_args = list(nrow = 2, labeller = label_parsed))
head(posterior2)
grep(colnames(posterior2), "beta")
grep("beta", colnames(posterior2))
colnames(posterior2)[grep("beta", colnames(posterior2))]
p <- bayesplot::mcmc_trace(posterior2,  pars = colnames(posterior2)[grep("beta", colnames(posterior2))],
n_warmup = 300,
facet_args = list(nrow = 2, labeller = label_parsed))
p + facet_text(size = 15)
rstan::Rhat(posterior2)
load("../../../../out/DA_stan/DM_PCAWG_10000_subclonalPCAWG/DM_PCAWG_Nits10000_features1_UCEC-US_7b07102a-96c0-455d-83e2-e02c1f89ebda.Rdata")
fit = extract(fit_LNM)
posterior2 <- as.matrix(fit_LNM)
color_scheme_set("mix-blue-pink")
p <- bayesplot::mcmc_trace(posterior2,  pars = colnames(posterior2)[grep("beta", colnames(posterior2))],
n_warmup = 300,
facet_args = list(nrow = 2, labeller = label_parsed))
p + facet_text(size = 15)
rstan::Rhat(posterior2)
posterior2
ess_bulk(sims)
ess_bulk(posterior2)
ess_tail(posterior2)
rstan::traceplot(posterior2)
rstan::Rhat(fit)
View(posterior2)
mon <- monitor(fit_LNM)
View(mon)
which_min_ess <- which.min(mon[1:50, 'Tail_ESS'])
which_min_ess
order(mon$Rhat)
(mon$Rhat)
which.max(mon$Rhat)
mon
mon[which.max(mon$Rhat),]
mon
which.max(mon$Rhat)
rownames(mon)
rownames(mon)[which.max(mon$Rhat),]
rownames(mon)[which.max(mon$Rhat)]
plot_local_ess(fit = fit_nom, par = which_min_ess, nalpha = 20)
library(rjags)
plot_local_ess(fit = fit_nom, par = which_min_ess, nalpha = 20)
source("../../../../nongit/rhat_ess/code/monitornew.R")
source("../../../../nongit/rhat_ess/code/monitorplot.R")
plot_local_ess(fit = fit_nom, par = which_min_ess, nalpha = 20)
plot_local_ess(fit = fit_LNM, par = which_min_ess, nalpha = 20)
plot_local_ess(fit = fit_LNM, par = 1, nalpha = 20)
plot_local_ess(fit = fit_LNM, par = 2, nalpha = 20)
plot_quantile_ess(fit = fit_LNM, par = which_min_ess, nalpha = 40)
plot_change_ess(fit = fit_LNM, par = which_min_ess)
samp <- as.array(fit_LNM)
xmin <- paste0("x[", which_min_ess, "]")
mcmc_hist_r_scale(samp[, , xmin])
fit_LNM
xmin
head(samp)
samp
View(samp)
xmin <- "beta[1,1]" #paste0("x[", which_min_ess, "]")
mcmc_hist_r_scale(samp[, , xmin])
mon2 <- monitor_extra(fit_LNM)
plot_ess(mon2)
plot_rhat(mon2)
load("../../../../out/DA_stan/DM_PCAWG_15000_subclonalPCAWG/DM_PCAWG_Nits15000_features1_UCEC-US_ca71ef8c-7eee-40cb-b9b0-023e44257db8.Rdata")
fit = extract(fit_LNM)
posterior2 <- as.matrix(fit_LNM)
color_scheme_set("mix-blue-pink")
p <- bayesplot::mcmc_trace(posterior2,  pars = colnames(posterior2)[grep("beta", colnames(posterior2))],
n_warmup = 300,
facet_args = list(nrow = 2, labeller = label_parsed))
p + facet_text(size = 15)
rstan::Rhat(posterior2)
ess_bulk(posterior2)
ess_tail(posterior2)
rstan::traceplot(posterior2)
mcmc_hist_r_scale(samp[, , xmin])
mon <- monitor(fit_LNM)
mon2 <- monitor_extra(fit_LNM)
print(mon)
rownames(mon)[which.max(mon$Rhat)]
which_min_ess <- which.min(mon[1:50, 'Tail_ESS'])
plot_local_ess(fit = fit_LNM, par = which_min_ess, nalpha = 20)
plot_local_ess(fit = fit_LNM, par = 1, nalpha = 20)
plot_local_ess(fit = fit_LNM, par = 1, nalpha = 20)
plot_local_ess(fit = fit_LNM, par = 2, nalpha = 20)
plot_quantile_ess(fit = fit_LNM, par = which_min_ess, nalpha = 40)
plot_change_ess(fit = fit_LNM, par = which_min_ess)
samp <- as.array(fit_LNM)
xmin <- "beta[1,1]" #paste0("x[", which_min_ess, "]")
mcmc_hist_r_scale(samp[, , xmin])
plot_ess(mon2)
plot_rhat(mon2)
pairs(fit_LNM)
pairs(fit_LNM)
load("../../../../out/DA_stan/DM_PCAWG_9000_subclonalPCAWG/DM_PCAWG_Nits9000_features1_BRCA-UK_ab72a44e-1c27-4f78-960a-8e04802f11d4.Rdata")
fit = extract(fit_LNM)
posterior2 <- as.matrix(fit_LNM)
color_scheme_set("mix-blue-pink")
p <- bayesplot::mcmc_trace(posterior2,  pars = colnames(posterior2)[grep("beta", colnames(posterior2))],
n_warmup = 300,
facet_args = list(nrow = 2, labeller = label_parsed))
p + facet_text(size = 15)
rstan::Rhat(posterior2)
ess_bulk(posterior2)
ess_tail(posterior2)
suppressMessages(library(rnaseqRpkg))
runDEAnalysis
calcDEAnalysis
rnaseqRpkg:::calcDEAnalysis
?DESeqDataSetFromMatrix
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(rnaseqRpkg)
library(biomaRt)
## Load file output from DESeq2
load("../objects/deaObjectFile")
deObj = `~response`
results <- results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(rnaseqRpkg)
library(biomaRt)
## Load file output from DESeq2
load("../objects/deaObjectFile")
pwd()
getwd()
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(rnaseqRpkg)
library(biomaRt)
## Load file output from DESeq2
load("../objects/deaObjectFile")
results <- results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
library(rnaseqRpkg)
library(biomaRt)
results <- results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
deObj = `~response`
results <- results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
results <- DESEq2::results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
results <- DESeq2::results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
rm(list = ls())
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(rnaseqRpkg)
library(biomaRt)
## Load file output from DESeq2
load("../objects/deaObjectFile")
`~response`
deObj = `~response`
## save results in a different format
dif_all = read.table("../objects/differential_all")
dif_all
## save results in a different format
dif_all = read.table("../objects/differential_all", sep = ",")
dif_all
## save results in a different format
dif_all = read.table("../objects/differential_all", sep = ",", header = TRUE)
dif_all
# In any case, the contrast argument of the function results takes a character vector of length three: the name of the variable, the name of the factor level for the numerator of the log2 ratio, and the name of the factor level for the denominator. The contrast argument can also take other forms, as described in the help page for results and below
results <- DESeq2::results(deObj, c("response", "complete_remission_or_response", "progressive_disease"),
alpha = 0.05, format = "DataFrame")
rownames_short = sapply(rownames(results), function(i) strsplit(i, '[.]')[[1]][1])
## Re-name
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
gene_conversion <- getBM(attributes = c("external_gene_name", "ensembl_gene_id"),
filters = "ensembl_gene_id", values = rownames_short,
mart = mart)
gene_conversion = gene_conversion[match(rownames_short, gene_conversion$ensembl_gene_id),]
dim(gene_conversion)
## save results in a different format
dif_all = read.table("../objects/differential_all", sep = ",", header = TRUE)
dif_all
dif_all$X
gene_conversion
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
dif_all$X
## save results in a different format
dif_all = read.table("../objects/differential_all", sep = ",", header = TRUE, stringsAsFactors = FALSE)
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
dif_all = dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),]
## save results in a different format
dif_all = read.table("../objects/differential_all", sep = ",", header = TRUE, stringsAsFactors = FALSE)
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),])
head(dif_all)
## save results in a different format
dif_all = read.table("../objects/differential_all", sep = ",", header = TRUE, stringsAsFactors = FALSE)
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),])
write.table(paste0("../files/", differential_all, ))
## save results in a different format
for(flename in c('differential_all', 'differential_sig')){
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),])
write.table(x = dif_all, file = paste0("../files/", flename, ".csv"))
}
system("mkdir -p ../files/")
## save results in a different format
for(flename in c('differential_all', 'differential_sig')){
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),])
write.table(x = dif_all, file = paste0("../files/", flename, ".csv"))
}
## save results in a different format
for(flename in c('differential_all', 'differential_sig')){
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),])
write.table(x = dif_all, file = paste0("../files/", flename, ".csv"), sep = ",", quote = FALSE)
}
## save results in a different format
for(flename in c('differential_all', 'differential_sig')){
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
if(flename == "differential_all"){
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
),])
}
write.table(x = dif_all, file = paste0("../files/", flename, ".csv"), sep = ",", quote = FALSE)
}
flename="differential_sig"
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
dif_all$
a
dif_all$X
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ),]
gene_conversion$ensembl_gene_id
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  )
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
if_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ),]
dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ),]
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ) %in% gene_conversion$ensembl_gene_id
sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])   %in% gene_conversion$ensembl_gene_id
# if(flename == "differential_all"){
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ),])
dif_all
dif_all$X
dif_all$X[!is.na(dif_all$X)]
## save results in a different format
for(flename in c('differential_all', 'differential_sig')){
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
# if(flename == "differential_all"){
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ),])
dif_all = dif_all$X[!is.na(dif_all$X),]
# }else if(flename == "differential_sig"){
#   dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
#   ),])
# }
write.table(x = dif_all, file = paste0("../files/", flename, ".csv"), sep = ",", quote = FALSE)
}
## save results in a different format
for(flename in c('differential_all', 'differential_sig')){
dif_all = read.table(paste0("../objects/", flename), sep = ",", header = TRUE, stringsAsFactors = FALSE)
# if(flename == "differential_all"){
dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])  ),])
dif_all = dif_all[!is.na(dif_all$X),]
# }else if(flename == "differential_sig"){
#   dif_all = cbind(gene_conversion$external_gene_name, dif_all[match(gene_conversion$ensembl_gene_id, sapply(dif_all$X, function(i) strsplit(i, '[.]')[[1]][1])
#   ),])
# }
write.table(x = dif_all, file = paste0("../files/", flename, ".csv"), sep = ",", quote = FALSE)
}
