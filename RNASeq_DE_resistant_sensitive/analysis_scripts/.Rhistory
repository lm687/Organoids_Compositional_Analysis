geom_abline(slope = 1, intercept = 0, col='black')
ggplot(df_scatter,
aes(x=exposures, y=fitted_exposures, col=signature))+geom_point()+facet_wrap(.~signature, nrow=1)+theme_linedraw()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_abline(slope = 1, intercept = 0, col='black')
ggsave("../../../results/_previous_results/LN_modelling/alpha_trans/RELN_TMB_alphaTsagris_scatter_nos5.png", width = 12, height = 2.5)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(1234)
library(rstan)
library(uuid)
library(ggplot2)
library(optparse)
library(reshape2)
library(TMB)
library(pheatmap)
library(bayesplot)
library(dplyr)
library(parallel)
source("../../../GlobalDA/code/2_inference/helper/helper_DA_stan.R")
source("../../../GlobalDA/code/3_analysis/helper/helper_analyse_posteriors.R")
source("../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
source("functions.R")
source("../../../../../../GlobalDA/code/2_inference/helper/helper_DA_stan.R")
source("../../../../../../GlobalDA/code/3_analysis/helper/helper_analyse_posteriors.R")
source("../../../../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../../")
set.seed(1234)
library(rstan)
library(uuid)
library(ggplot2)
library(optparse)
library(reshape2)
library(TMB)
library(pheatmap)
library(bayesplot)
library(dplyr)
library(parallel)
source("../../../GlobalDA/code/2_inference/helper/helper_DA_stan.R")
source("../../../GlobalDA/code/3_analysis/helper/helper_analyse_posteriors.R")
source("../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
source("functions.R")
Nits = 2500
source("models/helper/functions.R")
Nits = 2500
#-------------------------------------------------------------------------------------------#
TMB::compile("tmb_RE/tmb_RE.cpp", "-std=gnu++17")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../")
set.seed(1234)
library(rstan)
library(uuid)
library(ggplot2)
library(optparse)
library(reshape2)
library(TMB)
library(pheatmap)
library(bayesplot)
library(dplyr)
library(parallel)
source("../../../../GlobalDA/code/2_inference/helper/helper_DA_stan.R")
source("../../../../GlobalDA/code/3_analysis/helper/helper_analyse_posteriors.R")
source("../../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
source("helper/functions.R")
Nits = 2500
#-------------------------------------------------------------------------------------------#
TMB::compile("tmb_RE/tmb_RE.cpp", "-std=gnu++17")
dyn.load(dynlib("tmb_RE/tmb_RE"))
#-------------------------------------------------------------------------------------------#
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
load("../data/britroc_30kb_signature_data.rds")
load("../../data/britroc_30kb_signature_data.rds")
exposures = t(sig_quants)
exposures = normalise_rw(exposures + 1e-4)
patient.meta = patient.meta[match(rownames(exposures), as.character(patient.meta$SAMPLE_ID)),]
sample_by_component = sample_by_component[match(rownames(exposures), rownames(sample_by_component)),]
all(colnames(exposures) == patient.meta$SAMPLE_ID)
all(rownames(exposures) == patient.meta$SAMPLE_ID)
x = t(cbind(1, as.numeric(factor(patient.meta$group))-1))
d = ncol(exposures) ## number of features
n = nrow(exposures) ## number of samples
num_indiv = length(unique(patient.meta$PATIENT_ID))
TMB_data = list(Y = exposures,
num_individuals = num_indiv,
x = t(x),
z = sapply(unique(patient.meta$PATIENT_ID), function(i) as.numeric(patient.meta$PATIENT_ID == i)))
TMB_params = list(beta = matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE),
u_large = matrix(rep(1, (d-1)*num_indiv), nrow=num_indiv),
logs_sd_RE=rep(1, d-1))
obj <- MakeADFun(data = TMB_data, parameters = TMB_params, DLL="tmb_RE", random = "u_large")
# obj <- MakeADFun(data = TMB_data, parameters = TMB_params, DLL="tmb_RE" )
opt <- do.call("optim", obj)
opt
opt$hessian ## <-- FD hessian from optim
rep <- sdreport(obj)
obj <- MakeADFun(data = TMB_data, parameters = TMB_params, DLL="tmb_RE", random = "u_large")
source("helper/header.R") ##20211105
#-------------------------------------------------------------------------------------------#
TMB::compile("tmb_RE/tmb_RE.cpp", "-std=gnu++17")
system("open tmb_RE")
TMB::compile("tmb_RE/tmb_RE_debug20211105.cpp", "-std=gnu++17")
## Using the same model as Alpha trans for now (20211105)
TMB::compile("tmb_RE/tmb_RE_lm.cpp", "-std=gnu++17")
dyn.load(dynlib("tmb_RE/tmb_RE"))
dyn.load(dynlib("tmb_RE/tmb_RE_lm"))
#-------------------------------------------------------------------------------------------#
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
load("../../data/britroc_30kb_signature_data.rds")
exposures = t(sig_quants)
exposures = normalise_rw(exposures + 1e-4)
patient.meta = patient.meta[match(rownames(exposures), as.character(patient.meta$SAMPLE_ID)),]
sample_by_component = sample_by_component[match(rownames(exposures), rownames(sample_by_component)),]
all(rownames(exposures) == patient.meta$SAMPLE_ID)
## distributions of log-ratios
pairs(as(compositions::alr(exposures), 'matrix'))
pdf("../results/LN_modelling/logratios_inputation_exposures.pdf", width = 10, height = 2)
par(mfrow=c(1,6))
sapply(1:6, function(j) hist(as(compositions::alr(exposures), 'matrix')[,j], breaks=30,
main=paste0('Log-ratio ', j), xlab='Value of log-ratio'))
dev.off()
ggplot(melt(as(compositions::alr(exposures), 'matrix')), aes(x=value))+geom_histogram()+facet_wrap(.~Var2, ncol=6)+
theme_bw()
x = t(cbind(1, as.numeric(factor(patient.meta$group))-1))
d = ncol(exposures) ## number of features
n = nrow(exposures) ## number of samples
num_indiv = length(unique(patient.meta$PATIENT_ID))
TMB_data = list(Y = exposures,
num_individuals = num_indiv,
x = t(x),
z = sapply(unique(patient.meta$PATIENT_ID), function(i) as.numeric(patient.meta$PATIENT_ID == i)))
TMB_params = list(beta = matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE),
u_large = matrix(rep(1, (d-1)*num_indiv), nrow=num_indiv),
logs_sd_RE=rep(1, d-1))
# obj <- MakeADFun(data = TMB_data, parameters = TMB_params, DLL="tmb_RE", random = "u_large")
obj <- MakeADFun(data = TMB_data, parameters = TMB_params, DLL="tmb_RE_lm", random = "u_large") ##20211105: changing <tmb_RE> to <tmb_RE_lm>
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# set.seed(1234)
library(uuid)
library(ggplot2)
library(reshape2)
library(compositions)
library(TMB)
# source("../../../GlobalDA/code/2_inference/helper/helper_DA_stan.R")
# source("../../../GlobalDA/code/3_analysis/helper/helper_analyse_posteriors.R")
source("../../../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
source("../helper/functions.R")
source("../helper/header.R")
#-------------------------------------------------------------------------------------------#
all(patient.meta$SAMPLE_ID == rownames(exposures))
folder_out_RDS <- "../../../out/inference/partialILR_FE2/"
folder_images_out <- "../../../results/partialILRmodelling_FE2/"
system(paste0("mkdir -p ", folder_out_RDS))
system(paste0("mkdir -p ", folder_images_out))
#-------------------------------------------------------------------------------------------#
## Transform data with partial ILR
which_zero = t(apply(exposures, 1, function(i) as.numeric((i==0)) ))
exposures[1,]
which_zero[1,]
as.vector(compositions::ilr(exposures)[1,])
give_partial_ilr_basis(which(which_zero[1,] == 1), d=7)
give_partial_ilr_basis(which_zero_vector = 2, d = 5)
## patients with at least one relapse sample
## patients with no relapse sample
plot_ternary(remove_only_zero_rows(exposures[!(patient.meta$PATIENT_ID %in% patient.meta$PATIENT_ID[patient.meta$group == "rlps"]),
c(2,3,7)]), main = "Patients without relapse sample.\n Archival samples")
pdf(paste0(folder_images_out, "ternary_plot_samples_archival_relapse_2.pdf"), width=8, height=3)
par(mfrow=c(1,3))
## patients with at least one relapse sample
## patients with no relapse sample
plot_ternary(remove_only_zero_rows(exposures[!(patient.meta$PATIENT_ID %in% patient.meta$PATIENT_ID[patient.meta$group == "rlps"]),
c(4,3,7)]), main = "Patients without relapse sample.\n Archival samples")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% patient.meta$PATIENT_ID[patient.meta$group == "rlps"] &
patient.meta$group == "arx"),
c(4,3,7)]), main = "Patients with relapse sample.\n Archival samples.")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% patient.meta$PATIENT_ID[patient.meta$group == "rlps"] &
patient.meta$group == "rlps"),
c(4,3,7)]), main = "Patients with relapse sample.\n Relapse samples.")
dev.off()
system(paste0("open ", folder_images_out))
plot_ternary(remove_only_zero_rows(exposures[,c(4,3,7)]), main = "All patients")]
plot_ternary(remove_only_zero_rows(exposures[,c(4,3,7)]), main = "All patients")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(4,3,7)]), main = "All patients")
par(mfrow=c(2,2))
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(4,3,7)]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", c(4,3,7)]), main = "All patients, rel")
par(mfrow=c(2,2))
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(1,3,7)]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", c(1,3,7)]), main = "All patients, rel")
paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209))
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
c(4,3,7)]), main = "Patients without relapse sample.\n Archival samples")
dev.off()
par(mfrow=c(2,2))
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(1,3,7)]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", c(1,3,7)]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
c(4,3,7)]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
c(4,3,7)]), main = "Interesting patients, rel")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(1,3,7)]), main = "All patients, arx")
dev.off()
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(1,3,7)]), main = "All patients, arx")
par(mfrow=c(2,2))
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx", c(1,3,7)]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", c(1,3,7)]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
c(4,3,7)]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
c(4,3,7)]), main = "Interesting patients, rel")
par(mfrow=c(2,2), mar=c(0,0,0,0))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
subset_sigs]), main = "Interesting patients, rel")
pdf(paste0(folder_images_out, "ternary_plot_samples_archival_relapse_PhilAmplificationSamples.pdf"), width=6, height=5)
par(mfrow=c(2,2), mar=c(0,0,0,0))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
subset_sigs]), main = "Interesting patients, rel")
dev.off()
system(paste0("open ", folder_images_out))
pdf(paste0(folder_images_out, "ternary_plot_samples_archival_relapse_PhilAmplificationSamples.pdf"), width=6, height=5)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
subset_sigs]), main = "Interesting patients, rel")
dev.off()
par(mfrow=c(2,2), mar=c(0.8,0.2,0.2,0.2))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
dev.off()
pdf(paste0(folder_images_out, "ternary_plot_samples_archival_relapse_PhilAmplificationSamples.pdf"), width=6, height=5)
par(mfrow=c(2,2), mar=c(0.8,0.2,0.2,0.2))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
subset_sigs]), main = "Interesting patients, rel")
dev.off()
pdf(paste0(folder_images_out, "ternary_plot_samples_archival_relapse_PhilAmplificationSamples.pdf"), width=6, height=5)
par(mfrow=c(2,2), mar=c(0.2,0.8,0.2,0.2))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
subset_sigs]), main = "Interesting patients, rel")
dev.off()
pdf(paste0(folder_images_out, "ternary_plot_samples_archival_relapse_PhilAmplificationSamples.pdf"), width=6, height=5)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.8,0.2))
subset_sigs <- c(4,3,7)
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "arx",subset_sigs]), main = "All patients, arx")
plot_ternary(remove_only_zero_rows(exposures[patient.meta$group == "rlps", subset_sigs]), main = "All patients, rel")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "arx"),
subset_sigs]), main = "Interesting patients, arx")
plot_ternary(remove_only_zero_rows(exposures[(patient.meta$PATIENT_ID %in% paste0('BRITROC-', c(65, 241, 23, 267, 216, 74, 274, 209)))&
(patient.meta$group == "rlps"),
subset_sigs]), main = "Interesting patients, rel")
dev.off()
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
library(ggrepel)
library(reshape2)
library(readxl)
require(jcolors)
library(biomaRt)
require(GSVA)
require(GSVAdata)
require(pheatmap)
library(ReactomePA)
library(DESeq2)
library(lsa) ## for cosine similarity
source("other_scripts/functions.R")
gene_to_ensembl <- function(genename){
t2g_GRCh38$ensembl_gene_id[match(genename, t2g_GRCh38$external_gene_name)]
}
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
raw_counts0 = read.csv("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/RnaSeqPip/counts/counts_raw_subsetno3pbias.csv", stringsAsFactors = FALSE)
rownames(raw_counts0) = raw_counts0[,1]; raw_counts0 <- raw_counts0[,-1]
normalised_counts = read.csv("../files/counts_norm.csv", stringsAsFactors = FALSE)
rownames(normalised_counts) = normalised_counts[,1]
normalised_counts = normalised_counts[,-1]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
# Renaming
renaming1 = read_excel("../files/PDOnameProperSample_sWGS_RNAseq.xlsx")
renaming_NC = renaming1[match( gsub('[.]', '', colnames(normalised_counts)), gsub('-', '', renaming1$sampleNameRNAseq)),]
colnames(normalised_counts)[!is.na(renaming_NC$PDO)] = renaming_NC$PDO[!is.na(renaming_NC$PDO)]
colnames(normalised_counts)
## Remove normal samples
normalised_counts = normalised_counts[,!grepl('FT', colnames(normalised_counts))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## 3' bias
bias3prime = read_xlsx("../files/PDOnameProperSample_sWGS_RNAseq_3bias.xlsx")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
prcomp_normalisedcounts = prcomp(t(normalised_counts), scale. = TRUE, center = TRUE)
eigs_normalisedcounts <- prcomp_normalisedcounts$sdev^2
round(eigs_normalisedcounts/sum(eigs_normalisedcounts)*100)
colnames(raw_counts0) <- renaming1$PDO[match(gsub('[.]', '-', colnames(raw_counts0)), renaming1$sampleNameRNAseq)]
raw_counts0 = raw_counts0[,!(colnames(raw_counts0) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))]
## in CN/GE script we have already re-derived the normalised DESeq2 counts with non-3' bias samples (PDO and FT)
renormalised_counts <- readRDS("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/fig3_renormalised_counts_obj_11orgs.RDS")
renormalised_counts <- DESeq2::counts(renormalised_counts, normalized=T)
## keeping only PDO
renormalised_counts <- renormalised_counts[,grepl('PDO', colnames(renormalised_counts))]
ncol(renormalised_counts) ## we have 11 organoids
# renormalised_counts <- raw_counts0
# renormalised_counts <- DESeqDataSetFromMatrix(countData = renormalised_counts,
#                               colData = cbind.data.frame(Sample=colnames(renormalised_counts),
#                                                          Group=1),
#                               design = ~ 1)
# renormalised_counts <- estimateSizeFactors(renormalised_counts)
# renormalised_counts <- counts(renormalised_counts, normalized=T)
normalised_counts <- renormalised_counts
(colnames(normalised_counts) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))
## subset done above
# normalised_counts = normalised_counts[,!(colnames(normalised_counts) %in% c('PDO14', 'PDO16', 'PDO18',
#                                                                             'PDO13', 'PDO4', 'PDO9',
#                                                                             'PDO17'))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
prcomp_normalisedcounts = prcomp(t(normalised_counts), scale. = TRUE, center = TRUE)
#--------------------------------------------------------------------------------#
hclust_rnaseq <- (hclust(dist(t(normalised_counts))))
hclust_rnaseq
plot(hclust_rnaseq)
ssgsea <- gsva(as(rename_rows(normalised_counts), 'matrix'), c2BroadSets, method = 'ssgsea')
rename_rows <- function(i){
.entrez <- t2g$entrezgene_id[match(rownames(i), t2g$ensembl_gene_id)]
.dup <- duplicated(.entrez) | is.na(.entrez)
i <- i[!.dup,]
.entrez <- .entrez[!.dup]
rownames(i) <- .entrez
i
}
ssgsea <- gsva(as(rename_rows(normalised_counts), 'matrix'), c2BroadSets, method = 'ssgsea')
t2g <- readRDS("../../copy_number_analysis_organoids/robjects/t2g2.RDS")
ssgsea <- gsva(as(rename_rows(normalised_counts), 'matrix'), c2BroadSets, method = 'ssgsea')
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
data(c2BroadSets) ## from GSVAdata
ssgsea <- gsva(as(rename_rows(normalised_counts), 'matrix'), c2BroadSets, method = 'ssgsea')
ssgsea
View(names(ssgsea))
View((ssgsea))
# ReactomePA::enrichPathway()
library(pathfindR)
ReactomePA::enrichPathway()
reactome_pa <- ReactomePA::enrichPathway(normalised_counts)
View(ssgsea)
rownames(ssgsea)
rownames(ssgsea)[grepl('WNT', rownames(ssgsea))]
ssgsea_repair <- ssgsea[c('KEGG_HOMOLOGOUS_RECOMBINATION', 'KEGG_MISMATCH_REPAIR',
'KEGG_BASE_EXCISION_REPAIR', 'KEGG_NUCLEOTIDE_EXCISION_REPAIR',
'KEGG_NON_HOMOLOGOUS_END_JOINING',
'KEGG_ERBB_SIGNALING_PATHWAY', 'KEGG_WNT_SIGNALING_PATHWAY', 'WNT_SIGNALING' ),]
pheatmap(ssgsea_repair)
pdf("../figures/other_DE/pathways_heatmap_orgs_withWNT.pdf", height = 4, width = 7)
pheatmap(ssgsea_repair)
dev.off()
system("open ../figures/other_DE/p")
system("open ../figures/other_DE/")
dev.off()
pdf("../figures/other_DE/pathways_heatmap_orgs_withWNT.pdf", height = 4, width = 7)
pheatmap(ssgsea_repair)
dev.off()
t2g$ensembl_gene_id[match('WNT', t2g$external_gene_name)
]
t2g$external_gene_name
t2g$external_gene_name[grep('WNT', t2g$external_gene_name)]
t2g$external_gene_name[grep('WNT', t2g$external_gene_name)]
t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)], t2g$external_gene_name)]
t2g$external_gene_name
t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)], t2g$external_gene_name)]
head(normalisedcounts)
head(normalised_counts)
normalised_counts[t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)], t2g$external_gene_name)],]
match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)], t2g$external_gene_name)], rownames(normalised_counts))
normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts))]
normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts)),]
head(melt(normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts)),]))
ggplot(melt(normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts)),]),
aes(x=Var1, y=value, group=Var2))+geom_line()
ggplot(melt(normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts)),]),
aes(x=Var1, y=value, group=Var2))+geom_line()+scale_y_continuous(trans = "log2")
wnt_expression <- normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts)),]
ggplot(melt(wnt_expression),
aes(x=Var1, y=value, group=Var2))+geom_line()+scale_y_continuous(trans = "log2")
wnt_expression
rownames(wnt_expression)
t2g$external_gene_name[match(rownames(wnt_expression), t2g$ensembl_gene_id)]
wnt_expression <- normalised_counts[match(t2g$ensembl_gene_id[match(t2g$external_gene_name[grep('WNT', t2g$external_gene_name)],
t2g$external_gene_name)], rownames(normalised_counts)),]
rownames(wnt_expression) <- t2g$external_gene_name[match(rownames(wnt_expression), t2g$ensembl_gene_id)]
ggplot(melt(wnt_expression),
aes(x=Var1, y=value, group=Var2))+geom_line()+scale_y_continuous(trans = "log2")
ggplot(melt(wnt_expression),
aes(x=Var1, y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")
wnt_expression
rowSums(wnt_expression)
order(rowSums(wnt_expression))
rownames(wnt_expression)[order(rowSums(wnt_expression))]
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=rownames(wnt_expression)[order(rowSums(wnt_expression))]),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")
rownames(wnt_expression)
wnt_expression <- wnt_expression[!is.na(rownames(wnt_expression)),]
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")+
labs(x='WNT genes', y='Gene expression (normalised counts)')
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")+
labs(x='WNT genes', y='Gene expression (normalised counts)', col='PDO')
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")+
labs(x='WNT genes', y='Gene expression (normalised counts)', col='PDO')
ggsave("../figures/PCA_RNASeq/WNT_genes_expression.png", width = 8, height = 8)
system("open "../figures/PCA_RNASeq/")
system("open ../figures/PCA_RNASeq/")
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")+
labs(x='WNT genes', y='Gene expression (normalised counts)', col='PDO')+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggsave("../figures/PCA_RNASeq/WNT_genes.png", width = 8, height = 8)
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")+
labs(x='WNT genes', y='Gene expression (normalised counts)', col='PDO')+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggsave("../figures/PCA_RNASeq/WNT_genes.png", width = 8, height = 8)
ggplot(melt(wnt_expression),
aes(x=factor(Var1, levels=unique(rownames(wnt_expression)[order(rowSums(wnt_expression))])),
y=value, group=Var2, col=Var2))+geom_line()+scale_y_continuous(trans = "log2")+
labs(x='WNT genes', y='Gene expression (normalised counts)', col='PDO')+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggsave("../figures/PCA_RNASeq/WNT_genes.png", width = 5, height = 5)
