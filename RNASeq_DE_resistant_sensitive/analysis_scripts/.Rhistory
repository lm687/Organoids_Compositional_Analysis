typeof(comparison_randomintercepts_models_nonexo$value)
typeof(comparison_randomintercepts_models_nonexo$L1)
typeof(comparison_randomintercepts_models_nonexo$ct)
typeof(comparison_randomintercepts_models_nonexo$ct2)
comparison_randomintercepts_models_nonexo <- do.call(rbind.data.frame, comparison_randomintercepts_models_nonexo)
# comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
# comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_nonexo[[]]
comparison_randomintercepts_models_all <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL,
model_diagRE_DMSL_list = diagRE_DMSL,
model_fullRE_M_list = fullRE_M)
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
comparison_randomintercepts_models_nonexo[[1]]
data.frame(comparison_randomintercepts_models_nonexo)
ldply (comparison_randomintercepts_models_nonexo, data.frame)
library (plyr)
ldply (comparison_randomintercepts_models_nonexo, data.frame)
typeof(ldply (comparison_randomintercepts_models_nonexo, data.frame))
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
# comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
# comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_rbind
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
require(ggplot2)
require(ggrepel)
require(cowplot)
require(gridExtra)
require(latex2exp)
require(scales)
require(pheatmap)
require(dplyr)
subset_genes_of_interest = c('MYC', 'CCNE1', 'PIK3CA', 'TERT', 'KRAS', 'PTEN', 'RB1', 'AKT1',
'AKT2', 'PARP1', 'PARP2', 'ATM', 'ATR', 'WEE1', 'TOP1', 'TUBB1',
'AKT3', 'CCND1', 'CCND2', 'CCND3', 'CDKN2A', 'CDKN2B', 'MECOM', 'CDK12')
df_gene_characteristics <- readRDS("../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/fig3_df_gene_characteristics.RDS")
df_average_bottomCN <- readRDS("../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/fig3_df_average_bottomCN.RDS")
df_average_bottomCN <- df_average_bottomCN[!is.na(df_average_bottomCN$Gene),]
select_genes_mostvar <- readRDS("../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/joint_counts_CN_subset.RDS")
df_average_bottomCN = df_average_bottomCN[df_average_bottomCN$Gene %in% unique(select_genes_mostvar$CN.gene_name),]
pca_with_gsva_annotation_NC <- readRDS("../RNASeq_DE_resistant_sensitive/objects/fig4_pca_with_gsva_annotation_NC.RDS")
df_colmeans_deseqcounts_correlation_tcga_org <- readRDS("../RNASeq_DE_resistant_sensitive/objects/fig4_df_colmeans_deseqcounts_correlation_tcga_org.RDS")
ssgsea_repair <- readRDS("../RNASeq_DE_resistant_sensitive/objects/fig3_ssgsea_repair.RDS")
.x <- df_colmeans_deseqcounts_correlation_tcga_org[df_colmeans_deseqcounts_correlation_tcga_org$TME == "TME",]
.x$TME <- "Other"
df_colmeans_deseqcounts_correlation_tcga_org = rbind(df_colmeans_deseqcounts_correlation_tcga_org, .x)
df_colmeans_deseqcounts_correlation_tcga_org$TME = sapply(df_colmeans_deseqcounts_correlation_tcga_org$TME,
function(i) ifelse(i == 'TME', yes = 'Consensus TME', no = 'All genes'))
# a <- ggplot(df_colmeans_deseqcounts_correlation_tcga_org,
#        aes(x=log(means_tcga), y=log(means_org), col=TME))+geom_point()+
#   # scale_x_continuous(trans = "log2")+#scale_y_continuous(trans = "log2")+
#   geom_abline(slope = 1, intercept = 0, lty='dashed')+facet_wrap(.~TME)+
#   theme(legend.position = "bottom")+#ggtitle('Comparison of DESeq counts between TCGA\nand organoid samples')+
#   theme_bw()+labs(x='Count means for TCGA (log2)', y='Count means for organoids (log2)')+theme(legend.position = "bottom")
df_colmeans_deseqcounts_correlation_tcga_org$xidentity=c(NA,rep(c(.01, max(df_colmeans_deseqcounts_correlation_tcga_org$means_tcga, na.rm=T)),
nrow(df_colmeans_deseqcounts_correlation_tcga_org)/2))
df_colmeans_deseqcounts_correlation_tcga_org$yidentity=c(NA,rep(c(.01, max(df_colmeans_deseqcounts_correlation_tcga_org$means_tcga, na.rm=T)),
nrow(df_colmeans_deseqcounts_correlation_tcga_org)/2))
# df_colmeans_deseqcounts_correlation_tcga_org$yidentity=c(NA,rep(c(.01, max(df_colmeans_deseqcounts_correlation_tcga_org$means_org, na.rm=T)),
#                                                            nrow(df_colmeans_deseqcounts_correlation_tcga_org)/2))
a <- ggplot(df_colmeans_deseqcounts_correlation_tcga_org,
aes(x=(means_tcga), y=(means_org), col=TME))+
geom_point(alpha=0.2)+
# geom_abline(slope = (1), intercept = 0, lty='dashed')
facet_wrap(.~TME)+
scale_x_continuous(trans = "log2",
labels = scales::label_scientific(digits=0))+
# scale_y_continuous(trans = "log2")+
scale_y_continuous(trans = "log2",
labels = scales::label_scientific(digits=0))+
geom_line(aes(x=xidentity, y=yidentity), lty='dashed', col='black')+
theme(legend.position = "bottom")+
theme_bw()+labs(x='Count means for TCGA (log2)', y='Count means for organoids (log2)')+
theme(legend.position = "bottom",
plot.margin = unit(c(0.3,1.3,0.3,.3), "lines"))+
guides(col="none")
# > rownames(pca_with_gsva_annotation_NC)
# [1] "PDO6"  "PDO5"  "PDO15" "PDO11" "PDO3"  "PDO10" "PDO17" "PDO2"  "PDO9"  "PDO8"  "PDO1"  "PDO12"
# [13] "PDO13" "PDO7"  "PDO4"
pca_with_gsva_annotation_NC$germline_BRCA = c()
# b <- ggplot(pca_with_gsva_annotation_NC, aes(x=PC1, y=PC2, col=factor(BRCA1), label=labels))+
b <- ggplot(pca_with_gsva_annotation_NC, aes(x=PC1, y=PC2, label=labels))+
geom_point()+
geom_text_repel()+theme_bw()+theme(legend.position = "bottom")+ theme(legend.title = element_blank())#+
ggtitle('Number of mutations in BRCA (TAMSeq)')
# b0 <- ggplot(pca_with_gsva_annotation_NC, aes(x=PC1, y=PC2, col=factor(BRCA1), label=labels))+
b0 <- ggplot(pca_with_gsva_annotation_NC, aes(x=PC1, y=PC2, label=labels))+
geom_point()+
theme_bw()+theme(legend.position = "bottom")+ theme(legend.title = element_blank())
df_average_bottomCN[df_average_bottomCN$Gene == 'ERBB2','label'] = 'ERBB2'
c <- ggplot(droplevels(df_average_bottomCN),
aes(x=Gene, y=average_comparison_CN_DESeq, label=as.character(label)))+
geom_point()+#geom_label_repel(max.overlaps = 30, segment.size = 0.01)+
# geom_label()+
# geom_text(force = .01, direction = "y", nudge_x = 0, nudge_y = .1)+
geom_text_repel(force = .8, size=3)+
theme(axis.text.x=element_blank(), axis.line.x.bottom =element_blank(),
panel.grid.minor = element_line(size = 0.1, colour = "black"))+
geom_hline(yintercept = 0.5, lty='dashed')+labs(x='Ranked genes', y='Averaged higher CN and higher GE')
d <- ggplot(df_gene_characteristics[,!duplicated(colnames(df_gene_characteristics))], aes(x=df_average_bottomCN.average_comparison_CN_DESeq, y=r2_normCNnormDESeq,
label=ifelse( (df_average_bottomCN.average_comparison_CN_DESeq >= .91) &
(r2_normCNnormDESeq > 0.91),
yes = Gene, no = NA )))+
geom_boxplot(aes(group=df_average_bottomCN.average_comparison_CN_DESeq),
width=0.5/length(unique(df_gene_characteristics$df_average_bottomCN.average_comparison_CN_DESeq)),
col='blue')+
geom_point()+geom_label_repel(max.overlaps=100, size=3)+theme_bw()+
labs(x='Averaged higher CN and higher GE', y=TeX('R^2 between CN and GE'))+coord_flip()
e <- ggplot(df_gene_characteristics[,!duplicated(colnames(df_gene_characteristics))], aes(x=df_average_bottomCN.average_comparison_CN_DESeq, y=r2_normCNnormDESeq,
label=ifelse( (Gene %in% subset_genes_of_interest) | ((df_average_bottomCN.average_comparison_CN_DESeq >= .8) &
(r2_normCNnormDESeq > 0.5)),
yes = Gene, no = NA )))+
geom_boxplot(aes(group=df_average_bottomCN.average_comparison_CN_DESeq),
width=0.5/length(unique(df_gene_characteristics$df_average_bottomCN.average_comparison_CN_DESeq)),
col='blue')+
geom_point()+
geom_label_repel(aes(col=factor(ifelse( test = Gene %in% subset_genes_of_interest,
yes = 'Gene of interest', no='High CN/GE correlation'))),
size=3)+
theme_bw()+labs(x='Averaged higher CN and higher GE', y=TeX('R^2 between CN and GE'))+
theme(legend.title = element_blank(), legend.position = "bottom")
# cowplot::
pdf("fig3.pdf", width = 7, height = 7)
grid.arrange(a, b, c, d)
dev.off()
pdf("fig3_v2.pdf", width = 12, height = 4)
grid.arrange(a, b, e, nrow=1)
dev.off()
df_average_bottomCN_summary <- df_gene_characteristics %>%
group_by(df_average_bottomCN.average_comparison_CN_DESeq) %>%
summarise(median=median(r2_normCNnormDESeq, na.rm = T))
df_average_bottomCN_summary$Gene = NA
c <- ggplot(df_gene_characteristics, aes(x=df_average_bottomCN.average_comparison_CN_DESeq, y=r2_normCNnormDESeq,
label=ifelse(Gene %in% subset_genes_of_interest,
yes = Gene, no = NA )))+
geom_jitter(alpha=0.2, width = 0.03)+theme_bw()+
geom_boxplot(aes(group=df_average_bottomCN.average_comparison_CN_DESeq),
width=0.5/length(unique(df_gene_characteristics$df_average_bottomCN.average_comparison_CN_DESeq)),
col='white', outlier.shape = NA, fill=NA)+
geom_line(data=df_average_bottomCN_summary,
aes(x=df_average_bottomCN.average_comparison_CN_DESeq, y=median,
group=1), col='blue', size=2)+
geom_label_repel()+
labs(x='Averaged higher CN and higher GE', y=TeX('R^2 between CN and GE'))
d <- ggplot(df_gene_characteristics,
aes(x=cor_normCNnormDESeq, y=averageCN,
# label=ifelse( (log(averageCN) > 1) & (cor_normCNnormDESeq > 0.8), yes = Gene, no = NA  )))+
label=ifelse( (log(averageCN) > 1.5) & (cor_normCNnormDESeq > 0.5), yes = Gene, no = NA  )))+
geom_point(alpha=0.2)+
geom_density_2d()+
scale_y_continuous(trans = "log2")+
geom_label_repel(max.overlaps = 30)+theme_bw()+
labs(x='Correlation between CN and GE', y='Average copy number')
rownames(ssgsea_repair) <- stringr::str_to_title(tolower(gsub('_', ' ', gsub('KEGG_', '', rownames(ssgsea_repair)))))
rownames(ssgsea_repair) <- gsub('Erbb', 'ERBB', rownames(ssgsea_repair))
e <- pheatmap(ssgsea_repair, legend = F)
pdf("fig3_v4.pdf", width = 10, height = 6.5)
plot_grid(plot_grid(a, b0, b, rel_widths=c(3,2,2), ncol=3, labels=c('a', 'b')), plot_grid(c, d, e[[4]], labels=c('c', 'd', 'e'), ncol=3, rel_widths=c(1.8,1.6,2.5)), nrow=2, rel_heights = c(1.8, 2))
dev.off()
pca_with_gsva_annotation_NC
#--------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
library(ggrepel)
library(reshape2)
library(readxl)
require(jcolors)
library(biomaRt)
require(GSVA)
require(GSVAdata)
require(pheatmap)
library(ReactomePA)
library(DESeq2)
library(lsa) ## for cosine similarity
source("other_scripts/functions.R")
gene_to_ensembl <- function(genename){
t2g_GRCh38$ensembl_gene_id[match(genename, t2g_GRCh38$external_gene_name)]
}
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
raw_counts0 = read.csv("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/RnaSeqPip/counts/counts_raw_subsetno3pbias.csv", stringsAsFactors = FALSE)
rownames(raw_counts0) = raw_counts0[,1]; raw_counts0 <- raw_counts0[,-1]
normalised_counts = read.csv("../files/counts_norm.csv", stringsAsFactors = FALSE)
rownames(normalised_counts) = normalised_counts[,1]
normalised_counts = normalised_counts[,-1]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
# Renaming
renaming1 = read_excel("../files/PDOnameProperSample_sWGS_RNAseq.xlsx")
renaming_NC = renaming1[match( gsub('[.]', '', colnames(normalised_counts)), gsub('-', '', renaming1$sampleNameRNAseq)),]
colnames(normalised_counts)[!is.na(renaming_NC$PDO)] = renaming_NC$PDO[!is.na(renaming_NC$PDO)]
colnames(normalised_counts)
## Remove normal samples
normalised_counts = normalised_counts[,!grepl('FT', colnames(normalised_counts))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## 3' bias
bias3prime = read_xlsx("../files/PDOnameProperSample_sWGS_RNAseq_3bias.xlsx")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
prcomp_normalisedcounts = prcomp(t(normalised_counts), scale. = TRUE, center = TRUE)
eigs_normalisedcounts <- prcomp_normalisedcounts$sdev^2
round(eigs_normalisedcounts/sum(eigs_normalisedcounts)*100)
ggplot(cbind.data.frame(prcomp_normalisedcounts$x,
col=bias3prime$`3'Bias`[match(rownames(prcomp_normalisedcounts$x),bias3prime$PDO)],
label=rownames(prcomp_normalisedcounts$x)),
aes(x=PC1, y=PC2, col=col, label=label))+
geom_label_repel()+
geom_point()
ggsave("../figures/PCA_RNASeq/3primebias_PCA_counts.pdf", width = 6.5, height = 5)
ggplot(cbind.data.frame(prcomp_normalisedcounts$x,
col=bias3prime$`3'Bias`[match(rownames(prcomp_normalisedcounts$x),bias3prime$PDO)],
label=rownames(prcomp_normalisedcounts$x),
pc1=prcomp_normalisedcounts$x[,1]),
aes(x=factor(label, levels=bias3prime$PDO[order(bias3prime$`3'Bias`)]),
y=col, fill=pc1))+
geom_bar(stat = "identity")
ggsave("../figures/PCA_RNASeq/3primebias_barplot_counts.pdf", width = 9.5, height = 5)
rm(prcomp_normalisedcounts)
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## Re-normalise counts
colnames(raw_counts0) <- renaming1$PDO[match(gsub('[.]', '-', colnames(raw_counts0)), renaming1$sampleNameRNAseq)]
raw_counts0 = raw_counts0[,!(colnames(raw_counts0) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))]
## in CN/GE script we have already re-derived the normalised DESeq2 counts with non-3' bias samples (PDO and FT)
renormalised_counts <- readRDS("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/fig3_renormalised_counts_obj_11orgs.RDS")
renormalised_counts <- DESeq2::counts(renormalised_counts, normalized=T)
## keeping only PDO
renormalised_counts <- renormalised_counts[,grepl('PDO', colnames(renormalised_counts))]
ncol(renormalised_counts) ## we have 11 organoids
# renormalised_counts <- raw_counts0
# renormalised_counts <- DESeqDataSetFromMatrix(countData = renormalised_counts,
#                               colData = cbind.data.frame(Sample=colnames(renormalised_counts),
#                                                          Group=1),
#                               design = ~ 1)
# renormalised_counts <- estimateSizeFactors(renormalised_counts)
# renormalised_counts <- counts(renormalised_counts, normalized=T)
normalised_counts <- renormalised_counts
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## Removing samples with 3' bias
normalised_counts = normalised_counts[,!(colnames(normalised_counts) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
prcomp_normalisedcounts = prcomp(t(normalised_counts), scale. = TRUE, center = TRUE)
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
hclust_rnaseq <- (hclust(dist(t(normalised_counts))))
saveRDS(hclust_rnaseq, "../objects/hclust_rnaseq.RDS")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## TAMSeq
TAMSeq = read_xlsx("../files/SupplementaryTable1.xlsx")
TAMSeq[,'org'] = renaming1$PDO[match(TAMSeq$name, renaming1$ID)]
TAMSeq = dcast(TAMSeq[,c(8, 20)], org~`Symbol (Gene ID)`)
TAMSeq = TAMSeq[match(colnames(normalised_counts), TAMSeq$org),]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# genes <- TPM$gene_id
t2g <- getBM(
attributes = c('ensembl_gene_id', 'entrezgene_id', 'external_gene_name', 'chromosome_name'),
values = rownames(normalised_counts),
filter = 'ensembl_gene_id',
mart = mart, useCache = FALSE)
entrezgene_id_matched_normalisedcounts = t2g[match(rownames(normalised_counts), t2g$ensembl_gene_id),'entrezgene_id']
naming_id_matched_normalisedcounts = t2g[match(rownames(normalised_counts), t2g$ensembl_gene_id),]
t2g_GRCh38 <- readRDS("../../copy_number_analysis_organoids/robjects/t2g2.RDS")
coding <- readRDS("../../copy_number_analysis_organoids/robjects/coding_genes.RDS")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
data(c2BroadSets) ## from GSVAdata
#--------------------------------------------------------------------------------#
# Are the normalised counts normally-distributed?
png("../figures/pairs_for_PCA_MVN_DESeq2counts.png")
pairs(normalised_counts, col=alpha('black', 0.02), pch=19)
dev.off()
png("../figures/pairs_for_PCA_MVN_DESeq2countlog2s.png")
pairs(log2(normalised_counts+1), col=alpha('black', 0.02), pch=19)
dev.off()
pairs(t(normalised_counts[1:4,]))
pairs(t(log2(normalised_counts[1:4,])))
# for(i in 1:nrow(normalised_counts)){
plot(0, 0, xlim=c(-2, 2), ylim=c(-3, 5))
for(i in 1:4){
b <- qqnorm(normalised_counts[i,], plot.it = F)
b <- lapply(b, function(i) i[order(b$x)])
b$x <- as.vector(scale(b$x))
b$y <- as.vector(scale(b$y))
lines(b$x, b$y, type='l')
}
## prcompw ith log2 normalised counts
prcomp_log2 <- prcomp(t(log2(normalised_counts+1)))
ggplot(cbind.data.frame(prcomp_log2$x[,1:2], lab=rownames(prcomp_log2$x)), aes(x=PC1, y=PC2, label=lab))+geom_point()+geom_label_repel()
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## same with normalised counts
TPM_data_entrez_NC = normalised_counts[!is.na(entrezgene_id_matched_normalisedcounts),]
entrezgene_id_matched_normalisedcounts = entrezgene_id_matched_normalisedcounts[!is.na(entrezgene_id_matched_normalisedcounts)]
TPM_data_entrez_NC = TPM_data_entrez_NC[!duplicated(entrezgene_id_matched_normalisedcounts),]
entrezgene_id_matched_normalisedcounts = entrezgene_id_matched_normalisedcounts[!duplicated(entrezgene_id_matched_normalisedcounts)]
rownames(TPM_data_entrez_NC) = entrezgene_id_matched_normalisedcounts
results_Gsva_counts <- gsva(expr = as(TPM_data_entrez_NC, 'matrix'), gset.idx.list = c2BroadSets, min.sz=10, max.sz=500, verbose=TRUE)
pca_with_gsva_annotation_NC = cbind.data.frame(prcomp_normalisedcounts$x, t(results_Gsva_counts[,match(colnames(results_Gsva_counts), rownames(prcomp_normalisedcounts$x))]),
labels=rownames(prcomp_normalisedcounts$x),
TAMSeq)
ggplot(pca_with_gsva_annotation_NC, aes(x=PC1, y=PC2, col=KAUFFMANN_DNA_REPAIR_GENES, label=labels))+
geom_point()+
geom_label_repel()+
scale_color_jcolors_contin("pal3", reverse = TRUE)+labs(col = "Threshold", shape="Amount")+
ggtitle('KAUFFMANN_DNA_REPAIR_GENES')
ggsave("../figures/PCA_RNASeq/PCA_counts_subset_KAUFFMANN_DNA_REPAIR_GENES.png", width = 6.5, height = 5)
saveRDS(pca_with_gsva_annotation_NC, "../objects/fig4_pca_with_gsva_annotation_NC.RDS")
saveRDS(prcomp_normalisedcounts, "../objects/fig4_pca_with_gsva_annotation_NC_prcomp.RDS")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
require(ggplot2)
require(ggrepel)
require(cowplot)
require(gridExtra)
require(latex2exp)
require(scales)
require(pheatmap)
require(dplyr)
subset_genes_of_interest = c('MYC', 'CCNE1', 'PIK3CA', 'TERT', 'KRAS', 'PTEN', 'RB1', 'AKT1',
'AKT2', 'PARP1', 'PARP2', 'ATM', 'ATR', 'WEE1', 'TOP1', 'TUBB1',
'AKT3', 'CCND1', 'CCND2', 'CCND3', 'CDKN2A', 'CDKN2B', 'MECOM', 'CDK12')
df_gene_characteristics <- readRDS("../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/fig3_df_gene_characteristics.RDS")
df_average_bottomCN <- readRDS("../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/fig3_df_average_bottomCN.RDS")
df_average_bottomCN <- df_average_bottomCN[!is.na(df_average_bottomCN$Gene),]
select_genes_mostvar <- readRDS("../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/joint_counts_CN_subset.RDS")
df_average_bottomCN = df_average_bottomCN[df_average_bottomCN$Gene %in% unique(select_genes_mostvar$CN.gene_name),]
pca_with_gsva_annotation_NC <- readRDS("../RNASeq_DE_resistant_sensitive/objects/fig4_pca_with_gsva_annotation_NC.RDS")
pca_with_gsva_annotation_NC_prcomp <- readRDS("../objects/fig4_pca_with_gsva_annotation_NC_prcomp.RDS")
df_colmeans_deseqcounts_correlation_tcga_org <- readRDS("../RNASeq_DE_resistant_sensitive/objects/fig4_df_colmeans_deseqcounts_correlation_tcga_org.RDS")
ssgsea_repair <- readRDS("../RNASeq_DE_resistant_sensitive/objects/fig3_ssgsea_repair.RDS")
#--------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
library(ggrepel)
library(reshape2)
library(readxl)
require(jcolors)
library(biomaRt)
require(GSVA)
require(GSVAdata)
require(pheatmap)
library(ReactomePA)
library(DESeq2)
library(lsa) ## for cosine similarity
source("other_scripts/functions.R")
gene_to_ensembl <- function(genename){
t2g_GRCh38$ensembl_gene_id[match(genename, t2g_GRCh38$external_gene_name)]
}
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
raw_counts0 = read.csv("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/RnaSeqPip/counts/counts_raw_subsetno3pbias.csv", stringsAsFactors = FALSE)
rownames(raw_counts0) = raw_counts0[,1]; raw_counts0 <- raw_counts0[,-1]
normalised_counts = read.csv("../files/counts_norm.csv", stringsAsFactors = FALSE)
rownames(normalised_counts) = normalised_counts[,1]
normalised_counts = normalised_counts[,-1]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
# Renaming
renaming1 = read_excel("../files/PDOnameProperSample_sWGS_RNAseq.xlsx")
renaming_NC = renaming1[match( gsub('[.]', '', colnames(normalised_counts)), gsub('-', '', renaming1$sampleNameRNAseq)),]
colnames(normalised_counts)[!is.na(renaming_NC$PDO)] = renaming_NC$PDO[!is.na(renaming_NC$PDO)]
colnames(normalised_counts)
## Remove normal samples
normalised_counts = normalised_counts[,!grepl('FT', colnames(normalised_counts))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## 3' bias
bias3prime = read_xlsx("../files/PDOnameProperSample_sWGS_RNAseq_3bias.xlsx")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
prcomp_normalisedcounts = prcomp(t(normalised_counts), scale. = TRUE, center = TRUE)
eigs_normalisedcounts <- prcomp_normalisedcounts$sdev^2
round(eigs_normalisedcounts/sum(eigs_normalisedcounts)*100)
ggplot(cbind.data.frame(prcomp_normalisedcounts$x,
col=bias3prime$`3'Bias`[match(rownames(prcomp_normalisedcounts$x),bias3prime$PDO)],
label=rownames(prcomp_normalisedcounts$x)),
aes(x=PC1, y=PC2, col=col, label=label))+
geom_label_repel()+
geom_point()
ggsave("../figures/PCA_RNASeq/3primebias_PCA_counts.pdf", width = 6.5, height = 5)
ggplot(cbind.data.frame(prcomp_normalisedcounts$x,
col=bias3prime$`3'Bias`[match(rownames(prcomp_normalisedcounts$x),bias3prime$PDO)],
label=rownames(prcomp_normalisedcounts$x),
pc1=prcomp_normalisedcounts$x[,1]),
aes(x=factor(label, levels=bias3prime$PDO[order(bias3prime$`3'Bias`)]),
y=col, fill=pc1))+
geom_bar(stat = "identity")
ggsave("../figures/PCA_RNASeq/3primebias_barplot_counts.pdf", width = 9.5, height = 5)
rm(prcomp_normalisedcounts)
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## Re-normalise counts
colnames(raw_counts0) <- renaming1$PDO[match(gsub('[.]', '-', colnames(raw_counts0)), renaming1$sampleNameRNAseq)]
raw_counts0 = raw_counts0[,!(colnames(raw_counts0) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))]
## in CN/GE script we have already re-derived the normalised DESeq2 counts with non-3' bias samples (PDO and FT)
renormalised_counts <- readRDS("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/fig3_renormalised_counts_obj_11orgs.RDS")
renormalised_counts <- DESeq2::counts(renormalised_counts, normalized=T)
## keeping only PDO
renormalised_counts <- renormalised_counts[,grepl('PDO', colnames(renormalised_counts))]
ncol(renormalised_counts) ## we have 11 organoids
# renormalised_counts <- raw_counts0
# renormalised_counts <- DESeqDataSetFromMatrix(countData = renormalised_counts,
#                               colData = cbind.data.frame(Sample=colnames(renormalised_counts),
#                                                          Group=1),
#                               design = ~ 1)
# renormalised_counts <- estimateSizeFactors(renormalised_counts)
# renormalised_counts <- counts(renormalised_counts, normalized=T)
normalised_counts <- renormalised_counts
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## Removing samples with 3' bias
normalised_counts = normalised_counts[,!(colnames(normalised_counts) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
prcomp_normalisedcounts = prcomp(t(normalised_counts), scale. = TRUE, center = TRUE)
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
hclust_rnaseq <- (hclust(dist(t(normalised_counts))))
saveRDS(hclust_rnaseq, "../objects/hclust_rnaseq.RDS")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## TAMSeq
TAMSeq = read_xlsx("../files/SupplementaryTable1.xlsx")
TAMSeq[,'org'] = renaming1$PDO[match(TAMSeq$name, renaming1$ID)]
TAMSeq = dcast(TAMSeq[,c(8, 20)], org~`Symbol (Gene ID)`)
TAMSeq = TAMSeq[match(colnames(normalised_counts), TAMSeq$org),]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# genes <- TPM$gene_id
t2g <- getBM(
attributes = c('ensembl_gene_id', 'entrezgene_id', 'external_gene_name', 'chromosome_name'),
values = rownames(normalised_counts),
filter = 'ensembl_gene_id',
mart = mart, useCache = FALSE)
entrezgene_id_matched_normalisedcounts = t2g[match(rownames(normalised_counts), t2g$ensembl_gene_id),'entrezgene_id']
naming_id_matched_normalisedcounts = t2g[match(rownames(normalised_counts), t2g$ensembl_gene_id),]
t2g_GRCh38 <- readRDS("../../copy_number_analysis_organoids/robjects/t2g2.RDS")
coding <- readRDS("../../copy_number_analysis_organoids/robjects/coding_genes.RDS")
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
data(c2BroadSets) ## from GSVAdata
#--------------------------------------------------------------------------------#
# Are the normalised counts normally-distributed?
png("../figures/pairs_for_PCA_MVN_DESeq2counts.png")
pairs(normalised_counts, col=alpha('black', 0.02), pch=19)
dev.off()
png("../figures/pairs_for_PCA_MVN_DESeq2countlog2s.png")
pairs(log2(normalised_counts+1), col=alpha('black', 0.02), pch=19)
dev.off()
pairs(t(normalised_counts[1:4,]))
pairs(t(log2(normalised_counts[1:4,])))
# for(i in 1:nrow(normalised_counts)){
plot(0, 0, xlim=c(-2, 2), ylim=c(-3, 5))
for(i in 1:4){
b <- qqnorm(normalised_counts[i,], plot.it = F)
b <- lapply(b, function(i) i[order(b$x)])
b$x <- as.vector(scale(b$x))
b$y <- as.vector(scale(b$y))
lines(b$x, b$y, type='l')
}
## prcompw ith log2 normalised counts
prcomp_log2 <- prcomp(t(log2(normalised_counts+1)))
ggplot(cbind.data.frame(prcomp_log2$x[,1:2], lab=rownames(prcomp_log2$x)), aes(x=PC1, y=PC2, label=lab))+geom_point()+geom_label_repel()
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
## same with normalised counts
TPM_data_entrez_NC = normalised_counts[!is.na(entrezgene_id_matched_normalisedcounts),]
entrezgene_id_matched_normalisedcounts = entrezgene_id_matched_normalisedcounts[!is.na(entrezgene_id_matched_normalisedcounts)]
TPM_data_entrez_NC = TPM_data_entrez_NC[!duplicated(entrezgene_id_matched_normalisedcounts),]
entrezgene_id_matched_normalisedcounts = entrezgene_id_matched_normalisedcounts[!duplicated(entrezgene_id_matched_normalisedcounts)]
rownames(TPM_data_entrez_NC) = entrezgene_id_matched_normalisedcounts
results_Gsva_counts <- gsva(expr = as(TPM_data_entrez_NC, 'matrix'), gset.idx.list = c2BroadSets, min.sz=10, max.sz=500, verbose=TRUE)
pca_with_gsva_annotation_NC = cbind.data.frame(prcomp_normalisedcounts$x, t(results_Gsva_counts[,match(colnames(results_Gsva_counts), rownames(prcomp_normalisedcounts$x))]),
labels=rownames(prcomp_normalisedcounts$x),
TAMSeq)
ggplot(pca_with_gsva_annotation_NC, aes(x=PC1, y=PC2, col=KAUFFMANN_DNA_REPAIR_GENES, label=labels))+
geom_point()+
geom_label_repel()+
scale_color_jcolors_contin("pal3", reverse = TRUE)+labs(col = "Threshold", shape="Amount")+
ggtitle('KAUFFMANN_DNA_REPAIR_GENES')
ggsave("../figures/PCA_RNASeq/PCA_counts_subset_KAUFFMANN_DNA_REPAIR_GENES.png", width = 6.5, height = 5)
saveRDS(pca_with_gsva_annotation_NC, "../objects/fig4_pca_with_gsva_annotation_NC.RDS")
saveRDS(prcomp_normalisedcounts, "../objects/fig4_pca_with_gsva_annotation_NC_prcomp.RDS")
