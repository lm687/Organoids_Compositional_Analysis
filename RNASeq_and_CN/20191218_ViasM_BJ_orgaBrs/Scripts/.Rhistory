<<<<<<< HEAD
0 , 0.1 , 0.4 , 0.4 , 0.1), nrow=2, byrow=T)
S <- 1:2
V <- 1:5
#Setting the seed for consistency and number of values
set.seed(99)
L<-115
#sequences of hidden states
s1<-sample(S,size=1,replace=TRUE,prob=mu_naught)
hidden_values<-rep(NA,L)
temp<-hidden_values[1]<-s1
for (i in 2:L){
hidden_values[i]<-sample(S,size=1,replace=TRUE,prob=A[temp,])
temp<-hidden_values[i]
}
hidden_values
## Emitted values
#sequences of emitted states
emitted_values<-rep(NA,L)
for (i in 1:L){
emitted_values[i]<-sample(V,size=1,replace=TRUE,prob=B[hidden_values[i],])
}
emitted_values
plot(emitted_values, type='h')
## Plot the resulting sequences of hidden and emitted states on the same graph.
#plots sequences of hidden and emitted states on the same graph
#pdf("Graph1.pdf")
opar <- par(no.readonly = TRUE)
par(mar = c(4, 4.1, 4.8, 2.1))
plot(emitted_values,type="h",xlim=c(0,115),xlab="",xaxt="n",ylab="",col='blue',lwd=1.5)
lines(hidden_values,col='red',lwd=2,type = "h")
axis(1, at = seq(0, 115, by = 10))
axis(1, at = seq(0, 115, 5), labels = NA)
title(xlab = "Index",font.lab=2,mgp = c(2.5, 1, 0))    # Add x-axis text
title(ylab = "Sequence of state",font.lab=2,mgp = c(2.5, 1, 0))    # Add y-axis text
legend(x="top", inset=c(0, -0.3),
legend = c("emitted state","hidden state"),col=c("blue","red"),lwd=c(1.5,2),xpd=TRUE, horiz = TRUE)
#creates a csv file for 115 sequences
data<-data.frame(cbind(hidden_values,emitted_values))
forward_algorithm<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
alpha[1,]<-initial_distribution*emission_matrix[,visible_data[1]]
for (i in 2:(no_emitted_values)){
transitted<-alpha[(i-1),] %*% transition_matrix
alpha[i,]<-transitted*emission_matrix[,visible_data[i]]
}
return(alpha)
}
# forward_algorithm(values$emitted_values,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
forward_algorithm(emitted_values,A,B,mu_naught)
#Log likelihood of GC sequence under the model in (1)
forward_algorithm_scaled<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(unlist(log_L))
}
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
emitted_sequences <- c(1,1,2,4,5)
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n_arg <- c_n
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)+1
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
alpha_hat
baum_welch<-function(emitted_sequences,hidden_values){
#initialization
mu_0<-c(0.5,0.5)
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
#iteration
for (t in 1:N){
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
E_nij<-matrix(0,2,2)
for (m in 1:N){
E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
}
trans_mat<-apply(E_nij,1,function(x) x/colSums(E_nij))
emission_mat<-rep(NA,1)
}
#termination
}
# E_nij<-matrix(0,2,2)
# for (m in 1:N){
#   E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
# }
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
## sum the number of times that we see the transition from k to l in the observed data
sum_over_j_i <- matrix(NA, ncol=ncol(alpha_hat), nrow=length(emitted_sequences))
sum_over_j_i
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
f[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
length(emitted_sequences)
sum(sapply(1:(length(emitted_sequences)-1)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
ncol(alpha_hat)
(length(emitted_sequences)-1)
sum(sapply(1:(length(emitted_sequences)-1), function(i)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
visible_data=rep(1,5)
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
beta_hat
alpha_hat
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sum(sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]}))
}
}
A
alpha_hat
alpha_hat[length(emitted_sequences]
alpha_hat[length(emitted_sequences)]
alpha_hat[length(emitted_sequences),]
A
onesigma <- rbind(c(1694, 1726, 28.90),
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma
head(melt(onesigma))
require(reshape2)
head(melt(onesigma))
head(melt(onesigma)onesigma)
onesigma
colnames(onesigma) <- c('start', 'end', 'onesigma')
require(ggplot2)
ggplot(onesigma, aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
data.frame(onesigma)
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(xmin=start, xend=end, ymin=0, yend=onesigma))+geom_ribbon()
onesigma
onesigma[1,'start']:onesigma[1,'end']
lapply(1:nrow(onesigma), function(i) (onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) rbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))_
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma'])))
onesigma
head(onesigma)
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
ggplot(data.frame(onesigma), aes(xmin=start, x=end, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, y=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), col=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), fill=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, fill=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_step()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_errorbar()
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library('GEOquery')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library('GEOquery')
gse <- getGEO("GSE165897", GSEMatrix = TRUE)
show(gse)
gse$`GSE165897-GPL16791_series_matrix.txt.gz`
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$taxid_ch1
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$geo_accession
filePaths = getGEOSuppFiles("GSE165897")
pvals_diagRE_DMDL_nonexo_SP_adj
pvals_fullRE_DMSL_nonexo_SP_adj
# rstudioapi() is not allowed in running shiny apps
# setwd(dirname(rstudioapi::getSourceEditorContext()$path)) ## set working directory
rm(list = ls()) ## clear objects
library(visNetwork) ## interactive network visualisation package
library(viridisLite) ## colour package
set.seed(234) # 'random' number generator
version = '' # default
metadata_file = paste0("in_files/metadata", version, ".txt")
edges_file = paste0("in_files/dataframe_edges", version, ".txt")
out_file = paste0("html_files", version, ".html")
## Reading in data files
# note: source files (metadata.txt, dataframe_edges.txt) need identical name entries (ordering doesn't matter)
metadata = read.table(metadata_file, stringsAsFactors = FALSE, sep = "\t", comment.char = "#", quote = '"')
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
system("open .")
#--------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
library(ggrepel)
library(reshape2)
library(readxl)
require(jcolors)
library(biomaRt)
require(GSVA)
require(GSVAdata)
require(pheatmap)
library(ReactomePA)
library(DESeq2)
library(lsa) ## for cosine similarity
source("other_scripts/functions.R")
gene_to_ensembl <- function(genename){
t2g_GRCh38$ensembl_gene_id[match(genename, t2g_GRCh38$external_gene_name)]
}
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
raw_counts0 = read.csv("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/RnaSeqPip/counts/counts_raw_subsetno3pbias.csv", stringsAsFactors = FALSE)
rownames(raw_counts0) = raw_counts0[,1]; raw_counts0 <- raw_counts0[,-1]
normalised_counts = read.csv("../files/counts_norm.csv", stringsAsFactors = FALSE)
rownames(normalised_counts) = normalised_counts[,1]
normalised_counts = normalised_counts[,-1]
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
# Renaming
renaming1 = read_excel("../files/PDOnameProperSample_sWGS_RNAseq.xlsx")
renaming_NC = renaming1[match( gsub('[.]', '', colnames(normalised_counts)), gsub('-', '', renaming1$sampleNameRNAseq)),]
colnames(normalised_counts)[!is.na(renaming_NC$PDO)] = renaming_NC$PDO[!is.na(renaming_NC$PDO)]
colnames(normalised_counts)
## Remove normal samples
normalised_counts = normalised_counts[,!grepl('FT', colnames(normalised_counts))]
normalised_counts = normalised_counts[rowSums(normalised_counts)>0,]
#--------------------------------------------------------------------------------#
normalised_counts
dim(normalised_counts)
#--------------------------------------------------------------------------------#
## 3' bias
bias3prime = read_xlsx("../files/PDOnameProperSample_sWGS_RNAseq_3bias.xlsx")
colnames(raw_counts0) <- renaming1$PDO[match(gsub('[.]', '-', colnames(raw_counts0)), renaming1$sampleNameRNAseq)]
raw_counts0 = raw_counts0[,!(colnames(raw_counts0) %in% c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17'))]
raw_counts0
dim(raw_counts0)
colnames(raw_counts0)
cat(colnames(raw_counts0))
cat(sort(colnames(raw_counts0)))
cat(gtools::mixedsort(colnames(raw_counts0)))
dim(raw_counts0)
## in CN/GE script we have already re-derived the normalised DESeq2 counts with non-3' bias samples (PDO and FT)
renormalised_counts <- readRDS("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/fig3_renormalised_counts_obj_11orgs.RDS")
## in CN/GE script we have already re-derived the normalised DESeq2 counts with non-3' bias samples (PDO and FT)
renormalised_counts <- readRDS("../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/output_GRCh37/fig3_renormalised_counts_obj_11orgs.RDS")
##------------------------------------------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
require(ggplot2)
require(ggrepel)
require(dplyr)
require(reshape2)
require(jcolors)
require(biomaRt)
require(gridExtra)
library(jcolors)
library(parallel)
library(latex2exp)
library(GSVA)
library(GSVAdata)
library(DESeq2)
include_14_orgs = FALSE
include_11_orgs = TRUE
##------------------------------------------------------------------------------------------------------------##
##' 3' bias samples to remove
renaming = readxl::read_xlsx("../../../RNASeq_DE_resistant_sensitive/files/PDOnameProperSample_sWGS_RNAseq.xlsx")
if(include_14_orgs){
remove_samples = (c('PDO14', 'PDO16', 'PDO18'))
}else if(include_11_orgs){
remove_samples = (c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17', 'FT10', 'FT7', 'FT7-bis'))
}
remove_samples_with_normal_fal = cbind.data.frame(PDO=remove_samples,
ID=renaming$ID[match(remove_samples, renaming$PDO)],
RNASeq=renaming$sampleNameRNAseq[match(remove_samples, renaming$PDO)])
remove_samples = remove_samples_with_normal_fal[grepl('PDO', remove_samples_with_normal_fal$PDO),]
remove_samples_with_normal_fal
##------------------------------------------------------------------------------------------------------------##
joint_counts_CN0 = readRDS("../output/output_GRCh37_with_14_orgs/joint_counts_CN_TPM_20210506104217.RDS")
joint_counts_CN = joint_counts_CN0
joint_counts_CN = joint_counts_CN %>% filter( !(counts.Var1 %in% remove_samples[2,]))
topvariable = read.table("../../top_variable.txt", comment.char = "#")
raw_counts0 = read.csv("../../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/RnaSeqPip/counts/counts_raw.csv", stringsAsFactors = FALSE)
rownames(raw_counts0) = raw_counts0[,1]; raw_counts0 <- raw_counts0[,-1]
dim(raw_counts0)
raw_counts0
colnames(raw_counts0) <- renaming$PDO[match(gsub('[.]', '-', colnames(raw_counts0)),
renaming$sampleNameRNAseq)]
raw_counts0 = raw_counts0[,!(colnames(raw_counts0) %in% remove_samples_with_normal_fal$PDO)]
dim(raw_counts0)
raw_counts0
colnames(raw_counts0)
raw_counts0
dim(raw_counts0)
raw_counts0 = read.csv("../../../RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/RnaSeqPip/counts/counts_raw.csv", stringsAsFactors = FALSE)
rownames(raw_counts0) = raw_counts0[,1]; raw_counts0 <- raw_counts0[,-1]
colnames(raw_counts0) <- renaming$PDO[match(gsub('[.]', '-', colnames(raw_counts0)),
renaming$sampleNameRNAseq)]
raw_counts0 = raw_counts0[,!(colnames(raw_counts0) %in% remove_samples_with_normal_fal$PDO)]
raw_counts0
dim(raw_counts0)
## here we normalising with only 3 FT samples without 3' bias
renormalised_counts_obj <- DESeq2::DESeqDataSetFromMatrix(countData = raw_counts0,
colData = cbind.data.frame(Sample=colnames(raw_counts0),
Group=grepl('PDO', colnames(raw_counts0))),
design = ~ Group)
renormalised_counts_obj <- DESeq2::estimateSizeFactors(renormalised_counts_obj)
renormalised_counts_obj
saveRDS(renormalised_counts_obj, "../../20191218_ViasM_BJ_orgaBrs/output/fig3_renormalised_counts_obj_11orgs.RDS")
raw_counts0
dim(raw_counts0)
system("mkdir ../../../for_submission/GEO/RNASeq/")
write.table(raw_counts0, "../../../for_submission/GEO/RNASeq/ViasMorrill_RNASeq_raw_counts.txt", quote = F, sep = "\t")
system("open . ../../../for_submission/GEO/RNASeq/")
system("open ../../../for_submission/GEO/RNASeq/")
raw_counts0
cbind(rownames(raw_counts0), raw_counts0)
write.table(cbind(rownames(raw_counts0), raw_counts0), "../../../for_submission/GEO/RNASeq/ViasMorrill_RNASeq_raw_counts.txt", quote = F, sep = "\t", row.names = F)
write.table(raw_counts0, "../../../for_submission/GEO/RNASeq/ViasMorrill_RNASeq_raw_counts.txt",
quote = F, sep = "\t", col.names = NA, row.names = TRUE)
dim(raw_counts0)
=======
aes(x=counts.Var2, y=PDO, col=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
(CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_color_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(col=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO, col=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
(CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_color_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO, fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
(CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_color_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO, fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
(CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO, fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
(CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO, fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
(CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(col=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(CN.value, breaks = c(1, 2, 3, 5, 50))+
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(col=F, size=F)
cut(joint_counts_CN0$CN.value[1:10], breaks = c(1, 2, 3, 5, 50)
)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(CN.value, breaks = c(1, 2, 3, 5, 50))+
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
# scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(col=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(CN.value, breaks = c(1, 2, 3, 5, 50))+
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
# scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(CN.value, breaks = c(1, 2, 3, 5, 50))+
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(CN.value, breaks = c(1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
# scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(CN.value, breaks = c(1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('red', 'orange', 'blue', 'black'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
round(3.3, 1)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('white', 'blue', 'yellow', 'orange',  'red'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'yellow', 'orange',  'red'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))+
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 5, height = 4)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 5, height = 4)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))+labs(x='Genes', y='PDO')
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 5, height = 4)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=4)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))+labs(x='Genes', y='PDO')
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 6, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))+labs(x='Genes', y='PDO')
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 6, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 6, height = 5)
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 6.5, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 7, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 7, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)=0.2),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)-0.2),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 7, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)-0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 7, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)-0.6),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)-0.9),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 3, 5, 50, 150)-0.2),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 7, height = 5)
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 2.1, 3, 5, 50, 150)-0.2),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(1, 2, 2.1, 3, 5, 50, 150)-0.2),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(1, 2, 2.1, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 2.1, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple', 'black'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 2.1, 3, 5, 50, 150)=0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple', 'black'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 2.1, 3, 5, 50, 150)-0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple', 'black'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1, 2, 2.1, 3, 5, 50, 150)+0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple', 'black'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 2, 2.1, 3, 5, 50, 150)+0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple',))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 2, 2.1, 3, 5, 50, 150)+0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1.9, 2.1, 3, 5, 50, 150)+0.1),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1.9, 2.1, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest),
aes(x=counts.Var2, y=PDO,
# fill=paste0((CN.value==0), (CN.value>0 & CN.value<=1),
#                                  (CN.value>1 & CN.value<=2), CN.value>2), size=10*log(CN.value),
fill=cut(round(CN.value, 1), breaks = c(0, 1.9, 2.1, 3, 5, 50, 150)),
label=round(CN.value, 1)))+
geom_tile(alpha=0.2)+
scale_fill_manual(values=c('blue', 'white', 'yellow', 'orange',  'red', 'purple'))+theme_bw()+
geom_text(col='black', size=3)+guides(fill=F, size=F)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+labs(x='Genes', y='PDO')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("../../figures_GRCh37/genes_of_interest_CN_tile.pdf", width = 7, height = 5)
joint_counts_CN0
joint_counts_CN0 %>% filter(CN.gene_name %in% subset_genes_of_interest)
CN_genes_of_interest_mat
cor(CN_genes_of_interest_mat)
rownames(CN_genes_of_interest_mat) <- CN_genes_of_interest_mat$CN.gene_name
cor(CN_genes_of_interest_mat[,-1])
pheatmap::pheatmap(cor(CN_genes_of_interest_mat[,-1]))
pheatmap::pheatmap(cor(t(CN_genes_of_interest_mat[,-1])))
t(CN_genes_of_interest_mat[,-1])
pheatmap::pheatmap(cor(t(CN_genes_of_interest_mat[,-1])))
pheatmap::pheatmap(cor(t(CN_genes_of_interest_mat[,-1])), cluster_cols = F, cluster_rows = F)
CN_genes_of_interest_mat
CN_genes_of_interest_mat
(CN_genes_of_interest_mat
)
t(CN_genes_of_interest_mat)
apply(CN_genes_of_interest_mat, 1, as.numeric)
)t(CN_genes_of_interest_mat[,-1])
t(CN_genes_of_interest_mat[,-1])
apply(t(CN_genes_of_interest_mat[,-1]), 2, var)
t(CN_genes_of_interest_mat[,-1])[,!(apply(t(CN_genes_of_interest_mat[,-1]), 2, var) == 0)]
pheatmap::pheatmap(cor(remove_cols_with_no_variance(t(CN_genes_of_interest_mat[,-1])[,!(apply(t(CN_genes_of_interest_mat[,-1]), 2, var) == 0)])), cluster_cols = F, cluster_rows = F)
remove_cols_with_no_variance <- function(i)  t(i[,-1])[,!(apply(t(i[,-1]), 2, var) == 0)]
pheatmap::pheatmap(cor(remove_cols_with_no_variance(t(CN_genes_of_interest_mat[,-1]))), cluster_cols = F, cluster_rows = F)
pheatmap::pheatmap(cor(remove_cols_with_no_variance((CN_genes_of_interest_mat[,-1]))), cluster_cols = F, cluster_rows = F)
pheatmap::pheatmap(cor(remove_cols_with_no_variance((CN_genes_of_interest_mat[,-1]))),
cluster_cols = T, cluster_rows = T)
ComplexHeatmap::Heatmap(cor(remove_cols_with_no_variance((CN_genes_of_interest_mat[,-1]))))
pdf("../../figures_GRCh37/correlation_CN_genes_of_interest.pdf", width = 7)
ComplexHeatmap::Heatmap(cor(remove_cols_with_no_variance((CN_genes_of_interest_mat[,-1]))))
dev.off()
cor_CN_genes_of_interest <- cor(remove_cols_with_no_variance((CN_genes_of_interest_mat[,-1])))
grid.text(cor_CN_genes_of_interest[i, j], x, y)
ComplexHeatmap::Heatmap(cor_CN_genes_of_interest,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(cor_CN_genes_of_interest[i, j], x, y)
})
library(gridExtra)
ComplexHeatmap::Heatmap(cor_CN_genes_of_interest,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(cor_CN_genes_of_interest[i, j], x, y)
})
?grid.text
library(grid)
ComplexHeatmap::Heatmap(cor_CN_genes_of_interest,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(cor_CN_genes_of_interest[i, j], x, y)
})
ComplexHeatmap::Heatmap(cor_CN_genes_of_interest,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(cor_CN_genes_of_interest[i, j], 1), x, y)
})
pdf("../../figures_GRCh37/correlation_CN_genes_of_interest.pdf", width = 7)
ComplexHeatmap::Heatmap(cor_CN_genes_of_interest,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(cor_CN_genes_of_interest[i, j], 1), x, y)
})
dev.off()
pdf("../../figures_GRCh37/correlation_CN_genes_of_interest.pdf", width = 8, height = 7.5)
ComplexHeatmap::Heatmap(cor_CN_genes_of_interest,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(cor_CN_genes_of_interest[i, j], 1), x, y)
})
dev.off()
system("mkdir data/clean_segtables/")
>>>>>>> ce0a7d8a1293685287cc1c5d453f51696f0478b0
