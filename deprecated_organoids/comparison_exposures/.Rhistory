ggtitle("PCA of both datasets with projection")+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_dark()+ theme(legend.position = "bottom")
#<begin_chunk>```{r, pca_from_scratch,include=TRUE, echo=FALSE}
createPCA_fromscratch <- function(input_matrix, annotation, annotation2, return_df=FALSE, labels_active=TRUE){
prcomp_all_clr <- princomp(input_matrix)
df_prcomp_exposures_clr <- data.frame(prcomp_all_clr$scores[,1:2],
study=annotation,
bool_any_zeroes=annotation2,
labels=rownames(input_matrix))
df_prcomp_exposures_clr$labels[!grepl('Cell line', df_prcomp_exposures_clr$labels)] <- NA
df_prcomp_exposures_clr[,'labels'] <- gsub("Cell line ", "", df_prcomp_exposures_clr$labels)
var_explained2 <- (prcomp_all_clr$sdev**2)/sum(prcomp_all_clr$sdev**2)
if(return_df){
df_prcomp_exposures_clr
}else{
if(labels_active){
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study), label=labels))+ geom_point() + geom_label_repel()+
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}else{
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study)))+ geom_point() +
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}
}
}
createPCA_fromscratch(input_matrix = rbind(natgen_clr,org_clr_robustzeroes),
annotation = c(natgen_metadata$study, rep('Cell Line', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata)[1]), unlist(apply(org, 1, function(i) any(i == 0)))),
labels_active = TRUE)+ theme_dark()+ theme(legend.position = "bottom") +
ggtitle('PCA created from scratch with robust zeroes')
rbind(natgen_clr,org_clr_robustzeroes)
natgen_clr
## there were no zeroes
natgen_clr <- clr_mat(natgen_renormalised)
natgen_clr
## there were no zeroes
natgen_clr <- as(compositions::clr(natgen_renormalised), 'matrix')
natgen_clr
#<begin_omit>```{r}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
#<end_omit>```{r}
#<begin_chunk>```{r, libraries,message=FALSE}
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
prev_data = 'NatGen'
prev_data = 'Redefinition'
#<end_chunk>
#<begin_text>
#<end_text>
#<begin_chunk>```{r,fig.height=4.5,messages=FALSE, echo=FALSE,warning=FALSE}
org <- as(read.csv("data/CIOV_cell_lines_signature_exposures.csv", row.names = 1), 'matrix')
createBarplot(as(org, 'matrix'), remove_labels = FALSE, verbatim = FALSE, angle_rotation_axis = 45, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
#<end_chunk>
#<begin_chunk>```{r, natgen_data,include=FALSE}
if(prev_data == 'NatGen'){
load("../../../CDA_in_Cancer/data/Robj/image_NatGen_rmd.RData")
natgen <- as.matrix(sig_data_unorm[,1:7])
natgen_metadata <- sig_data_unorm[,8:ncol(sig_data_unorm)]
## Normalisation is not done in such a way that rows add up to 1. Re-normalising
natgen_renormalised <- sweep(natgen, 1, rowSums(natgen), '/')
natgen_barplt1 <- createBarplot(natgen, remove_labels = TRUE, verbatim = FALSE,
order_labels = rownames(natgen)[(order(natgen[,1]))]) +
ggtitle('Original')
natgen_barplt2 <- createBarplot(natgen_renormalised, remove_labels = TRUE, verbatim = FALSE,
order_labels = rownames(natgen)[(order(natgen[,1]))]) +
ggtitle('Re-normalised')
#grid.arrange(natgen_barplt1, natgen_barplt2)
natgen_barplt_perstudy <- list()
for(i in 1:length(unique(natgen_metadata$study))){
natgen_barplt_perstudy[[i]] <- createBarplot(natgen_renormalised[natgen_metadata$study == unique(natgen_metadata$study)[i],],
remove_labels = TRUE, verbatim = FALSE)+
ggtitle(paste0('Re-normalised\n', unique(natgen_metadata$study)[i] ))
}
plot_grid(plotlist=natgen_barplt_perstudy)
rm(natgen)
}else if(prev_data == 'Redefinition'){
natgen_renormalised <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata <- data.frame(study=rep('Previous', nrow(natgen_renormalised)))
}else{
stop('Unavailable prev_data')
}
#<end_chunk>
#<begin_chunk>```{r, include=FALSE, message=FALSE}
org_barplot <- createBarplot(org, remove_labels = FALSE, verbatim = FALSE, angle_rotation_axis = 45, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
no1_natgen <- natgen_barplt1 <- createBarplot(natgen_renormalised, remove_labels = TRUE, verbatim = FALSE,
order_labels = rownames(natgen_renormalised)[(order(natgen_renormalised[,1]))]) +
ggtitle('Original')
grid.arrange(org_barplot, no1_natgen)
#<end_chunk>
#<begin_text>
##' ## PCA
##' ### PCA in compositional data
##'
##' In the book Analysing compositional data with R they say that PCA should be done on clr-transformed data.
##' Here I am using robust zeroes: for zero exposures, the centered log-ratios are set to zero (as opposed to -Inf).
##' The plot done with (biplot(princomp(acomp(x)))) is the same as plotting princomp(as(clr(x), 'matrix'))
#<end_text>
#<begin_chunk>```{r, clr,include=FALSE,eval=TRUE}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
if(prev_data == 'NatGen'){
## there were no zeroes
natgen_clr <- clr_mat(natgen_renormalised)
}else if(prev_data == 'Redefinition'){
## there were no zeroes
natgen_clr <- as(compositions::clr(natgen_renormalised), 'matrix')
}else{
stop()
}
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Cell line ', rownames(org_clr))
#<end_chunk>
#<begin_chunk>```{r, cols,include=FALSE}
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
#<begin_chunk>```{r, princomp,echo=FALSE}
prcomp_all <- princomp(as(clr(natgen_renormalised), 'matrix'))
df_prcomp_exposures <- data.frame(prcomp_all$scores[,1:2], study=natgen_metadata$study, labels=NA)
df_prcomp_exposures_org <- data.frame(predict(prcomp_all, (org_clr_robustzeroes))[,1:2], 'Organoid', rownames(org))
colnames(df_prcomp_exposures_org) <- c('Comp.1', 'Comp.2', 'study', 'labels')
df_prcomp_exposures <- rbind(df_prcomp_exposures, df_prcomp_exposures_org)
df_prcomp_exposures$labels <- gsub('Sample ', '', df_prcomp_exposures$labels) ##here
myColors <- col_vector[1:length(unique(df_prcomp_exposures$study))]
names(myColors) <- unique(df_prcomp_exposures$study)
var_explained1 <- (prcomp_all$sdev**2)/sum(prcomp_all$sdev**2)
ggplot(df_prcomp_exposures, aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(aes(label=labels))+
ggtitle("PCA of both datasets with projection")+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_dark()+ theme(legend.position = "bottom")
#<begin_chunk>```{r, pca_from_scratch,include=TRUE, echo=FALSE}
createPCA_fromscratch <- function(input_matrix, annotation, annotation2, return_df=FALSE, labels_active=TRUE){
prcomp_all_clr <- princomp(input_matrix)
df_prcomp_exposures_clr <- data.frame(prcomp_all_clr$scores[,1:2],
study=annotation,
bool_any_zeroes=annotation2,
labels=rownames(input_matrix))
df_prcomp_exposures_clr$labels[!grepl('Cell line', df_prcomp_exposures_clr$labels)] <- NA
df_prcomp_exposures_clr[,'labels'] <- gsub("Cell line ", "", df_prcomp_exposures_clr$labels)
var_explained2 <- (prcomp_all_clr$sdev**2)/sum(prcomp_all_clr$sdev**2)
if(return_df){
df_prcomp_exposures_clr
}else{
if(labels_active){
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study), label=labels))+ geom_point() + geom_label_repel()+
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}else{
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study)))+ geom_point() +
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}
}
}
createPCA_fromscratch(input_matrix = rbind(natgen_clr,org_clr_robustzeroes),
annotation = c(natgen_metadata$study, rep('Cell Line', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata)[1]), unlist(apply(org, 1, function(i) any(i == 0)))),
labels_active = TRUE)+ theme_dark()+ theme(legend.position = "bottom") +
ggtitle('PCA created from scratch with robust zeroes')
natgen_metadata
#<begin_omit>```{r}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
#<end_omit>```{r}
#<begin_chunk>```{r, libraries,message=FALSE}
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
prev_data = 'NatGen'
prev_data = 'Redefinition'
#<end_chunk>
#<begin_text>
#<end_text>
#<begin_chunk>```{r,fig.height=4.5,messages=FALSE, echo=FALSE,warning=FALSE}
org <- as(read.csv("data/CIOV_cell_lines_signature_exposures.csv", row.names = 1), 'matrix')
createBarplot(as(org, 'matrix'), remove_labels = FALSE, verbatim = FALSE, angle_rotation_axis = 45, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
#<end_chunk>
#<begin_chunk>```{r, natgen_data,include=FALSE}
if(prev_data == 'NatGen'){
load("../../../CDA_in_Cancer/data/Robj/image_NatGen_rmd.RData")
natgen <- as.matrix(sig_data_unorm[,1:7])
natgen_metadata <- sig_data_unorm[,8:ncol(sig_data_unorm)]
## Normalisation is not done in such a way that rows add up to 1. Re-normalising
natgen_renormalised <- sweep(natgen, 1, rowSums(natgen), '/')
natgen_barplt1 <- createBarplot(natgen, remove_labels = TRUE, verbatim = FALSE,
order_labels = rownames(natgen)[(order(natgen[,1]))]) +
ggtitle('Original')
natgen_barplt2 <- createBarplot(natgen_renormalised, remove_labels = TRUE, verbatim = FALSE,
order_labels = rownames(natgen)[(order(natgen[,1]))]) +
ggtitle('Re-normalised')
#grid.arrange(natgen_barplt1, natgen_barplt2)
natgen_barplt_perstudy <- list()
for(i in 1:length(unique(natgen_metadata$study))){
natgen_barplt_perstudy[[i]] <- createBarplot(natgen_renormalised[natgen_metadata$study == unique(natgen_metadata$study)[i],],
remove_labels = TRUE, verbatim = FALSE)+
ggtitle(paste0('Re-normalised\n', unique(natgen_metadata$study)[i] ))
}
plot_grid(plotlist=natgen_barplt_perstudy)
rm(natgen)
}else if(prev_data == 'Redefinition'){
natgen_renormalised <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata <- data.frame(study=rep('Previous', nrow(natgen_renormalised)), stringsAsFactors = FALSE)
}else{
stop('Unavailable prev_data')
}
#<end_chunk>
#<begin_chunk>```{r, include=FALSE, message=FALSE}
org_barplot <- createBarplot(org, remove_labels = FALSE, verbatim = FALSE, angle_rotation_axis = 45, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
no1_natgen <- natgen_barplt1 <- createBarplot(natgen_renormalised, remove_labels = TRUE, verbatim = FALSE,
order_labels = rownames(natgen_renormalised)[(order(natgen_renormalised[,1]))]) +
ggtitle('Original')
grid.arrange(org_barplot, no1_natgen)
#<end_chunk>
#<begin_text>
##' ## PCA
##' ### PCA in compositional data
##'
##' In the book Analysing compositional data with R they say that PCA should be done on clr-transformed data.
##' Here I am using robust zeroes: for zero exposures, the centered log-ratios are set to zero (as opposed to -Inf).
##' The plot done with (biplot(princomp(acomp(x)))) is the same as plotting princomp(as(clr(x), 'matrix'))
#<end_text>
#<begin_chunk>```{r, clr,include=FALSE,eval=TRUE}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
if(prev_data == 'NatGen'){
## there were no zeroes
natgen_clr <- clr_mat(natgen_renormalised)
}else if(prev_data == 'Redefinition'){
## there were no zeroes
natgen_clr <- as(compositions::clr(natgen_renormalised), 'matrix')
}else{
stop()
}
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Cell line ', rownames(org_clr))
#<end_chunk>
#<begin_chunk>```{r, cols,include=FALSE}
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
#<end_chunk>
#<begin_text>
##' #### Projecting
#<end_text>
#<begin_chunk>```{r, princomp,echo=FALSE}
prcomp_all <- princomp(as(clr(natgen_renormalised), 'matrix'))
#plot(prcomp_all)
df_prcomp_exposures <- data.frame(prcomp_all$scores[,1:2], study=natgen_metadata$study, labels=NA)
df_prcomp_exposures_org <- data.frame(predict(prcomp_all, (org_clr_robustzeroes))[,1:2], 'Organoid', rownames(org))
colnames(df_prcomp_exposures_org) <- c('Comp.1', 'Comp.2', 'study', 'labels')
df_prcomp_exposures <- rbind(df_prcomp_exposures, df_prcomp_exposures_org)
df_prcomp_exposures$labels <- gsub('Sample ', '', df_prcomp_exposures$labels) ##here
myColors <- col_vector[1:length(unique(df_prcomp_exposures$study))]
names(myColors) <- unique(df_prcomp_exposures$study)
#ggthemr('flat dark')
#ggthemr_reset()
# set_swatch(myColors)
var_explained1 <- (prcomp_all$sdev**2)/sum(prcomp_all$sdev**2)
ggplot(df_prcomp_exposures, aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(aes(label=labels))+
ggtitle("PCA of both datasets with projection")+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_dark()+ theme(legend.position = "bottom")
#<end_chunk>
#<begin_chunk>```{r, pca_from_scratch,include=TRUE, echo=FALSE}
createPCA_fromscratch <- function(input_matrix, annotation, annotation2, return_df=FALSE, labels_active=TRUE){
prcomp_all_clr <- princomp(input_matrix)
df_prcomp_exposures_clr <- data.frame(prcomp_all_clr$scores[,1:2],
study=annotation,
bool_any_zeroes=annotation2,
labels=rownames(input_matrix))
df_prcomp_exposures_clr$labels[!grepl('Cell line', df_prcomp_exposures_clr$labels)] <- NA
df_prcomp_exposures_clr[,'labels'] <- gsub("Cell line ", "", df_prcomp_exposures_clr$labels)
var_explained2 <- (prcomp_all_clr$sdev**2)/sum(prcomp_all_clr$sdev**2)
if(return_df){
df_prcomp_exposures_clr
}else{
if(labels_active){
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study), label=labels))+ geom_point() + geom_label_repel()+
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}else{
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study)))+ geom_point() +
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}
}
}
createPCA_fromscratch(input_matrix = rbind(natgen_clr,org_clr_robustzeroes),
annotation = c(natgen_metadata$study, rep('Cell Line', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata)[1]), unlist(apply(org, 1, function(i) any(i == 0)))),
labels_active = TRUE)+ theme_dark()+ theme(legend.position = "bottom") +
ggtitle('PCA created from scratch with robust zeroes')
#<end_chunk>
#<begin_text>
##' Overall, there are two groups (JB126 and 2259). All JB126 are **extremely** similar except that p22 has a non-zero exposure for 25, whereas all others have a zero exposure. Then, for 2259 there are two groups: p3 and p20 (which have a zero exposure of S6 and a non-zero exposure of S5) and p7 and p13 (opposite scenario; non-zero for S6 and zero for S5).
#<end_text>
#<begin_text>
#' ### Loadings for the PCA of only previous
#<end_text>
#<begin_chunk>```{r, loadings, fig.height=8, echo=FALSE}
par(mfrow=c(2,1))
barplot(prcomp_all$loadings[,1], main='Loadings of the\nfirst principal component')
barplot(prcomp_all$loadings[,2], main='Loadings of the\nsecond principal component')
#<begin_omit>```{r}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
#<begin_omit>```{r}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
#<end_omit>```{r}
#<begin_chunk>```{r, libraries,message=FALSE}
library(ggrepel)
#library(cowplot)
library(compositions)
#library(CompSign)
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
#<end_chunk>
#<begin_omit>```{r}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
#<end_omit>```{r}
#<begin_chunk>```{r, libraries,message=FALSE}
library(ggrepel)
#library(cowplot)
library(compositions)
#library(CompSign)
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
#<end_chunk>
#<begin_text>
## Comparison of the old exposures (from Nat Gen) and the new ones defined by Ruben, where the ASCAT segmentation has been changed, and normal segments have been removed.
#<end_text>
#<begin_chunk>```{r, natgen_data,include=FALSE}
load("../../../CDA_in_Cancer/data/Robj/image_NatGen_rmd.RData")
natgen <- as.matrix(sig_data_unorm[,1:7])
## Normalisation is not done in such a way that rows add up to 1. Re-normalising
natgen_renormalised <- sweep(natgen, 1, rowSums(natgen), '/')
new_exposures <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
#<end_chunk>
natgen
new_exposures
#<begin_chunk>```{r, match,include=FALSE}
match(rownames(new_exposures), rownames(natgen_renormalised))
rownames(new_exposures)
rownames(natgen_renormalised)
rownames(new_exposures)
rownames(natgen_renormalised)
rownames(natgen_renormalised)
rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))]
sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))]. function(i) strsplit(i, '-')[[1]])
sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))], function(i) strsplit(i, '-')[[1]])
sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))], function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = ''))
sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))], function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-'))
#<begin_chunk>```{r, match,include=FALSE}
match(rownames(new_exposures), sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))], function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
#<begin_chunk>```{r, match,include=FALSE}
mtch <- match(rownames(new_exposures), sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))], function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
new_exposures[mtch,]
head(natgen_renormalised)
head(new_exposures[mtch,])
head(new_exposures)
head(natgen_renormalised[mtch,])
head(new_exposures[mtch,])
head(natgen_renormalised)
rownames(new_exposures)
head(sapply(rownames(natgen_renormalised)[grep('TCGA', rownames(natgen_renormalised))], function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
mtch
head(new_exposures)
head(natgen_renormalised[mtch,])
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
mtch <- match(rownames(new_exposures), sapply(natgen_renormalised, function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
head(new_exposures)
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
mtch <- match(rownames(new_exposures), sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
head(new_exposures)
head(natgen_renormalised[mtch,])
list(new_exposures, natgen_renormalised[mtch,])
head(melt(list(new_exposures, natgen_renormalised[mtch,])))
melt_comparison≠(melt(list(new_exposures, natgen_renormalised[mtch,])))
melt_comparison <- (melt(list(new_exposures, natgen_renormalised[mtch,])))
dcast(melt_comparison, .~L1, value.var = 'value')
dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
dcast(melt_comparison, Var2~L1, value.var = 'value')
dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
head(melt_comparison)
melt_comparison
melt_comparison$Var1
is.na(melt_comparison$Var1)
sum(is.na(melt_comparison$Var1))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
melt_comparison <- (melt(list(new_exposures, natgen_renormalised[mtch,])))
dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
View(melt_comparison)
melt_comparison[,c(1,2,4)]
duplicated(melt_comparison[,c(1,2,4)])
which(duplicated(melt_comparison[,c(1,2,4)]))
head(melt_comparison)
melt_comparison[which(duplicated(melt_comparison[,c(1,2,4)])),]
natgen_renormalised
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
mtch <- match(rownames(new_exposures), sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
melt_comparison
melt_comparison$Var1
unique(melt_comparison)
unique(melt_comparison$Var1)
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
mtch <- match(rownames(new_exposures), sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
mtch <- match(rownames(new_exposures), sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-')))
melt_comparison <- (melt(list(new_exposures, natgen_renormalised[mtch,])))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
melt_comparison[which(duplicated(melt_comparison[,c(1,2,4)])),]
dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
natgen_renormalised
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
rownames(natgen_renormalised) <- sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-'))
mtch <- match(rownames(new_exposures), rownames(natgen_renormalised))
melt_comparison <- (melt(list(new_exposures, natgen_renormalised[mtch,])))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
melt_comparison[which(duplicated(melt_comparison[,c(1,2,4)])),]
dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
rownames(natgen_renormalised) <- sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-'))
mtch <- match(rownames(new_exposures), rownames(natgen_renormalised))
melt_comparison <- (melt(list(new_exposures, natgen_renormalised[mtch,])))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
melt_comparison[which(duplicated(melt_comparison[,c(1,2,4)])),]
melt_comparison <- dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
ggplot(melt_comparison, aes(x=))
head(melt_comparison)
#<begin_chunk>```{r, match,include=FALSE}
natgen_renormalised <- natgen_renormalised[grep('TCGA', rownames(natgen_renormalised)),]
rownames(natgen_renormalised) <- sapply(rownames(natgen_renormalised), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse = '-'))
mtch <- match(rownames(new_exposures), rownames(natgen_renormalised))
melt_comparison <- (melt(list(new_exposures, natgen_renormalised[mtch,])))
melt_comparison <- melt_comparison[!is.na(melt_comparison$Var1),]
melt_comparison[which(duplicated(melt_comparison[,c(1,2,4)])),]
melt_comparison <- dcast(melt_comparison, Var1+Var2~L1, value.var = 'value')
head(melt_comparison)
melt_comparison
head(melt_comparison)
ggplot(melt_comparison, aes(x=`1`, y=`2`))+geom_point()+facet_wrap(.~Var2)
ggplot(melt_comparison, aes(x=`1`, y=`2`))+geom_point()+facet_wrap(.~Var2, scales = "free")+
geom_abline(intercept = 0, slope = 1)
colnames(melt_comparison)
colnames(melt_comparison)[3:4] <- c('New exposures', 'Old exposures')
colnames(melt_comparison)[3:4] <- c('NewExposures', 'OldExposures')
ggplot(melt_comparison, aes(x=NewExposures, y=OldExposures))+geom_point()+facet_wrap(.~Var2, scales = "free")+
geom_abline(intercept = 0, slope = 1)
ggplot(melt_comparison, aes(x=NewExposures, y=OldExposures))+geom_point()+facet_wrap(.~Var2, scales = "free", nrow=2)+
geom_abline(intercept = 0, slope = 1)
#<begin_omit>```{r}
rm(list = ls())
colnames(melt_comparison)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
#<begin_chunk>```{r, libraries,message=FALSE}
library(ggrepel)
#library(cowplot)
library(compositions)
