sort(ploidy_organoids)
x <- readRDS("../data/organoid_exposures_Aug21.rds")
x
knitr::opts_chunk$set(cache = TRUE)
give_short_names = function(i){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(dplyr)
source("../../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
#x <- read.table("../data/organoids_signature_exposuresDom.csv", sep = ',', header = T)
first_version <- FALSE
x <- readRDS("../data/organoid_exposures_Aug21.rds")
if(first_version){
org <- x[,-1]
}else{
org <- x
}
org <- as(org, 'matrix')
rownames(org) <- paste0('Sample ', 1:nrow(org))
createBarplot(org, remove_labels = TRUE, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
# org_nonnormalised <- org
# org <- sweep(org, 1, rowSums(org), '/')
# createBarplot(org, remove_labels = TRUE, order_labels = names(sort(org[,1]))) +
#   ggtitle('Exposures for the organoids')
load("../../../../CDA_in_Cancer/data/Robj/image_NatGen_rmd.RData")
natgen = natgen_metadata = natgen = list()
natgen[[1]] <- as.matrix(sig_data_unorm[,1:7])
natgen_metadata[[1]] <- sig_data_unorm[,8:ncol(sig_data_unorm)]
natgen[[2]] <- readRDS("../data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
summary_ascat = read.table("../data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
## natgen 1
natgen[[1]][grepl('TCGA', rownames(natgen[[1]])),][ !(sapply(rownames(natgen[[1]])[grepl('TCGA', rownames(natgen[[1]]))], give_short_names) %in% good_tcga),] <- NA
natgen[[1]] = natgen[[1]][!apply(natgen[[1]], 1, function(rw) all(is.na(rw))),]
natgen_metadata[[1]][grepl('TCGA', rownames(natgen_metadata[[1]])),][ !(sapply(rownames(natgen_metadata[[1]])[grepl('TCGA', rownames(natgen_metadata[[1]]))], give_short_names) %in% good_tcga),] <- NA
natgen_metadata[[1]] = natgen_metadata[[1]][!apply(natgen_metadata[[1]], 1, function(rw) all(is.na(rw))),]
## updated signatures. no samples which didn't make the cut should be included here to start with
natgen[[2]][grepl('TCGA', rownames(natgen[[2]])),][ !(sapply(rownames(natgen[[2]])[grepl('TCGA', rownames(natgen[[2]]))], give_short_names) %in% good_tcga),] <- NA
natgen[[2]] = natgen[[2]][!apply(natgen[[2]], 1, function(rw) all(is.na(rw))),]
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!grepl('TCGA', rownames( natgen[[1]])),])
natgen_metadata[[2]][grepl('TCGA', rownames(natgen_metadata[[2]])),][ !(sapply(rownames(natgen_metadata[[2]])[grepl('TCGA', rownames(natgen_metadata[[2]]))], give_short_names) %in% good_tcga),] <- NA
natgen_metadata[[2]] = natgen_metadata[[2]][!apply(natgen_metadata[[2]], 1, function(rw) all(is.na(rw))),]
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!grepl('TCGA', rownames( natgen[[1]])),])
cat('The percentage of zeros in every cohort is:\n')
lapply(c(organoids=list(unlist(org)),
split(x = natgen[[1]], f = factor(natgen_metadata[[1]]$study)),
split(x = natgen[[2]], f = factor(natgen_metadata[[2]]$study))),
function(i) paste0(signif(sum(i==0)/length(i)*100, 5), '%'))
folder_natgen = "../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/manuscript_Rmarkdown/data/"
folder_natgen_mod = "../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50_mod//manuscript_Rmarkdown/data/"
BriTROC_absolute_copynumber = readRDS("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/manuscript_Rmarkdown/data/BriTROC_absolute_copynumber.rds")
BriTROC2_CN_features = readRDS("../data/6_TCGA_Signatures_on_BRITROC/0_BRITROC_absolute_CN.rds")
# BriTROC_CN_features = extractCopynumberFeatures(BriTROC_absolute_copynumber)
# saveRDS(BriTROC_CN_features, "../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50_mod/manuscript_Rmarkdown/data/BriTROC_CN_features.rds")
organoids_absolute_copynumber = readRDS(paste0("../data/", "organoid_absolute_CN.rds"))
organoids_CN_features = extractCopynumberFeatures(organoids_absolute_copynumber)
BriTROC_CN_features = readRDS("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50_mod/manuscript_Rmarkdown/data/BriTROC_CN_features.rds")
## Normalisation is not done in such a way that rows add up to 1. Re-normalising
natgen[[1]] <- sweep(natgen[[1]], 1, rowSums(natgen[[1]]), '/')
natgen[[2]] <- sweep(natgen[[2]], 1, rowSums(natgen[[2]]), '/')
## Only selecting those which are TCGA
num_of_previous_not_in_current = sum(is.na((match(sapply(rownames(natgen_metadata[[1]]), function(i) paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-') ),
rownames(natgen_metadata[[2]])))))
num_of_current_not_in_previous = sum(is.na(match(rownames(natgen[[2]])[grep('TCGA', rownames(natgen[[2]]))],
sapply(rownames(natgen[[1]])[grep('TCGA', rownames(natgen[[1]]))],
give_short_names ))))
num_of_previous_not_in_current = sum(is.na(match(sapply(rownames(natgen[[1]])[grep('TCGA', rownames(natgen[[1]]))], give_short_names),
sapply(rownames(natgen[[2]])[grep('TCGA', rownames(natgen[[2]]))], give_short_names ))))
num_exposures_tcga_previous = length(rownames(natgen[[1]])[grep('TCGA', rownames(natgen[[1]]))]) ## Natgen exposures
num_exposures_tcga_current = length(rownames(natgen[[2]])[grep('TCGA', rownames(natgen[[2]]))]) ## new, from Ruben
## samples in previous which are not in current
# rownames(natgen_metadata[[1]])[(is.na((match(sapply(rownames(natgen_metadata[[1]]), function(i) paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-') ),
#       rownames(natgen_metadata[[2]])))))]
#
# rownames(natgen_metadata[[1]])[(is.na(match(rownames(natgen[[2]])[grep('TCGA', rownames(natgen[[2]]))],
#       sapply(rownames(natgen[[1]])[grep('TCGA', rownames(natgen[[1]]))],
#              give_short_names ))))]
which_natgen = 1
# natgen_barplt1 <- createBarplot((natgen[[1]][grepl('TCGA', rownames(natgen[[1]])),]), remove_labels = TRUE, verbatim = FALSE)+
#   ggtitle('Previous TCGA exposures')+theme(legend.position = "bottom")
# natgen_barplt2 <- createBarplot(natgen[[2]][grepl('TCGA', rownames(natgen[[1]])),], remove_labels = TRUE, verbatim = FALSE)+
#   ggtitle('Current TCGA exposures')+theme(legend.position = "bottom")
# grid.arrange(natgen_barplt1, natgen_barplt2, ncol=2)
natgen_barplt_perstudy <- list()
for(i in 1:length(unique(natgen_metadata[[which_natgen]]$study))){
natgen_barplt_perstudy[[i]] <- createBarplot(natgen[[which_natgen]][natgen_metadata[[which_natgen]]$study == unique(natgen_metadata[[which_natgen]]$study)[i],],
remove_labels = TRUE)+
ggtitle(paste0('Re-normalised\n', unique(natgen_metadata[[which_natgen]]$study)[i] ))
}
plot_grid(plotlist=natgen_barplt_perstudy)
org_barplot <- createBarplot(org, remove_labels = TRUE, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
no1_natgen <- natgen_barplt1 <- createBarplot(natgen[[which_natgen]], remove_labels = TRUE,
order_labels = rownames(natgen[[which_natgen]])[(order(natgen[[which_natgen]][,1]))]) +
ggtitle('Original')
gridExtra::grid.arrange(org_barplot, no1_natgen)
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Organoid ', rownames(org_clr))
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
pca_from_projection = prcomp_all = list()
for(which_natgen in 1:2){
prcomp_all[[which_natgen]] <- princomp(as(clr(natgen[[which_natgen]]), 'matrix'))
df_prcomp_exposures <- data.frame(prcomp_all[[which_natgen]]$scores[,1:2], study=natgen_metadata[[which_natgen]]$study, labels=NA)
df_prcomp_exposures_org <- data.frame(predict(prcomp_all[[which_natgen]], (org_clr_robustzeroes))[,1:2], 'Organoid', rownames(org))
colnames(df_prcomp_exposures_org) <- c('Comp.1', 'Comp.2', 'study', 'labels')
df_prcomp_exposures <- rbind(df_prcomp_exposures, df_prcomp_exposures_org)
df_prcomp_exposures$labels <- gsub('Sample ', '', df_prcomp_exposures$labels) ##here
myColors <- col_vector[1:length(unique(df_prcomp_exposures$study))]
names(myColors) <- unique(df_prcomp_exposures$study)
#ggthemr('flat dark')
#ggthemr_reset()
# set_swatch(myColors)
var_explained1 <- (prcomp_all[[which_natgen]]$sdev**2)/sum(prcomp_all[[which_natgen]]$sdev**2)
pca_from_projection[[which_natgen]] = ( ggplot(df_prcomp_exposures, aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection, dataset #", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw())
}
pca_from_projection[[3]]= ggplot(df_prcomp_exposures[grepl('TCGA|Organoid', rownames(df_prcomp_exposures)),],
aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection, dataset # (only TCGA)", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
grid.arrange(pca_from_projection[[1]]+theme(legend.position = 'bottom'),
pca_from_projection[[2]]+theme(legend.position = 'bottom'),
pca_from_projection[[3]]+theme(legend.position = 'bottom'),
ncol=2)
#  scale_color_discrete(myColors)
# plot(prcomp_all$scores[,1:2], col=factor(natgen_metadata$study), pch=4)
# points(t(prcomp_all$loadings %*% t(org))[,1:2], pch=19, col='red')
## just to point out that they are the same
selected_underrepresented_right <- natgen[[which_natgen]][which(df_prcomp_exposures$Comp.1 > max(df_prcomp_exposures[df_prcomp_exposures$study == 'Organoid','Comp.1'])),]
selected_underrepresented_left <- natgen[[which_natgen]][which(df_prcomp_exposures$Comp.1 < min(df_prcomp_exposures[df_prcomp_exposures$study == 'Organoid','Comp.1'])),]
grid.arrange(createBarplot(as(selected_underrepresented_right, 'matrix'), remove_labels = TRUE)+ggtitle('Underrepresented (right)'),
createBarplot(as(selected_underrepresented_left, 'matrix'), remove_labels = TRUE)+ggtitle('Underrepresented (left)'),
createBarplot(org, remove_labels = TRUE)+ggtitle('Organoids'))
dev.off()
par(mfrow=c(1,2))
for(i in 1:2){
barplot(prcomp_all[[1]]$loadings[,i], main='Loadings of the\nfirst principal component')
barplot(prcomp_all[[1]]$loadings[,i], main='Loadings of the\nsecond principal component')
}
## input matrix is the already clr-transformed matrix
createPCA_fromscratch <- function(input_matrix, annotation, annotation2, return_df=FALSE, labels_active=TRUE){
prcomp_all_clr <- princomp(input_matrix)
df_prcomp_exposures_clr <- data.frame(prcomp_all_clr$scores[,1:2],
study=annotation,
bool_any_zeroes=annotation2,
labels=rownames(input_matrix))
df_prcomp_exposures_clr$labels[!grepl('Sample', df_prcomp_exposures_clr$labels)] <- NA
df_prcomp_exposures_clr[,'labels'] <- gsub("Organoid Sample ", "", df_prcomp_exposures_clr$labels)
df_prcomp_exposures_clr[,'labels'] <- gsub("Sample ", "", df_prcomp_exposures_clr$labels)
var_explained2 <- (prcomp_all_clr$sdev**2)/sum(prcomp_all_clr$sdev**2)
if(return_df){
df_prcomp_exposures_clr
}else{
if(labels_active){
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study), label=labels))+ geom_point() + geom_label_repel()+
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}else{
ggplot(df_prcomp_exposures_clr, aes(x=Comp.1, y=Comp.2, col=interaction(bool_any_zeroes, study)))+ geom_point() +
labs(x=paste0('PC1 (', round(var_explained2[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained2[2], 2)*100, '%)'))
}
}
}
pca_from_scratch = org_clr_robustzeroes = natgen_clr = list()
for(which_natgen in 1:3){
if(which_natgen %in% 1:2){
natgen_clr[[which_natgen]] <- as(clr(natgen[[which_natgen]]), 'matrix') ##clr_mat(natgen[[which_natgen]], )
org_clr_robustzeroes[[which_natgen]] <- as(compositions::clr(org), 'matrix')
pca_from_scratch[[which_natgen]] = (createPCA_fromscratch(input_matrix = rbind(natgen_clr[[which_natgen]],org_clr_robustzeroes[[which_natgen]]),
annotation = c(natgen_metadata[[which_natgen]]$study, rep('Organoid', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata[[which_natgen]])[1]), unlist(apply(org, 1, function(i) any(i == 0)))))+
ggtitle('PCA created from scratch with robust zeroes'))+theme_bw()
}else if(which_natgen == 3){
## We are using the old exposures, but only for TCGA, so that we can compare the PCA to the only-TCGA PCA of the new exposures
natgen_clr[[which_natgen]] <- as(clr(natgen[[1]]), 'matrix')
org_clr_robustzeroes[[which_natgen]] <- as(compositions::clr(org), 'matrix')
subset = natgen_metadata[[1]]$study == 'TCGA'
pca_from_scratch[[3]] = (createPCA_fromscratch(input_matrix = rbind(natgen_clr[[which_natgen]][subset,],org_clr_robustzeroes[[which_natgen]]),
annotation = c(natgen_metadata[[1]]$study[subset], rep('Organoid', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata[[1]])[1])[subset], unlist(apply(org, 1, function(i) any(i == 0)))))+
ggtitle('PCA created from scratch with robust zeroes'))+theme_bw()
}else{
stop('Incorrect which_natgen')
}
}
pca_from_scratch[[1]]+theme(legend.position = 'bottom')
grid.arrange(pca_from_scratch[[2]]+theme(legend.position = 'bottom'), pca_from_scratch[[3]]+theme(legend.position = 'bottom'), ncol=2)
which_natgen = 1
plt_pc1 <- createPCA_fromscratch(input_matrix = rbind(natgen_clr[[which_natgen]],clr_mat(addPseudoCounts(org, 1e-7))),
annotation = c(natgen_metadata[[which_natgen]]$study, rep('Organoid', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata[[which_natgen]])[1]), unlist(apply(org, 1, function(i) any(i == 0)))))+
ggtitle('PCA created from scratch with pseudocount of 1e-7')
plt_pc2 <- createPCA_fromscratch(input_matrix = rbind(natgen_clr[[which_natgen]],clr_mat(addPseudoCounts(org, 1e-8))),
annotation = c(natgen_metadata[[which_natgen]]$study, rep('Organoid', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata[[which_natgen]])[1]), unlist(apply(org, 1, function(i) any(i == 0)))))+
ggtitle('PCA created from scratch with pseudocount of 1e-8')
plt_pc3 <- createPCA_fromscratch(input_matrix = rbind(natgen_clr[[which_natgen]],clr_mat(addPseudoCounts(org, 1e-10))),
annotation = c(natgen_metadata[[which_natgen]]$study, rep('Organoid', nrow(org_clr))),
annotation2 = c(rep(FALSE, dim(natgen_metadata[[which_natgen]])[1]), unlist(apply(org, 1, function(i) any(i == 0)))))+
ggtitle('PCA created from scratch with pseudocount of 1e-10')
grid.arrange(plt_pc1, plt_pc2, plt_pc3)
give_dendrogram <- function(which_natgen){
organoid_metadata <- cbind.data.frame(study=rep('organoids', nrow(org_clr_robustzeroes[[which_natgen]])), age=NA, age.cat=NA)
rownames(organoid_metadata) <- rownames(org_clr_robustzeroes[[which_natgen]])
all_metadata <- rbind(natgen_metadata[[which_natgen]], organoid_metadata)
all_clr <- rbind(natgen_clr[[which_natgen]], org_clr_robustzeroes[[which_natgen]])
rm_infinite <- apply(all_clr, 1, function(x) any(is.infinite(x)))
cat(which(rm_infinite), 'removed due to infinite values')
all_clr_clean <- all_clr[!rm_infinite,]
which(rm_infinite)
#all_clr_clean <- all_clr_clean[c(1:2, grep( 'Organoid', rownames(all_clr_clean))),]
dendro_all <- as.dendrogram(hclust(dist(all_clr_clean)))
levels_study <- levels(factor(all_metadata[labels(dendro_all),'study']))
levels_study
which_level_organoids <- which(grepl('organoids', levels_study))
cols <- rep(NA, length(levels_study))
colour_organoid = 'blue' #'#88E9A2'
cols[which_level_organoids] <- colour_organoid
if(which_natgen == 1){
cols[-which_level_organoids] <- c('#FFA07A', '#FA8072', '#E9967A', '#F08080')
}else if(which_natgen == 2){
cols[-which_level_organoids] <- c('#FFA07A')
}
labels_colors(dendro_all) <- cols[factor(all_metadata[labels(dendro_all),'study'])]
labels_org_bool <- labels_colors(dendro_all) == colour_organoid
labels(dendro_all)[labels_org_bool] <- rep('○', sum(labels_org_bool))#rep('●', sum(labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep('•', sum(!labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
cex_labels <- rep(1, length(labels_org_bool))
cex_labels[labels_org_bool] <- 0.9
dendro_all <- set(dendro_all, "labels_cex", cex_labels)
table(labels(dendro_all))
plot(dendro_all, cex=0.4, cex.lab=4, main='Dendrogram based on the exposures\n(Aitchison distance)')
}
give_dendrogram(1)
give_dendrogram(2)
pcawg_CN_features = readRDS(paste0(folder_natgen, "pcawg_CN_features.rds"))
list(organoids=organoids_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
BriTROC=BriTROC_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
pcawg=pcawg_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
tcga=tcga_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log)
organoids_CN_features
list_features_all =  lapply(names(organoids_CN_features), function(name_it_features){list(organoids_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
BriTROC=BriTROC_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
pcawg=pcawg_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
tcga=tcga_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log}))
list_features_all =  lapply(names(organoids_CN_features), function(name_it_features){list(organoids_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
BriTROC=BriTROC_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
pcawg=pcawg_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
tcga=tcga_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log)})
list_features_all
df_features
df_features =  lapply(names(organoids_CN_features), function(name_it_features){list(organoids_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
BriTROC=BriTROC_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
pcawg=pcawg_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log,
tcga=tcga_CN_features[[name_it_features]] %>% dplyr::select(2) %>%
unlist %>% as.numeric %>% log)})
## Distribution of the segment sizes
distribs_features = lapply(names(organoids_CN_features), function(name_it_features){
give_joint_histogram(df_features[[name_it_features]], no_colour=FALSE)+ggtitle(paste0(name_it_features, ' (log)'))+ guides(fill=FALSE)
})
names(organoids_CN_features)
length(names(organoids_CN_features))
length(df_features)
names(df_features)
names(organoids_CN_features)
names(df_features) = names(organoids_CN_features)
## Distribution of the segment sizes
distribs_features = lapply(names(organoids_CN_features), function(name_it_features){
give_joint_histogram(df_features[[name_it_features]], no_colour=FALSE)+ggtitle(paste0(name_it_features, ' (log)'))+ guides(fill=FALSE)
})
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
system("mkdir -p figures/")
pdf("figures/feature_distributions.pdf")
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
dev.off()
pdf("figures/feature_distributions.pdf", width = 10)
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
dev.off()
dev.off()
pdf("figures/feature_distributions.pdf", width = 10)
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
dev.off()
names(df_features)
names(df_features) = c('Segment size', 'Number of breakpoints per 10Mb', 'Oscillating copy number', 'Number of breakpoints per chromosome arm', 'Changepoint', 'Copy number of segment')
## Distribution of the segment sizes
distribs_features = lapply(names(organoids_CN_features), function(name_it_features){
give_joint_histogram(df_features[[name_it_features]], no_colour=FALSE)+ggtitle(paste0(name_it_features, ' (log)'))+ guides(fill=FALSE)
})
names(names(df_features))
length(c('Segment size', 'Number of breakpoints per 10Mb', 'Oscillating copy number', 'Number of breakpoints per chromosome arm', 'Changepoint', 'Copy number of segment'))
names(df_features) = c('Segment size', 'Number of breakpoints per 10Mb', 'Oscillating copy number', 'Number of breakpoints per chromosome arm', 'Changepoint', 'Copy number of segment')
names(df_features)
distribs_features = lapply(names(organoids_CN_features), function(name_it_features){
give_joint_histogram(df_features[[name_it_features]], no_colour=FALSE)+ggtitle(paste0(name_it_features, ' (log)'))+ guides(fill=FALSE)
})
distribs_features = lapply(names(df_features), function(name_it_features){
give_joint_histogram(df_features[[name_it_features]], no_colour=FALSE)+ggtitle(paste0(name_it_features, ' (log)'))+ guides(fill=FALSE)
})
pdf("figures/feature_distributions.pdf", width = 10)
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
dev.off()
pdf("figures/feature_distributions.pdf", width = 14)
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
dev.off()
pdf("figures/feature_distributions.pdf", width = 14, height = 10)
grid.arrange(distribs_features[[1]], distribs_features[[2]],
distribs_features[[3]], distribs_features[[4]],
distribs_features[[5]], distribs_features[[6]], ncol=3)
dev.off()
