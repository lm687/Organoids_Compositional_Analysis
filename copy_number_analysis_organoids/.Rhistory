pcawg=pcawg_CN_features[[1]] %>% group_by(ID) %>%
group_map( ~ nrow(.x)) %>% unlist,
tcga=tcga_CN_features[[1]] %>% group_by(ID) %>%
group_map( ~ nrow(.x)) %>% unlist)
list_all_nsegments
lapply(list_all_nsegments, length)
sapply(list_all_nsegments, length)
sapply(list_all_nsegments, length)
list_all_nsegments = list(organoids=organoids_CN_features[[1]] %>% group_by(ID) %>%
group_map( ~ nrow(.x)) %>% unlist,
BriTROC=BriTROC_CN_features[[1]] %>% group_by(ID) %>%
group_map( ~ nrow(.x)) %>% unlist,
pcawg=pcawg_CN_features[[1]] %>% group_by(ID) %>%
group_map( ~ nrow(.x)) %>% unlist,
tcga=tcga_CN_features[[1]] %>% group_by(ID) %>%
group_map( ~ nrow(.x)) %>% unlist)
list_all_nsegments[[1]]
number_of_segments[[1]]
## Plot together with values
sequence_dpois = seq(min(unlist(number_of_segments)), max(unlist(number_of_segments)), by = 2)
data_poisson = do.call('rbind.data.frame', lapply(c('BriTROC', 'organoids', 'pcawg', 'tcga'), function(i){
scaling_factor = length(number_of_segments[[i]])
extra_scaling_factor = (max(number_of_segments[[i]])-min(number_of_segments[[i]]))/30 ## we would need to know the number of pixels per unit
extra_scaling_factor = 9
cbind.data.frame(value=sequence_dpois,
count=scaling_factor*extra_scaling_factor*dpois(x = sequence_dpois, lambda = reduced$fitted.values[1]), L1=i)}))
data_NB = do.call('rbind.data.frame', lapply(c('BriTROC', 'organoids', 'pcawg', 'tcga'), function(i){
scaling_factor = length(number_of_segments[[i]])
extra_scaling_factor = (max(number_of_segments[[i]])-min(number_of_segments[[i]]))/30 ## we would need to know the number of pixels per unit
extra_scaling_factor = 50
cbind.data.frame(value=sequence_dpois,
count=scaling_factor*extra_scaling_factor*dnbinom(x = sequence_dpois, mu = unique(fitted(reduced_nb)), size = reduced_nb$theta, log = FALSE),
L1=i)}))
give_joint_histogram(number_of_segments, bins=30)+ggtitle('Number of segments')+
geom_line(data = data_poisson, aes(x=value, y=count))+
geom_line(data = data_NB, aes(x=value, y=count), col='red')+
ggtitle('Observed number of segments and Poisson (black) and Negative Binomial (red) model')+
theme(legend.position = "bottom")
ggplot(reshape2::melt(list(unlist(number_of_segments[-1]), number_of_segments[1])),
aes(x=value, fill=L1, group=L1, col=L1), alpha=0.2)+ stat_bin(geom="step", bins = 30)+
facet_wrap(.~L1, nrow=1, scales='free_y')+ggtitle('Comparison on non-organoids (left) and organoids (right)')
segtables_BriTROC_absolute_copynumber = lapply(sampleNames(BriTROC_absolute_copynumber), function(samplename) getSegTable(BriTROC_absolute_copynumber[,samplename]))
segtables_BriTROC_absolute_copynumber = lapply(sampleNames(BriTROC_absolute_copynumber), function(samplename) getSegTable(BriTROC_absolute_copynumber[,samplename]))
names(segtables_BriTROC_absolute_copynumber) = sampleNames(BriTROC_absolute_copynumber)
segtables_organoids_absolute_copynumber = lapply(sampleNames(organoids_absolute_copynumber), function(samplename) getSegTable(organoids_absolute_copynumber[,samplename]))
segtables_organoids_absolute_copynumber = lapply(sampleNames(organoids_absolute_copynumber), function(samplename) getSegTable(organoids_absolute_copynumber[,samplename]))
names(segtables_BriTROC_absolute_copynumber) = sampleNames(organoids_absolute_copynumber)
TCGA_absolute_copynumber = readRDS("data/combined.ascat.segments.filt.rds")
## we only want the ovarian ones
## select the TCGA samples which are in the subset in which we are interested (the ones that passed QC and that are only OV)
TCGA_absolute_copynumber = TCGA_absolute_copynumber[TCGA_absolute_copynumber$sample %in% rownames(natgen$UpdatedExposures),]
segtables_TCGA_absolute_copynumber = lapply(as.character(sort(unique(TCGA_absolute_copynumber$sample))), function(samplename) TCGA_absolute_copynumber[TCGA_absolute_copynumber$sample == samplename,])
segtables_TCGA_absolute_copynumber = lapply(segtables_TCGA_absolute_copynumber, function(i) i[,1:(ncol(i)-1)]) ## removing sample name
names(segtables_TCGA_absolute_copynumber) = as.character(sort(unique(TCGA_absolute_copynumber$sample)))
## we only want the ovarian ones
ICGC_absolute_copynumber_AU = readRDS("data/CN_Calls_ABSOLUTE_PCAWG/OV-AU.segments.raw.rds")
ICGC_absolute_copynumber_US = readRDS("data/CN_Calls_ABSOLUTE_PCAWG/OV-US.segments.raw.rds")
ICGC_absolute_copynumber_AU = ICGC_absolute_copynumber_AU[,c('sample', 'chr', 'startpos', 'endpos', 'segVal')]
ICGC_absolute_copynumber_US = ICGC_absolute_copynumber_US[,c('sample', 'chr', 'startpos', 'endpos', 'segVal')]
segtables_ICGC_absolute_copynumber_AU = lapply(sort(unique(ICGC_absolute_copynumber_AU$sample)),
function(samplename)
ICGC_absolute_copynumber_AU[ICGC_absolute_copynumber_AU$sample == samplename,])
segtables_ICGC_absolute_copynumber_AU = lapply(segtables_ICGC_absolute_copynumber_AU, function(i) { colnames(i)[colnames(i) == "chr"] = "chromosome";
colnames(i)[colnames(i) == "endpos"] = "end";
return(i) } )
names(segtables_ICGC_absolute_copynumber_AU) = unique(ICGC_absolute_copynumber_AU$sample)
segtables_ICGC_absolute_copynumber_US = lapply(sort(unique(ICGC_absolute_copynumber_US$sample)),
function(samplename) ICGC_absolute_copynumber_US[ICGC_absolute_copynumber_US$sample == samplename,])
segtables_ICGC_absolute_copynumber_US = lapply(segtables_ICGC_absolute_copynumber_US, function(i) { colnames(i)[colnames(i) == "chr"] = "chromosome";
colnames(i)[colnames(i) == "endpos"] = "end";
return(i) } )
names(segtables_ICGC_absolute_copynumber_US) = unique(ICGC_absolute_copynumber_US$sample)
## for ICGC, remove the samples row and put it in the rows
segtables_ICGC_absolute_copynumber_US = lapply(segtables_ICGC_absolute_copynumber_US, function(i){
rownames(i) = i$samples
i = i[,-1]
i})
segtables_ICGC_absolute_copynumber_AU = lapply(segtables_ICGC_absolute_copynumber_AU, function(i){
rownames(i) = i$samples
i = i[,-1]
i})
### Make numeric
segtables_BriTROC_absolute_copynumber <- lapply(segtables_BriTROC_absolute_copynumber, function(segtab) apply(segtab, 2, as.numeric)) ## convert to numeric matrices
segtables_ICGC_absolute_copynumber_AU <- lapply(segtables_ICGC_absolute_copynumber_AU, function(segtab) apply(segtab, 2, as.numeric)) ## convert to numeric matrices
segtables_ICGC_absolute_copynumber_US <- lapply(segtables_ICGC_absolute_copynumber_US, function(segtab) apply(segtab, 2, as.numeric)) ## convert to numeric matrices
segtables_TCGA_absolute_copynumber <- lapply(segtables_TCGA_absolute_copynumber, function(segtab) apply(segtab, 2, as.numeric)) ## convert to numeric matrices
### remove sex chromosomes from any downstream analysis
segtables_TCGA_absolute_copynumber = lapply(segtables_TCGA_absolute_copynumber, function(i) i[!(is.na(i[,1])),])
segtables_ICGC_absolute_copynumber_US = lapply(segtables_ICGC_absolute_copynumber_US, function(i) i[!(is.na(i[,1])),])
segtables_ICGC_absolute_copynumber_AU = lapply(segtables_ICGC_absolute_copynumber_AU, function(i) i[!(is.na(i[,1])),])
## check that there are no sex chromosomes
cat('Check that there are no sex chromosomes included anywhere')
sapply(list(segtables_TCGA_absolute_copynumber, segtables_ICGC_absolute_copynumber_US, segtables_ICGC_absolute_copynumber_AU,
segtables_organoids_absolute_copynumber, segtables_BriTROC_absolute_copynumber),
function(list_segments) all(sapply(list_segments, function(i) sum(apply(i, 2, is.na))) == 0) )
give_ploidy = function(segtab){
.lengths = apply(segtab, 1, function(rw) rw[3]-rw[2])
sum(segtab[,4]*.lengths/sum(.lengths))
}
segtables_ICGC_absolute_copynumber_US
names(segtables_ICGC_absolute_copynumber_US)
ploidy_ICGC_US = sapply(segtables_ICGC_absolute_copynumber_US, give_ploidy)
ploidy_ICGC_US
ploidy_ICGC_AU = sapply(segtables_ICGC_absolute_copynumber_AU, give_ploidy)
ploidy_TCGA = sapply(segtables_TCGA_absolute_copynumber, give_ploidy)
ploidy_TCGA = sapply(segtables_TCGA_absolute_copynumber, give_ploidy)
ploidy_BriTROC = sapply(segtables_BriTROC_absolute_copynumber, give_ploidy)
ploidy_BriTROC = sapply(segtables_BriTROC_absolute_copynumber, give_ploidy)
ploidy_organoids = sapply(segtables_organoids_absolute_copynumber, give_ploidy)
ploidy_ICGC_AU
ploidy_TCGA
ploidy_BriTROC
segtables_BriTROC_absolute_copynumber = lapply(sampleNames(BriTROC_absolute_copynumber), function(samplename) getSegTable(BriTROC_absolute_copynumber[,samplename]))
segtables_BriTROC_absolute_copynumber
segtables_BriTROC_absolute_copynumber = lapply(sampleNames(BriTROC_absolute_copynumber), function(samplename) getSegTable(BriTROC_absolute_copynumber[,samplename]))
names(segtables_BriTROC_absolute_copynumber) = sampleNames(BriTROC_absolute_copynumber)
segtables_organoids_absolute_copynumber = lapply(sampleNames(organoids_absolute_copynumber), function(samplename) getSegTable(organoids_absolute_copynumber[,samplename]))
names(segtables_organoids_absolute_copynumber) = sampleNames(organoids_absolute_copynumber)
### Make numeric
segtables_BriTROC_absolute_copynumber <- lapply(segtables_BriTROC_absolute_copynumber, function(segtab) apply(segtab, 2, as.numeric)) ## convert to numeric matrices
segtables_organoids_absolute_copynumber <- lapply(segtables_organoids_absolute_copynumber, function(segtab) apply(segtab, 2, as.numeric)) ## convert to numeric matrices
ploidy_BriTROC = sapply(segtables_BriTROC_absolute_copynumber, give_ploidy)
ploidy_organoids = sapply(segtables_organoids_absolute_copynumber, give_ploidy)
ploidy_BriTROC
ploidy_organoids
ploidy_TCGA
ploidy_ICGC_AU
ploidy_ICGC_US
grid.arrange(give_joint_histogram(list(organoids=ploidy_organoids, ICGC_US=ploidy_ICGC_US, ICGC_AU=ploidy_ICGC_AU, TCGA_OV=ploidy_TCGA, BriTROC=ploidy_BriTROC))+
ggtitle('Ploidy')+theme(legend.position = "bottom")+geom_vline(xintercept = 2)+geom_vline(xintercept = 1),
give_joint_histogram(lapply(list(organoids=ploidy_organoids, ICGC_US=ploidy_ICGC_US, ICGC_AU=ploidy_ICGC_AU, TCGA_OV=ploidy_TCGA, BriTROC=ploidy_BriTROC), log))+theme(legend.position = "bottom")+geom_vline(xintercept = log(2))+ggtitle('Logged ploidy')+geom_vline(xintercept = log(1)), ncol=2)
t.test(log(ploidy_organoids), log(ploidy_BriTROC))
MASS::rlm(ploidy~group,
data=cbind.data.frame(ploidy=c(ploidy_organoids, ploidy_BriTROC), group=c(rep(1,length(ploidy_organoids)), rep(2, length(ploidy_BriTROC)))))
## Segments across the genome
# (sapply(chrlen$V1, function(i) gsub("chr", "", i)))
sorted_chroms = chrlen$V1[order(as.numeric((gsub("chr", "", chrlen$V1))))]
chrom_lenths = chrlen[match(sorted_chroms, chrlen$V1),]
ploidies = rbind.data.frame(cbind.data.frame(cohort='pcawg',
ploidy=c(sapply(segtables_ICGC_absolute_copynumber_US, give_ploidy),
sapply(segtables_ICGC_absolute_copynumber_AU, give_ploidy))),
cbind.data.frame(cohort='tcga',  ploidy=sapply(segtables_TCGA_absolute_copynumber, give_ploidy)),
cbind.data.frame(cohort='BriTROC',  ploidy=sapply(segtables_BriTROC_absolute_copynumber, give_ploidy)),
cbind.data.frame(cohort='organoids', ploidy=sapply(segtables_organoids_absolute_copynumber, give_ploidy)))
ploidies
ploidies[,'organoids_bool'] = c('Clinical', 'Organoids')[1+as.numeric(grepl('organoids', ploidies$cohort))]
ggplot(ploidies, aes(x=organoids_bool, y=ploidy))+geom_boxplot()
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
df_rank[,'id'] = (order(df_rank$value))
df_rank = df_rank[(df_rank$id),]
df_rank$id = factor(df_rank$id, levels=df_rank$id)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
# ggplot(df_rank, aes(x=id, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=id,y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
plot_rank(cbind.data.frame(value=as.numeric(ploidies$ploidy), L1=gsub("ploidy_", "", as.character(ploidies$cohort))))+ggtitle("Ploidy")
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
dev.off()
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
melt(number_of_segments)
df_rank=melt(number_of_segments)
head(df_rank)
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
df_rank[,'Var1'] = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=id,y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
head(melt(number_of_segments))
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
df_rank[,'Var1'] = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=Var1,y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
head(melt(number_of_segments))
df_rank$value = as.numeric(df_rank$value)
df_rank[,'Var1'] = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=Var1,y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
df_rank
df_rank$Var1
levels(df_rank$Var1)
head(melt(number_of_segments))
rm(df_rank)
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
df_rank[,'Var1'] = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=Var1,y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
df_rank=melt(number_of_segments)
df_rank$value = as.numeric(df_rank$value)
df_rank$value
(order(df_rank$value))
order(df_rank$value)
df_rank$Var1[order(df_rank$value)]
as.character(df_rank$Var1)[order(df_rank$value)]
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
df_rank$value
df_rank = melt(number_of_segments)
table(df_rank$Var1)
max(table(df_rank$Var1))
which(table(df_rank$Var1) == 2)
sort(table(df_rank$Var1))
## poisson test
number_of_segments = list(organoids= table(organoids_CN_features[[1]]$ID),
#organoids_CN_features[[1]] %>% group_by(ID) %>%
#group_map( ~ nrow(.x)) %>% unlist,
BriTROC=table(BriTROC_CN_features[[1]]$ID),
#BriTROC_CN_features[[1]] %>% group_by(ID) %>%
#group_map( ~ nrow(.x)) %>% unlist,
# BriTROC2=table(BriTROC2_CN_features$sample),
#BriTROC2_CN_features %>% group_by(sample) %>% group_map( ~ nrow(.x)) %>% unlist,
pcawg=table(pcawg_CN_features[[1]]$ID),
#pcawg_CN_features[[1]] %>% group_by(ID) %>%
#group_map( ~ nrow(.x)) %>% unlist,
tcga=table(tcga_CN_features[[1]]$ID))
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
plot_rank(cbind.data.frame(value=as.numeric(ploidies$ploidy), L1=gsub("ploidy_", "", as.character(ploidies$cohort))))+ggtitle("Ploidy")
df_rank
ifelse(df_rank$L1 == 'organoids', df_rank$Var1, NA)
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
df_rank$labels = ifelse(df_rank$L1 == 'organoids', df_rank$Var1, NA)
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, label=labels width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
df_rank$labels = ifelse(df_rank$L1 == 'organoids', df_rank$Var1, NA)
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, label=labels, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
# geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
df_rank$labels = ifelse(df_rank$L1 == 'organoids', df_rank$Var1, NA)
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, label=labels, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
# geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
geom_label_repel()+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
df_rank$L1
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
df_rank$labels = ifelse(as.character(df_rank$L1) == 'organoids', df_rank$Var1, NA)
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, label=labels, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
# geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
geom_label_repel()+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
plot_rank = function(df_rank){
df_rank$value = as.numeric(df_rank$value)
# df_rank$Var1 = (order(df_rank$value))
df_rank = df_rank[(df_rank$Var1),]
# df_rank$Var1 = factor(df_rank$Var1, levels=df_rank$Var1)
df_rank$L1= factor(df_rank$L1, levels = c('BriTROC', 'organoids', 'pcawg', 'tcga'))
df_rank$labels = ifelse(as.character(df_rank$L1) == 'organoids', as.character(df_rank$Var1), NA)
# ggplot(df_rank, aes(x=Var1, fill=L1, y=value))+geom_bar(stat = "identity")+
#   theme(legend.position = "bottom", axis.title.x=element_blank(),
#         axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+ggtitle("Number of segments")+facet_wrap(.~L1)
# ggsave("figures/num_segments_ranking.pdf")
df_rank = cbind.data.frame(df_rank, organoids= grepl("organoids", df_rank$L1))
ggplot(df_rank, aes(x=factor(Var1, as.character(df_rank$Var1)[order(df_rank$value)]),
y=value, label=labels, width=.5))+geom_bar(stat = "identity", aes( fill= organoids))+
# geom_label(data=cbind.data.frame(df_rank[df_rank$L1 == "organoids",], label="*"), aes(label=label))+
geom_label_repel()+
theme(legend.position = "bottom", axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
plot_rank(melt(number_of_segments))+ggtitle("Number of segments")
plot_rank(cbind.data.frame(value=as.numeric(ploidies$ploidy), L1=gsub("ploidy_", "", as.character(ploidies$cohort))))+ggtitle("Ploidy")
ploidies
rownames(ploidies)
plot_rank(cbind.data.frame(value=as.numeric(ploidies$ploidy), L1=gsub("ploidy_", "", as.character(ploidies$cohort)),
Var1=rownames(ploidies)))+ggtitle("Ploidy")
bps = lapply(list(
segtables_ICGC_absolute_copynumber_US,
segtables_ICGC_absolute_copynumber_AU,
segtables_TCGA_absolute_copynumber,
segtables_BriTROC_absolute_copynumber,
segtables_organoids_absolute_copynumber
), wrapper_get_bp)
names(bps) = c('ICGC_US', 'ICGC_AU', 'TCGA', 'BriTROC', 'organoids')
df_plotting = cbind(melt(bps), x=as.vector(sapply(bps, function(bpsit) 1:nrow(bpsit))))
levels(df_plotting$x) = sort(unique(df_plotting$x))
ggplot(df_plotting, aes(y=value, x=x))+geom_line(aes(group=L1))+facet_wrap(.~L1, ncol=1, scales = "free_y")
segtables_organoids_absolute_copynumber
segtables_organoids_absolute_copynumber$`54327org`
myleaves(dendro_UpdatedExposures)
labels(dendro_UpdatedExposures)
labels(dendro_UpdatedExposures)dendro_UpdatedExposures
dendro_UpdatedExposures
labels(dendro_UpdatedExposures)
labels(dendro_UpdatedExposures)
plot_dendro = function(dendro_all, which_natgen, which_label="Symbol"){
levels_study <- levels(factor(all_metadata[[which_natgen]][labels(dendro_all),'study']))
levels_study
which_level_organoids <- which(grepl('organoids', levels_study))
cols <- rep(NA, length(levels_study))
colour_organoid = 'blue' #'#88E9A2'
cols[which_level_organoids] <- colour_organoid
if(which_natgen == 'ExposuresNatGen'){
cols[-which_level_organoids] <- c('#FFA07A', '#FA8072', '#E9967A', '#F08080')
}else if(which_natgen == 'UpdatedExposures'){
cols[-which_level_organoids] <- c('#FFA07A')
}
labels_colors(dendro_all) <- cols[factor(all_metadata[[which_natgen]][labels(dendro_all),'study'])]
labels_org_bool <- labels_colors(dendro_all) == colour_organoid
if(which_label == "Symbol"){
labels(dendro_all)[labels_org_bool] <- rep('○', sum(labels_org_bool))#rep('●', sum(labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep('•', sum(!labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}
cex_labels <- rep(1, length(labels_org_bool))
cex_labels[labels_org_bool] <- 0.9
dendro_all <- set(dendro_all, "labels_cex", cex_labels)
plot(dendro_all, cex=0.4, cex.lab=4, main='Dendrogram based on the exposures\n(Aitchison distance)')
}
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
dendro_UpdatedExposures
labels(dendro_UpdatedExposures)
all_natgen
rownames(all_natgen)
rownames(all_natgen$UpdatedExposures)
labels(dendro_UpdatedExposures)
rownames(all_natgen$UpdatedExposures)
labels(dendro_UpdatedExposures)
rownames(all_natgen$UpdatedExposures)
labels(dendro_UpdatedExposures)
rownames(all_natgen$UpdatedExposures)
gsub("Organoid ", "", labels(dendro_UpdatedExposures))
rownames(all_natgen$UpdatedExposures)
org
organoids_CN_features
gsub("Organoid ", "", labels(dendro_UpdatedExposures))
rownames(all_natgen$UpdatedExposures)
match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))
rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))]
rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))][1]
labels(dendro_UpdatedExposures)
all_natgen$UpdatedExposures[1,]
rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))][1]
rownames(all_natgen$UpdatedExposures)[1]
gsub("Organoid ", "", labels(dendro_UpdatedExposures))[1]
rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))][1]
all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],]
pheatmap(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],])
library(pheatmap)
pheatmap(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],])
pheatmap(t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],]))
pheatmap(t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],]), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],]), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],]), cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE)
heatmap_dendrogam = pheatmap(t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)), rownames(all_natgen$UpdatedExposures))],]), cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE)
heatmap_dendrogam
pdf("figures/heatmap_dendrogam.png")
heatmap_dendrogam
dev.off()
pdf("figures/heatmap_dendrogam.pdf")
heatmap_dendrogam
dev.off()
