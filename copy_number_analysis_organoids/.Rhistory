for(j in 3:length(currseg))
{
if(currseg[j]==prevval&currseg[j]!=currseg[j-1])
{
count<-count+1
}else{
oscCounts<-c(oscCounts,count)
count=0
}
prevval<-currseg[j-1]
}
}
}
out<-rbind(out,cbind(ID=rep(i,length(oscCounts)),value=oscCounts))
if(length(oscCounts)==0)
{
out<-rbind(out,cbind(ID=i,value=0))
}
}
rownames(out)<-NULL
data.frame(out,stringsAsFactors = F)
}
getCentromereDistCounts<-function(abs_profiles,centromeres,chrlen)
{
out<-c()
samps<-getSampNames(abs_profiles)
for(i in samps)
{
if(class(abs_profiles)=="QDNAseqCopyNumbers")
{
segTab<-getSegTable(abs_profiles[,which(colnames(abs_profiles)==i)])
}else
{
segTab<-abs_profiles[[i]]
colnames(segTab)[4]<-"segVal"
}
chrs<-unique(segTab$chromosome)
all_dists<-c()
for(c in chrs)
{
if(nrow(segTab)>1)
{
starts<-as.numeric(segTab[segTab$chromosome==c,2])[-1]
segstart<-as.numeric(segTab[segTab$chromosome==c,2])[1]
ends<-as.numeric(segTab[segTab$chromosome==c,3])
segend<-ends[length(ends)]
ends<-ends[-length(ends)]
centstart<-as.numeric(centromeres[substr(centromeres[,2],4,5)==c,3])
centend<-as.numeric(centromeres[substr(centromeres[,2],4,5)==c,4])
chrend<-chrlen[substr(chrlen[,1],4,5)==c,2]
ndist<-cbind(rep(NA,length(starts)),rep(NA,length(starts)))
ndist[starts<=centstart,1]<-(centstart-starts[starts<=centstart])/(centstart-segstart)*-1
ndist[starts>=centend,1]<-(starts[starts>=centend]-centend)/(segend-centend)
ndist[ends<=centstart,2]<-(centstart-ends[ends<=centstart])/(centstart-segstart)*-1
ndist[ends>=centend,2]<-(ends[ends>=centend]-centend)/(segend-centend)
ndist<-apply(ndist,1,min)
all_dists<-rbind(all_dists,sum(ndist>0))
all_dists<-rbind(all_dists,sum(ndist<=0))
}
}
if(nrow(all_dists)>0)
{
out<-rbind(out,cbind(ID=i,ct1=all_dists[,1]))
}
}
rownames(out)<-NULL
data.frame(out,stringsAsFactors = F)
}
getChangepointCN<-function(abs_profiles)
{
out<-c()
samps<-getSampNames(abs_profiles)
for(i in samps)
{
if(class(abs_profiles)=="QDNAseqCopyNumbers")
{
segTab<-getSegTable(abs_profiles[,which(colnames(abs_profiles)==i)])
}
else
{
segTab<-abs_profiles[[i]]
colnames(segTab)[4]<-"segVal"
}
segTab$segVal[as.numeric(segTab$segVal)<0]<-0
chrs<-unique(segTab$chromosome)
allcp<-c()
for(c in chrs)
{
currseg<-as.numeric(segTab[segTab$chromosome==c,"segVal"])
allcp<-c(allcp,abs(currseg[-1]-currseg[-length(currseg)]))
}
if(length(allcp)==0)
{
allcp<-0 #if there are no changepoints
}
out<-rbind(out,cbind(ID=rep(i,length(allcp)),value=allcp))
}
rownames(out)<-NULL
data.frame(out,stringsAsFactors = F)
}
getCN<-function(abs_profiles)
{
out<-c()
samps<-getSampNames(abs_profiles)
for(i in samps)
{
if(class(abs_profiles)=="QDNAseqCopyNumbers")
{
segTab<-getSegTable(abs_profiles[,which(colnames(abs_profiles)==i)])
}
else
{
segTab<-abs_profiles[[i]]
colnames(segTab)[4]<-"segVal"
}
segTab$segVal[as.numeric(segTab$segVal)<0]<-0
cn<-as.numeric(segTab$segVal)
out<-rbind(out,cbind(ID=rep(i,length(cn)),value=cn))
}
rownames(out)<-NULL
data.frame(out,stringsAsFactors = F)
}
getSampNames<-function(abs_profiles)
{
if(class(abs_profiles)=="QDNAseqCopyNumbers")
{
samps<-colnames(abs_profiles)
}
else
{
samps<-names(abs_profiles)
}
samps
}
getSegTable<-function(x)
{
dat<-x
sn<-Biobase::assayDataElement(dat,"segmented")
fd <- Biobase::fData(dat)
fd$use -> use
fdfiltfull<-fd[use,]
sn<-sn[use,]
segTable<-c()
for(c in unique(fdfiltfull$chromosome))
{
snfilt<-sn[fdfiltfull$chromosome==c]
fdfilt<-fdfiltfull[fdfiltfull$chromosome==c,]
sn.rle<-rle(snfilt)
starts <- cumsum(c(1, sn.rle$lengths[-length(sn.rle$lengths)]))
ends <- cumsum(sn.rle$lengths)
lapply(1:length(sn.rle$lengths), function(s) {
from <- fdfilt$start[starts[s]]
to <- fdfilt$end[ends[s]]
segValue <- sn.rle$value[s]
c(fdfilt$chromosome[starts[s]], from, to, segValue)
}) -> segtmp
segTableRaw <- data.frame(matrix(unlist(segtmp), ncol=4, byrow=T),stringsAsFactors=F)
segTable<-rbind(segTable,segTableRaw)
}
colnames(segTable) <- c("chromosome", "start", "end", "segVal")
segTable
}
getPloidy<-function(abs_profiles)
{
out<-c()
samps<-getSampNames(abs_profiles)
for(i in samps)
{
if(class(abs_profiles)=="QDNAseqCopyNumbers")
{
segTab<-getSegTable(abs_profiles[,which(colnames(abs_profiles)==i)])
}
else
{
segTab<-abs_profiles[[i]]
colnames(segTab)[4]<-"segVal"
}
segLen<-(as.numeric(segTab$end)-as.numeric(segTab$start))
ploidy<-sum((segLen/sum(segLen))*as.numeric(segTab$segVal))
out<-c(out,ploidy)
}
data.frame(out,stringsAsFactors = F)
}
normaliseMatrix<-function(signature_by_sample,sig_thresh=0.01)
{
norm_const<-colSums(signature_by_sample)
sample_by_signature<-apply(signature_by_sample,1,function(x){x/norm_const})
sample_by_signature<-apply(sample_by_signature,1,lower_norm,sig_thresh)
signature_by_sample<-t(sample_by_signature)
norm_const<-apply(signature_by_sample,1,sum)
sample_by_signature<-apply(signature_by_sample,2,function(x){x/norm_const})
signature_by_sample<-t(sample_by_signature)
signature_by_sample
}
lower_norm<-function(x,sig_thresh=0.01)
{
new_x<-x
for(i in 1:length(x))
{
if(x[i]<sig_thresh)
{
new_x[i]<-0
}
}
new_x
}
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
chrlen = readRDS("data/chrlen.RDS")
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org<- as(readRDS("data/organoid_exposures.rds"), 'matrix')
# rownames(org) <- paste0('Sample ', 1:nrow(org))
# names_orgs = readxl::read_xlsx("data/NewOrganoidNaming.xlsx")
names_orgs = read_csv("data/NewOrganoidNaming.csv")
natgen = natgen_metadata = list()
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
natgen[[1]] <- as.matrix(sig_data[,1:7])
createBarplot(natgen[[1]])
natgen_metadata[[1]] <- sig_data[,8:10]
natgen[[2]] <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
names(natgen_metadata) = names(natgen) = c('ExposuresNatGen', 'UpdatedExposures')
#------------ Only keep TCGA samples which are of good enough quality------------#
summary_ascat = read.table("data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
bool_tcga= lapply(natgen, function(i) grepl('TCGA', rownames(i)))
rm_na = function(df) !apply(df, 1, function(rw) all(is.na(rw)))
## modify the dataframes
for(version in 1:2){
rm_bad_samples = !(sapply(rownames(natgen[[version]])[bool_tcga[[version]]], give_short_names) %in% good_tcga)
natgen[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen[[version]] = natgen[[version]][rm_na(natgen[[version]]),]
natgen_metadata[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen_metadata[[version]] = natgen_metadata[[version]][rm_na(natgen_metadata[[version]]),]
}
rownames(natgen[[1]]) = as.character(sapply(rownames(natgen[[1]]), give_short_names))
#------------ add the non-TCGA samples to natgen2 ------------#
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
bool_tcga_metadata = lapply(natgen_metadata, function(i) grepl('TCGA', rownames(i))) ## re-compute
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!bool_tcga[[1]],])
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!bool_tcga[[1]],])
stopifnot(dim(natgen[[2]])[1] == dim(natgen_metadata[[2]])[1])
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
give_dendrogram_generalised = function(df, modify_labels=T, keep_only_PDO, plot_dendro=T){
if(keep_only_PDO & modify_labels){stop('Only one can be true: keep_only_PDO, modify_labels')}
x = hclust(dist(df))
if(modify_labels){
x$labels[!grepl("PDO", x$labels)] = ''
x$labels[grepl("PDO", x$labels)] = '*'
}
if(keep_only_PDO){
x$labels[!grepl("PDO", x$labels)] = ''
}
y = x
y$labels = gsub("Sample ", "PDO", x$labels)
# plot(x)
labelCol <- function(x) {
if (is.leaf(x)) {
## fetch label
label <- attr(x, "label")
## set label color to red for A and B, to blue otherwise
attr(x, "nodePar") <- list(lab.col="blue")
}
return(x)
}
d <- dendrapply(as.dendrogram(x), labelCol)
if(plot_dendro)  plot(d)
return(y)
}
dendroimputclr_all = give_dendrogram_generalised(as(compositions::clr(impute(all_natgen[[which_natgen]], 1e-2)), 'matrix'), modify_labels=F, keep_only_PDO = F)
impute = function(mat, inputation_value){
mat[mat == 0] = inputation_value
normalise_rw(mat)
}
dendroimputclr_all = give_dendrogram_generalised(as(compositions::clr(impute(all_natgen[[which_natgen]], 1e-2)), 'matrix'), modify_labels=F, keep_only_PDO = F)
all_natgen
all_natgen = lapply(natgen, function(i) rbind(i, org))
natgen_clr = lapply(natgen, function(i) as(clr(i), 'matrix'))
names(natgen_clr) = names(natgen)
organoid_metadata <- cbind.data.frame(study=rep('organoids', nrow(org_clr_robustzeroes)), age=NA, age.cat=NA)
rownames(organoid_metadata) <- rownames(org_clr_robustzeroes)
all_metadata <- lapply(natgen_metadata, function(i) rbind(i, organoid_metadata))
all_clr <- lapply(natgen_clr, function(i) rbind(i, org_clr_robustzeroes))
names(all_clr) = names(all_metadata) = names(all_natgen) =  names(natgen)
natgen_clr
dendroimputclr_all = give_dendrogram_generalised(as(compositions::clr(impute(all_natgen[[which_natgen]], 1e-2)), 'matrix'), modify_labels=F, keep_only_PDO = F)
which_natgen='UpdatedExposures'
dendroimputclr_all = give_dendrogram_generalised(as(compositions::clr(impute(all_natgen[[which_natgen]], 1e-2)), 'matrix'), modify_labels=F, keep_only_PDO = F)
dendroimputclrimpute_org <- give_dendrogram_generalised(as(compositions::clr(impute(all_natgen[[which_natgen]][grepl('PDO', rownames(all_natgen[[which_natgen]])),], 1e-2)), 'matrix'), modify_labels=F, keep_only_PDO = T, plot_dendro=F)
all_natgen
rownames(all_natgen)
rownames(all_natgen$UpdatedExposures)
all_natgen
give_short_names
as.character(sapply(rownames(natgen[[1]]), give_short_names))
natgen = natgen_metadata = list()
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
natgen[[1]] <- as.matrix(sig_data[,1:7])
createBarplot(natgen[[1]])
natgen_metadata[[1]] <- sig_data[,8:10]
natgen[[2]] <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
names(natgen_metadata) = names(natgen) = c('ExposuresNatGen', 'UpdatedExposures')
#------------ Only keep TCGA samples which are of good enough quality------------#
summary_ascat = read.table("data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
bool_tcga= lapply(natgen, function(i) grepl('TCGA', rownames(i)))
rm_na = function(df) !apply(df, 1, function(rw) all(is.na(rw)))
## modify the dataframes
for(version in 1:2){
rm_bad_samples = !(sapply(rownames(natgen[[version]])[bool_tcga[[version]]], give_short_names) %in% good_tcga)
natgen[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen[[version]] = natgen[[version]][rm_na(natgen[[version]]),]
natgen_metadata[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen_metadata[[version]] = natgen_metadata[[version]][rm_na(natgen_metadata[[version]]),]
}
rownames(natgen[[1]]) = as.character(sapply(rownames(natgen[[1]]), give_short_names))
#------------ add the non-TCGA samples to natgen2 ------------#
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
bool_tcga_metadata = lapply(natgen_metadata, function(i) grepl('TCGA', rownames(i))) ## re-compute
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!bool_tcga[[1]],])
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!bool_tcga[[1]],])
stopifnot(dim(natgen[[2]])[1] == dim(natgen_metadata[[2]])[1])
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
which_natgen = 'UpdatedSignatures'
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Organoid ', rownames(org_clr))
all_natgen = lapply(natgen, function(i) rbind(i, org))
natgen_clr = lapply(natgen, function(i) as(clr(i), 'matrix'))
names(natgen_clr) = names(natgen)
organoid_metadata <- cbind.data.frame(study=rep('organoids', nrow(org_clr_robustzeroes)), age=NA, age.cat=NA)
rownames(organoid_metadata) <- rownames(org_clr_robustzeroes)
all_metadata <- lapply(natgen_metadata, function(i) rbind(i, organoid_metadata))
all_clr <- lapply(natgen_clr, function(i) rbind(i, org_clr_robustzeroes))
names(all_clr) = names(all_metadata) = names(all_natgen) =  names(natgen)
natgen_clr$UpdatedExposures
rownames(natgen_clr$UpdatedExposures)
grepl('PDO', natgen_clr$UpdatedExposures)
sum(grepl('PDO', natgen_clr$UpdatedExposures))
give_dendrogram <- function(which_natgen){
rm_infinite <- apply(all_clr[[which_natgen]], 1, function(x) any(is.infinite(x)))
cat(which(rm_infinite), 'removed due to infinite values')
all_clr_clean <- all_clr[[which_natgen]][!rm_infinite,]
dendro_all <- as.dendrogram(hclust(dist(all_clr_clean)))
return(dendro_all)
}
plot_dendro = function(dendro_all, which_natgen, which_label="Symbol", return_tree=FALSE){
levels_study <- levels(factor(all_metadata[[which_natgen]][labels(dendro_all),'study']))
levels_study
which_level_organoids <- which(grepl('organoids', levels_study))
cols <- rep(NA, length(levels_study))
colour_organoid = 'blue' #'#88E9A2'
cols[which_level_organoids] <- colour_organoid
if(which_natgen == 'ExposuresNatGen'){
cols[-which_level_organoids] <- c('#FFA07A', '#FA8072', '#E9967A', '#F08080')
}else if(which_natgen == 'UpdatedExposures'){
cols[-which_level_organoids] <- c('#FFA07A')
}
labels_colors(dendro_all) <- cols[factor(all_metadata[[which_natgen]][labels(dendro_all),'study'])]
labels_org_bool <- labels_colors(dendro_all) == colour_organoid
if(which_label == "Symbol"){
labels(dendro_all)[labels_org_bool] <- rep('○', sum(labels_org_bool))#rep('●', sum(labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep('•', sum(!labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}else{
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}
cex_labels <- rep(1, length(labels_org_bool))
cex_labels[labels_org_bool] <- 0.9
dendro_all <- set(dendro_all, "labels_cex", cex_labels)
if(return_tree){
return(dendro_all)
}else{
plot(dendro_all, cex=0.4, cex.lab=4, main='Dendrogram based on the exposures\n(Aitchison distance)')
}
}
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
dendro_UpdatedExposures
plot(dendro_UpdatedExposures)
dend_data_inputclr <- dendro_data(dendroimputclr_all, type = "rectangle")
dend_data_inputclr$labels$label = as.character(dend_data_inputclr$labels$label)
dend_data_inputclr$labels$label[!grepl('PDO', dend_data_inputclr$labels$label)] = ""
p_v2 <- ggplot(dend_data_inputclr$segments) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend))+
# geom_text(data = dend_data$labels, aes(x, y, label = label),
#           hjust = 1, angle = 90, size = 3)+
geom_label_repel(data = dend_data_inputclr$labels, aes(x, y, label = gsub('Organoid ', '', label)),
hjust = 0, size = 3, vjust=0, nudge_y = -2)+
ylim(-3, 15)+
theme_bw()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
scale_x_continuous(expand = c(extra_expand, extra_expand))+
scale_y_continuous(expand = c(0.5, 0, 0.05, 0))
# print(p)
extra_expand=0
p_v2 <- ggplot(dend_data_inputclr$segments) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend))+
# geom_text(data = dend_data$labels, aes(x, y, label = label),
#           hjust = 1, angle = 90, size = 3)+
geom_label_repel(data = dend_data_inputclr$labels, aes(x, y, label = gsub('Organoid ', '', label)),
hjust = 0, size = 3, vjust=0, nudge_y = -2)+
ylim(-3, 15)+
theme_bw()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
scale_x_continuous(expand = c(extra_expand, extra_expand))+
scale_y_continuous(expand = c(0.5, 0, 0.05, 0))
# print(p)
heatmap_dendrogram_df_inputclr = t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendroimputclr_all)),rownames(all_natgen$UpdatedExposures))],])
extra_expand_v2 = .040
p2_inputclr = ggplot(melt(heatmap_dendrogram_df_inputclr), aes(x=Var2, y=value, fill=Var1))+geom_bar(stat='identity')+theme_bw()+
theme(axis.title.x=element_blank(),  legend.title=element_blank(),
legend.text=element_text(size=10),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),  legend.position = "bottom",
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank())+
scale_fill_brewer(palette="Dark2")+
scale_x_discrete(expand = c(extra_expand_v2, extra_expand_v2))+
guides(fill = guide_legend(nrow = 1))
grid.arrange(p_v2, p2_inputclr, heights=c(2,1))
dendroimputclrimpute_org <- give_dendrogram_generalised(as(compositions::clr(impute(all_natgen[[which_natgen]][grepl('PDO', rownames(all_natgen[[which_natgen]])),], 1e-2)), 'matrix'), modify_labels=F, keep_only_PDO = T, plot_dendro=F)
rm(list = ls())
source("../../cnsignatures/main_functions.R")
locationOfThisScript()
locationOfThisScript
normalizePath(sys.frame(i)$ofile)
normalizePath(sys.frame("../../cnsignatures/main_functions.R")$ofile)
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
getwd()
list.files()
source("../..other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../cnsignatures/main_functions.R")
source(Sys.readlink("../../cnsignatures/main_functions.R"))
Sys.readlink("../../cnsignatures/")
Sys.readlink("../../cnsignatures/")
source("/Users/morril01/Documents/PhD/other_repos/cnsignatures/main_functions.R")
source("/Users/morril01/Documents/PhD/other_repos/britroc-cnsignatures-bfb69cd72c50main_functions.R")
source("/Users/morril01/Documents/PhD/other_repos/britroc-cnsignatures-bfb69cd72c50/main_functions.R")
locationOfThisScript = function() # Function LocationOfThisScript returns the location of this .R script (may be needed to source other files in same dir)
{
this.file = NULL
# This file may be 'sourced'
for (i in -(1:sys.nframe())) {
if (identical(sys.function(i), base::source)) this.file = (normalizePath(sys.frame(i)$ofile))
}
if (!is.null(this.file)) return(dirname(this.file))
# But it may also be called from the command line
cmd.args = commandArgs(trailingOnly = FALSE)
cmd.args.trailing = commandArgs(trailingOnly = TRUE)
cmd.args = cmd.args[seq.int(from=1, length.out=length(cmd.args) - length(cmd.args.trailing))]
res = gsub("^(?:--file=(.*)|.*)$", "\\1", cmd.args)
# If multiple --file arguments are given, R uses the last one
res = tail(res[res != ""], 1)
if (0 < length(res)) return(dirname(res))
# Both are not the case. Maybe we are in an R GUI?
return(NULL)
}
this_path<-locationOfThisScript()
source(paste(this_path,"helper_functions.R",sep="/"))
this_path
this_path
source(paste(this_path,"helper_functions.R",sep="/"))
source(paste(this_path,"helper_functions.R",sep="/"))
source(Sys.readlink("../../cnsignatures/main_functions.R"))
source(("../../cnsignatures/main_functions.R"))
source("../../cnsignatures/helper_functions.R")
source("helper_functions.R")
bool_tcga
