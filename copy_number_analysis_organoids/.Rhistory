brnch_unpopulated = natgen$UpdatedExposures[ret[[2]],]
brnch_populated = natgen$UpdatedExposures[! (rownames(natgen$UpdatedExposures) %in% ret[[2]]),]
c(sum(grepl('organoids', rownames(brnch_unpopulated))),
sum(grepl('organoids', rownames(brnch_populated))))
c(sum(grepl('org', rownames(brnch_unpopulated))),
sum(grepl('org', rownames(brnch_populated))))
brnch_populated
rownames(brnch_populated)
all_clr
all_clr <- lapply(natgen_clr, function(i) rbind(i, org_clr_robustzeroes))
names(all_clr) = names(all_metadata) = names(natgen)
all_clr$UpdatedExposures
brnch_unpopulated = all_clr$UpdatedExposures[ret[[2]],]
brnch_populated = all_clr$UpdatedExposures[! (rownames(all_clr$UpdatedExposures) %in% ret[[2]]),]
c(sum(grepl('org', rownames(brnch_unpopulated))),
sum(grepl('org', rownames(brnch_populated))))
View(all_clr)
View(all_clr$UpdatedExposures)
c(sum(grepl('Organoid', rownames(brnch_unpopulated))),
sum(grepl('Organoid', rownames(brnch_populated))))
sum(grepl('Organoid', rownames(brnch_populated)))))
cat('Number of organoids in unpopulated and populated split:' ,
c(sum(grepl('Organoid', rownames(brnch_unpopulated))),
sum(grepl('Organoid', rownames(brnch_populated)))))
brnch_unpopulated
boxplot(brnch_unpopulated)
boxplot(brnch_populated)
head(melt(list(brnch_unpopulated, brnch_populated)))
ggplot(melt(list(brnch_unpopulated, brnch_populated)), aes(x=Var2, col=L1, y=value))+geom_boxplot()
ggplot(melt(list(brnch_unpopulated, brnch_populated)), aes(x=Var2, col=L1, group=L1, y=value))+geom_boxplot()
ggplot(melt(list(brnch_unpopulated, brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')
pca_from_projection$UpdatedExposures
df_prcomp_exposures
df_prcomp_exposures
which_natgen
rm(list = ls())
knitr::opts_chunk$set(cache = TRUE)
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
source("../../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org<- as(readRDS("data/organoid_exposures_Aug21.rds"), 'matrix')
rownames(org) <- paste0('Sample ', 1:nrow(org))
createBarplot(org, remove_labels = TRUE, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
#------------ Load ------------#
natgen = natgen_metadata = list()
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
natgen[[1]] <- as.matrix(sig_data[,1:7])
createBarplot(natgen[[1]])
natgen_metadata[[1]] <- sig_data[,8:10]
natgen[[2]] <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
names(natgen_metadata) = names(natgen) = c('ExposuresNatGen', 'UpdatedExposures')
#------------ Only keep TCGA samples which are of good enough quality------------#
summary_ascat = read.table("data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
bool_tcga= lapply(natgen, function(i) grepl('TCGA', rownames(i)))
rm_na = function(df) !apply(df, 1, function(rw) all(is.na(rw)))
## modify the dataframes
for(version in 1:2){
rm_bad_samples = !(sapply(rownames(natgen[[version]])[bool_tcga[[version]]], give_short_names) %in% good_tcga)
natgen[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen[[version]] = natgen[[version]][rm_na(natgen[[version]]),]
natgen_metadata[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen_metadata[[version]] = natgen_metadata[[version]][rm_na(natgen_metadata[[version]]),]
}
rownames(natgen[[1]]) = as.character(sapply(rownames(natgen[[1]]), give_short_names))
#------------ add the non-TCGA samples to natgen2 ------------#
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
bool_tcga_metadata = lapply(natgen_metadata, function(i) grepl('TCGA', rownames(i))) ## re-compute
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!bool_tcga[[1]],])
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!bool_tcga[[1]],])
stopifnot(dim(natgen[[2]])[1] == dim(natgen_metadata[[2]])[1])
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
cat('The percentage of zeros in every cohort is:\n')
zeros_percentage = lapply(list(organoids=list(org),
ExposuresNatGen=split(x = natgen[[1]], f = factor(natgen_metadata[[1]]$study)),
UpdatedExposures=split(x = natgen[[2]], f = factor(natgen_metadata[[2]]$study))),
function(j) lapply(j, function(i) paste0(signif(sum(i==0)/length(i)*100, 5), '%')))
names(zeros_percentage) = c('organoids', 'ExposuresNatGen', 'UpdatedExposures')
print(zeros_percentage)
# folder_natgen = "../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/manuscript_Rmarkdown/data/"
# folder_natgen_mod = "../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50_mod//manuscript_Rmarkdown/data/"
BriTROC_absolute_copynumber = readRDS("data/BriTROC_absolute_copynumber.rds")
BriTROC2_CN_features = readRDS("data/0_BRITROC_absolute_CN.rds")
organoids_absolute_copynumber = readRDS("data/organoid_absolute_CN.rds")
organoids_CN_features = extractCopynumberFeatures(organoids_absolute_copynumber)
BriTROC_CN_features = readRDS("data/BriTROC_CN_features.rds")
# Only selecting those which are TCGA
num_of_current_not_in_previous = sum(is.na(match(rownames(natgen[[2]])[bool_tcga[[2]]],
natgen[[1]])[bool_tcga[[1]]]))
num_of_previous_not_in_current = sum(is.na(match(rownames(natgen[[1]])[bool_tcga[[1]]],
rownames(natgen[[2]])[bool_tcga[[2]]])))
num_exposures_tcga_previous = length(rownames(natgen[[1]])[bool_tcga[[1]]]) ## Natgen exposures
num_exposures_tcga_current = length(rownames(natgen[[2]])[bool_tcga[[2]]]) ## new, from Ruben
which_natgen = 2
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Organoid ', rownames(org_clr))
pca_from_projection = prcomp_all = df_prcomp_exposures = list()
which_natgens = c('UpdatedExposures')
for(which_natgen in which_natgens){
prcomp_all[[which_natgen]] <- princomp(as(clr(natgen[[which_natgen]]), 'matrix'))
df_prcomp_exposures[[which_natgen]] <- data.frame(prcomp_all[[which_natgen]]$scores[,1:2], study=natgen_metadata[[which_natgen]]$study, labels=NA)
df_prcomp_exposures_org <- data.frame(predict(prcomp_all[[which_natgen]], (org_clr_robustzeroes))[,1:2], 'Organoid', rownames(org))
colnames(df_prcomp_exposures_org) <- c('Comp.1', 'Comp.2', 'study', 'labels')
df_prcomp_exposures[[which_natgen]] <- rbind(df_prcomp_exposures[[which_natgen]], df_prcomp_exposures_org)
df_prcomp_exposures[[which_natgen]]$labels <- gsub('Sample ', '', df_prcomp_exposures[[which_natgen]]$labels) ##here
myColors <- col_vector[1:length(unique(df_prcomp_exposures[[which_natgen]]$study))]
names(myColors) <- unique(df_prcomp_exposures[[which_natgen]]$study)
#ggthemr('flat dark')
#ggthemr_reset()
# set_swatch(myColors)
var_explained1 <- (prcomp_all[[which_natgen]]$sdev**2)/sum(prcomp_all[[which_natgen]]$sdev**2)
pca_from_projection[[which_natgen]] = ( ggplot(df_prcomp_exposures[[which_natgen]], aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures[[which_natgen]][!is.na(df_prcomp_exposures[[which_natgen]]$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw())
}
names(df_prcomp_exposures) = which_natgens
pca_from_projection[['UpdatedExposures_onlyTCGA']]= ggplot(df_prcomp_exposures[[which_natgen]][grepl('TCGA|Organoid',
rownames(df_prcomp_exposures[[which_natgen]])),],
aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures[[which_natgen]][grepl('TCGA|Organoid', rownames(df_prcomp_exposures[[which_natgen]])) & !is.na(df_prcomp_exposures[[which_natgen]]$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: only TCGA", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
grid.arrange(pca_from_projection[['UpdatedExposures']]+theme(legend.position = 'bottom'),
#pca_from_projection[[2]]+theme(legend.position = 'bottom'),
pca_from_projection[['UpdatedExposures_onlyTCGA']]+theme(legend.position = 'bottom'),
ncol=2)
selected_underrepresented_left <- natgen[[which_natgen]][which(df_prcomp_exposures$UpdatedExposures$Comp.1 < min(df_prcomp_exposures$UpdatedExposures[df_prcomp_exposures$UpdatedExposures$study == 'Organoid','Comp.1'])),]
grid.arrange(createBarplot(as(selected_underrepresented_left, 'matrix'), remove_labels = TRUE)+
ggtitle('Underrepresented (left)')+theme(legend.position = "bottom"),
createBarplot(org, remove_labels = TRUE)+ggtitle('Organoids')+theme(legend.position = "bottom"),
ncol=2)
par(mfrow=c(1,2))
for(i in 1:2){
barplot(prcomp_all[[1]]$loadings[,i], main='Loadings of the\nfirst principal component')
barplot(prcomp_all[[1]]$loadings[,i], main='Loadings of the\nsecond principal component')
}
natgen_clr = lapply(natgen, function(i) as(clr(i), 'matrix'))
names(natgen_clr) = names(natgen)
organoid_metadata <- cbind.data.frame(study=rep('organoids', nrow(org_clr_robustzeroes)), age=NA, age.cat=NA)
rownames(organoid_metadata) <- rownames(org_clr_robustzeroes)
all_metadata <- lapply(natgen_metadata, function(i) rbind(i, organoid_metadata))
all_clr <- lapply(natgen_clr, function(i) rbind(i, org_clr_robustzeroes))
names(all_clr) = names(all_metadata) = names(natgen)
give_dendrogram <- function(which_natgen){
rm_infinite <- apply(all_clr[[which_natgen]], 1, function(x) any(is.infinite(x)))
cat(which(rm_infinite), 'removed due to infinite values')
all_clr_clean <- all_clr[[which_natgen]][!rm_infinite,]
dendro_all <- as.dendrogram(hclust(dist(all_clr_clean)))
return(dendro_all)
}
plot_dendro = function(dendro_all, which_natgen){
levels_study <- levels(factor(all_metadata[[which_natgen]][labels(dendro_all),'study']))
levels_study
which_level_organoids <- which(grepl('organoids', levels_study))
cols <- rep(NA, length(levels_study))
colour_organoid = 'blue' #'#88E9A2'
cols[which_level_organoids] <- colour_organoid
if(which_natgen == 'ExposuresNatGen'){
cols[-which_level_organoids] <- c('#FFA07A', '#FA8072', '#E9967A', '#F08080')
}else if(which_natgen == 'UpdatedExposures'){
cols[-which_level_organoids] <- c('#FFA07A')
}
labels_colors(dendro_all) <- cols[factor(all_metadata[[which_natgen]][labels(dendro_all),'study'])]
labels_org_bool <- labels_colors(dendro_all) == colour_organoid
labels(dendro_all)[labels_org_bool] <- rep('○', sum(labels_org_bool))#rep('●', sum(labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep('•', sum(!labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
cex_labels <- rep(1, length(labels_org_bool))
cex_labels[labels_org_bool] <- 0.9
dendro_all <- set(dendro_all, "labels_cex", cex_labels)
plot(dendro_all, cex=0.4, cex.lab=4, main='Dendrogram based on the exposures\n(Aitchison distance)')
}
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures')
# taken from https://stackoverflow.com/questions/49336393/r-how-to-extract-all-labels-in-a-certain-node-of-a-dendrogram
accumulator <- list();
myleaves <- function(anode){
if(!is.list(anode))return(attr(anode,"label"))
accumulator[[length(accumulator)+1]] <<- (reduce(lapply(anode,myleaves),c))
}
myleaves(dendro_UpdatedExposures);
ret <- rev(accumulator);
labels(dendro_UpdatedExposures)[!(labels(dendro_UpdatedExposures) %in% ret[[2]])] = ""
labels(dendro_UpdatedExposures)[(labels(dendro_UpdatedExposures) %in% ret[[2]])] = "."
plot(dendro_UpdatedExposures)
brnch_unpopulated = all_clr$UpdatedExposures[ret[[2]],]
brnch_populated = all_clr$UpdatedExposures[! (rownames(all_clr$UpdatedExposures) %in% ret[[2]]),]
cat('Number of organoids in unpopulated and populated split:' ,
c(sum(grepl('Organoid', rownames(brnch_unpopulated))),
sum(grepl('Organoid', rownames(brnch_populated)))))
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')
ggplot(df_prcomp_exposures$UpdatedExposures, aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures$UpdatedExposures[!is.na(df_prcomp_exposures$UpdatedExposures$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
brnch_unpopulated
df_prcomp_exposures$UpdatedExposures
rownames(df_prcomp_exposures$UpdatedExposures)
rownames(df_prcomp_exposures$UpdatedExposures)brnch_unpopulated
brnch_unpopulated
sapply(rownames(df_prcomp_exposures$UpdatedExposures) %in% brnch_unpopulated)
rownames(df_prcomp_exposures$UpdatedExposures) %in% brnch_unpopulated
rownames(df_prcomp_exposures$UpdatedExposures)
brnch_unpopulated
ret[[2]]
rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]
head(cbind(df_prcomp_exposures$UpdatedExposures, rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]))
ggplot(cbind(df_prcomp_exposures$UpdatedExposures, col=rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures$UpdatedExposures[!is.na(df_prcomp_exposures$UpdatedExposures$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
head(cbind(df_prcomp_exposures$UpdatedExposures, col=rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]))
ggplot(cbind(df_prcomp_exposures$UpdatedExposures, col=rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point()
grid.arrange(
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split'),
ggplot(cbind(df_prcomp_exposures$UpdatedExposures, in_main_group=rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
)
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')
ggplot(cbind(df_prcomp_exposures$UpdatedExposures, in_main_group=rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])
rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]
c('Populated', 'Unpopulated')[rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]
c('Populated', 'Unpopulated')[rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]]
rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]]
c('Populated', 'Unpopulated')[as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split'),
grid.arrange(
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split'),
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,in_main_group=c('Populated', 'Unpopulated')[as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()
)
as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])
c('Populated', 'Unpopulated')[as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]
grid.arrange(
ggplot(melt(list(Unpopulated=brnch_unpopulated, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split'),
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,in_main_group=c('Unpopulated', 'Populated')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()
)
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,in_main_group=c('Unpopulated', 'Populated')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]),
aes(x=Comp.1, y=Comp.2, col=col))+
geom_point()
head(cbind(df_prcomp_exposures$UpdatedExposures,in_main_group=c('Unpopulated', 'Populated')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]))
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,in_main_group=c('Unpopulated', 'Populated')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% ret[[2]])]),
aes(x=Comp.1, y=Comp.2, col=in_main_group))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()
ret[[2]]
ret[[2]]
plot_ggplot_colours = function(vector_colours){
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,group=vector_colours,
aes(x=Comp.1, y=Comp.2, col=group)))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()+theme(legend.position = "bottom")
}
grid.arrange(
ggplot(melt(list(underrepresented=brnch_underrepresented, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')+theme(legend.position = "bottom"),
plot_ggplot_colours(c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)]),
ncol=2
)
c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)]
brnch_underrepresented = all_clr$UpdatedExposures[underrepresented_labels,]
brnch_populated = all_clr$UpdatedExposures[! (rownames(all_clr$UpdatedExposures) %in% underrepresented_labels),]
# taken from https://stackoverflow.com/questions/49336393/r-how-to-extract-all-labels-in-a-certain-node-of-a-dendrogram
accumulator <- list();
myleaves(dendro_UpdatedExposures);
myleaves(dendro_UpdatedExposures);
ret <- rev(accumulator);
ret <- rev(accumulator);
underrepresented_labels = ret[[2]]
labels(dendro_UpdatedExposures)[!(labels(dendro_UpdatedExposures) %in% underrepresented_labels)] = ""
labels(dendro_UpdatedExposures)[(labels(dendro_UpdatedExposures) %in% underrepresented_labels)] = "."
plot_ggplot_colours = function(vector_colours){
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,group=vector_colours,
aes(x=Comp.1, y=Comp.2, col=group)))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()+theme(legend.position = "bottom")
}
brnch_underrepresented = all_clr$UpdatedExposures[underrepresented_labels,]
brnch_populated = all_clr$UpdatedExposures[! (rownames(all_clr$UpdatedExposures) %in% underrepresented_labels),]
brnch_underrepresented = all_clr$UpdatedExposures[underrepresented_labels,]
underrepresented_labels
underrepresented_labels = ret[[2]]
underrepresented_labels
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
# taken from https://stackoverflow.com/questions/49336393/r-how-to-extract-all-labels-in-a-certain-node-of-a-dendrogram
accumulator <- list();
myleaves <- function(anode){
if(!is.list(anode))return(attr(anode,"label"))
accumulator[[length(accumulator)+1]] <<- (reduce(lapply(anode,myleaves),c))
}
ret <- rev(accumulator);
underrepresented_labels = ret[[2]]
labels(dendro_UpdatedExposures)[!(labels(dendro_UpdatedExposures) %in% underrepresented_labels)] = ""
underrepresented_labels
dendro_UpdatedExposures
label_both(dendro_UpdatedExposures)
labels(dendro_UpdatedExposures)
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
dendro_UpdatedExposures
labels(dendro_UpdatedExposures)
# taken from https://stackoverflow.com/questions/49336393/r-how-to-extract-all-labels-in-a-certain-node-of-a-dendrogram
accumulator <- list();
myleaves <- function(anode){
if(!is.list(anode))return(attr(anode,"label"))
accumulator[[length(accumulator)+1]] <<- (reduce(lapply(anode,myleaves),c))
}
myleaves(dendro_UpdatedExposures);
ret <- rev(accumulator);
ret
underrepresented_labels = ret[[2]]
labels(dendro_UpdatedExposures)[!(labels(dendro_UpdatedExposures) %in% underrepresented_labels)] = ""
labels(dendro_UpdatedExposures)[(labels(dendro_UpdatedExposures) %in% underrepresented_labels)] = "."
brnch_underrepresented = all_clr$UpdatedExposures[underrepresented_labels,]
brnch_populated = all_clr$UpdatedExposures[! (rownames(all_clr$UpdatedExposures) %in% underrepresented_labels),]
cat('Number of organoids in underrepresented and populated split:' ,
c(sum(grepl('Organoid', rownames(brnch_underrepresented))),
sum(grepl('Organoid', rownames(brnch_populated)))))
grid.arrange(
ggplot(melt(list(underrepresented=brnch_underrepresented, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')+theme(legend.position = "bottom"),
plot_ggplot_colours(vector_colours = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)]),
ncol=2
)
plot_ggplot_colours(vector_colours = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)])
vector_colours = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)]
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,group=vector_colours,
aes(x=Comp.1, y=Comp.2, col=group)))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()+theme(legend.position = "bottom")
plot_ggplot_colours = function(vector_colours){
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,group=vector_colours),
aes(x=Comp.1, y=Comp.2, col=group))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()+theme(legend.position = "bottom")
}
grid.arrange(
ggplot(melt(list(underrepresented=brnch_underrepresented, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')+theme(legend.position = "bottom"),
plot_ggplot_colours(vector_colours = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)]),
ncol=2
)
plot_ggplot_colours = function(vector_colours, shape=NULL, vector_shape=NULL){
if(!is.null(shape)){
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,group=vector_colours, shpe = vector_shape),
aes(x=Comp.1, y=Comp.2, col=group, shape=vector_shape))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()+theme(legend.position = "bottom")
}
ggplot(cbind(df_prcomp_exposures$UpdatedExposures,group=vector_colours),
aes(x=Comp.1, y=Comp.2, col=group))+
geom_point() +
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen, "\n groups from dendrogram"))+
theme_bw()+theme(legend.position = "bottom")
}
grid.arrange(
ggplot(melt(list(underrepresented=brnch_underrepresented, Populated=brnch_populated)), aes(x=Var2, col=L1, group=interaction(L1,Var2), y=value))+geom_boxplot()+
ggtitle('CLR of each signature, on either side of the split')+theme(legend.position = "bottom"),
plot_ggplot_colours(vector_colours = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)]),
ncol=2
)
org
all_natgen = lapply(natgen, function(i) rbind(natgen, org))
names(all_clr) = names(all_metadata) = names(all_natgen) =  names(natgen)
all_natgen
natgen
all_natgen = lapply(natgen, function(i) rbind(natgen, org))
all_natgen
natgen$ExposuresNatGen
all_natgen = lapply(natgen, function(i) rbind(i, org))
all_natgen
plot_ggplot_colours(vector_shape = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)],
vector_colours = all_natgen$UpdatedExposures[,'S5'])
plot_ggplot_colours(vector_shape = c('Populated', 'underrepresented')[1+as.numeric(rownames(df_prcomp_exposures$UpdatedExposures) %in% underrepresented_labels)],
vector_colours = all_natgen$UpdatedExposures[,'s5'])
all_natgen
ilr(all_natgen$UpdatedExposures)
rownames(xv)
rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels
head(cbind(ilr(all_natgen$UpdatedExposures), bool_underrepresented = as.numeric(rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels)))
ilr(all_natgen$UpdatedExposures)
add_colnames = function(i){
colnames(i) = paste0('c', 1:ncol(i))
i
}
head(cbind(add_colnames(ilr(all_natgen$UpdatedExposures)), bool_underrepresented = as.numeric(rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels)))
glm(formula = bool_underrepresented ~ c1+c2+c3+c4+c5+c6,
family=binomial(),
data = cbind(add_colnames(ilr(all_natgen$UpdatedExposures)),
bool_underrepresented = as.numeric(rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels)))
glm(formula = bool_underrepresented ~ c1+c2+c3+c4+c5+c6,
family=binomial(),
data = cbind.data.frame(add_colnames(ilr(all_natgen$UpdatedExposures)),
bool_underrepresented = as.numeric(rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels)))
a = glm(formula = bool_underrepresented ~ c1+c2+c3+c4+c5+c6,
family=binomial(),
data = cbind.data.frame(add_colnames(ilr(all_natgen$UpdatedExposures)),
bool_underrepresented = as.numeric(rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels)))
a$fitted.values
df_logistic = cbind.data.frame(add_colnames(ilr(all_natgen$UpdatedExposures)),
bool_underrepresented = as.numeric(rownames(all_natgen$UpdatedExposures) %in% underrepresented_labels))
a = glm(formula = bool_underrepresented ~ c1+c2+c3+c4+c5+c6,
family=binomial(),
data = df_logistic)
cbind(a$fitted.values, df_logistic$bool_underrepresented)
plot(cbind(a$fitted.values, df_logistic$bool_underrepresented))
df_logistic$bool_underrepresented
df_logistic[as.logical(df_logistic$bool_underrepresented),]
all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),]
apply(all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),], 1, funtion(i) any(i == 0))
apply(all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0))
sum(apply(all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))
sum(df_logistic$bool_underrepresented)
sum(1-df_logistic$bool_underrepresented)
sum(apply(all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))/sum(df_logistic$bool_underrepresented)
sum(apply(all_natgen$UpdatedExposures[!as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))/sum(1-df_logistic$bool_underrepresented)
cat('Fraction of samples with any zero in underrepresented: ', sum(apply(all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))/sum(df_logistic$bool_underrepresented),
'Fraction of samples with any zero in represented: ',
sum(apply(all_natgen$UpdatedExposures[!as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))/sum(1-df_logistic$bool_underrepresented)
)
cat('Fraction of samples with any zero in underrepresented: ', sum(apply(all_natgen$UpdatedExposures[as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))/sum(df_logistic$bool_underrepresented),
'\nFraction of samples with any zero in represented: ',
sum(apply(all_natgen$UpdatedExposures[!as.logical(df_logistic$bool_underrepresented),], 1, function(i) any(i == 0)))/sum(1-df_logistic$bool_underrepresented)
)
brnch_underrepresented
brnch_underrepresente_exposures = all_natgen$UpdatedExposures[underrepresented_labels,]
brnch_populated_exposures = all_natgen$UpdatedExposures[! (rownames(all_clr$UpdatedExposures) %in% underrepresented_labels),]
createBarplot(brnch_underrepresente_exposures)
createBarplot(brnch_populated_exposures)
