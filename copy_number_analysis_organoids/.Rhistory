<<<<<<< HEAD
hidden_values<-rep(NA,L)
temp<-hidden_values[1]<-s1
for (i in 2:L){
hidden_values[i]<-sample(S,size=1,replace=TRUE,prob=A[temp,])
temp<-hidden_values[i]
}
hidden_values
## Emitted values
#sequences of emitted states
emitted_values<-rep(NA,L)
for (i in 1:L){
emitted_values[i]<-sample(V,size=1,replace=TRUE,prob=B[hidden_values[i],])
}
emitted_values
plot(emitted_values, type='h')
## Plot the resulting sequences of hidden and emitted states on the same graph.
#plots sequences of hidden and emitted states on the same graph
#pdf("Graph1.pdf")
opar <- par(no.readonly = TRUE)
par(mar = c(4, 4.1, 4.8, 2.1))
plot(emitted_values,type="h",xlim=c(0,115),xlab="",xaxt="n",ylab="",col='blue',lwd=1.5)
lines(hidden_values,col='red',lwd=2,type = "h")
axis(1, at = seq(0, 115, by = 10))
axis(1, at = seq(0, 115, 5), labels = NA)
title(xlab = "Index",font.lab=2,mgp = c(2.5, 1, 0))    # Add x-axis text
title(ylab = "Sequence of state",font.lab=2,mgp = c(2.5, 1, 0))    # Add y-axis text
legend(x="top", inset=c(0, -0.3),
legend = c("emitted state","hidden state"),col=c("blue","red"),lwd=c(1.5,2),xpd=TRUE, horiz = TRUE)
#creates a csv file for 115 sequences
data<-data.frame(cbind(hidden_values,emitted_values))
forward_algorithm<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
alpha[1,]<-initial_distribution*emission_matrix[,visible_data[1]]
for (i in 2:(no_emitted_values)){
transitted<-alpha[(i-1),] %*% transition_matrix
alpha[i,]<-transitted*emission_matrix[,visible_data[i]]
}
return(alpha)
}
# forward_algorithm(values$emitted_values,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
forward_algorithm(emitted_values,A,B,mu_naught)
#Log likelihood of GC sequence under the model in (1)
forward_algorithm_scaled<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(unlist(log_L))
}
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
emitted_sequences <- c(1,1,2,4,5)
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n_arg <- c_n
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)+1
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
alpha_hat
baum_welch<-function(emitted_sequences,hidden_values){
#initialization
mu_0<-c(0.5,0.5)
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
#iteration
for (t in 1:N){
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
E_nij<-matrix(0,2,2)
for (m in 1:N){
E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
}
trans_mat<-apply(E_nij,1,function(x) x/colSums(E_nij))
emission_mat<-rep(NA,1)
}
#termination
}
# E_nij<-matrix(0,2,2)
# for (m in 1:N){
#   E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
# }
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
## sum the number of times that we see the transition from k to l in the observed data
sum_over_j_i <- matrix(NA, ncol=ncol(alpha_hat), nrow=length(emitted_sequences))
sum_over_j_i
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
f[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
length(emitted_sequences)
sum(sapply(1:(length(emitted_sequences)-1)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
ncol(alpha_hat)
(length(emitted_sequences)-1)
sum(sapply(1:(length(emitted_sequences)-1), function(i)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
visible_data=rep(1,5)
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
beta_hat
alpha_hat
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sum(sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]}))
}
}
A
alpha_hat
alpha_hat[length(emitted_sequences]
alpha_hat[length(emitted_sequences)]
alpha_hat[length(emitted_sequences),]
A
onesigma <- rbind(c(1694, 1726, 28.90),
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma
head(melt(onesigma))
require(reshape2)
head(melt(onesigma))
head(melt(onesigma)onesigma)
onesigma
colnames(onesigma) <- c('start', 'end', 'onesigma')
require(ggplot2)
ggplot(onesigma, aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
data.frame(onesigma)
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(xmin=start, xend=end, ymin=0, yend=onesigma))+geom_ribbon()
onesigma
onesigma[1,'start']:onesigma[1,'end']
lapply(1:nrow(onesigma), function(i) (onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) rbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))_
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma'])))
onesigma
head(onesigma)
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
ggplot(data.frame(onesigma), aes(xmin=start, x=end, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, y=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), col=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), fill=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, fill=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_step()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_errorbar()
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library('GEOquery')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library('GEOquery')
gse <- getGEO("GSE165897", GSEMatrix = TRUE)
show(gse)
gse$`GSE165897-GPL16791_series_matrix.txt.gz`
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$taxid_ch1
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$geo_accession
filePaths = getGEOSuppFiles("GSE165897")
pvals_diagRE_DMDL_nonexo_SP_adj
pvals_fullRE_DMSL_nonexo_SP_adj
# rstudioapi() is not allowed in running shiny apps
# setwd(dirname(rstudioapi::getSourceEditorContext()$path)) ## set working directory
rm(list = ls()) ## clear objects
library(visNetwork) ## interactive network visualisation package
library(viridisLite) ## colour package
set.seed(234) # 'random' number generator
version = '' # default
metadata_file = paste0("in_files/metadata", version, ".txt")
edges_file = paste0("in_files/dataframe_edges", version, ".txt")
out_file = paste0("html_files", version, ".html")
## Reading in data files
# note: source files (metadata.txt, dataframe_edges.txt) need identical name entries (ordering doesn't matter)
metadata = read.table(metadata_file, stringsAsFactors = FALSE, sep = "\t", comment.char = "#", quote = '"')
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(devtools)
library(gridExtra)
# install('~/software/QDNAseqmod/') ## I have had to modify DESCRIPTION and added "mod" to its name
library(QDNAseqmod)
library(ggplot2)
library(reshape2)
segs <- readRDS("data/20220511BH_ascites_absoluteCN_bestfit.rds")
segs@phenoData@data$name
source("../../../other_repos/britroc-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../../other_repos/britroc-cnsignatures-bfb69cd72c50/helper_functions.R")
source("helper_functions.R")
component_parameters = readRDS("../../britroc-cnsignatures-bfb69cd72c50/data/component_parameters.rds")
feat_sig_mat = readRDS("../../britroc-cnsignatures-bfb69cd72c50/data/feat_sig_mat.rds")
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
sig_data <- as.matrix(sig_data[,1:7])
recompute_exposures <- F
if(recompute_exposures){
features <- extractCopynumberFeatures(segs)
SxC <- generateSampleByComponentMatrix(CN_features = features)
# sigs_ascites <- t(quantifySignaturesLM(SxC, feat_sig_mat, sig_thresh=0))
sigs_ascites <- t(quantifySignatures(SxC, feat_sig_mat))
rownames(sigs_ascites) <- gsub("_", "-", rownames(sigs_ascites))
saveRDS(sigs_ascites, "robjects/sigs_ascites.RDS")
}else{
sigs_ascites <- readRDS("robjects/sigs_ascites.RDS")
}
## For one of the organoids (PDO11), use the previous ascites exposures that Geoff computed
previous_ascites <- readRDS("../copy_number_analysis_organoids/robjects/fig4_ascites.RDS")
sigs_ascites['14369.A004',] = unlist(previous_ascites[which(previous_ascites$sample == 'PDO11') - 1,-c(1,9,10)])
## read the exposures from the organoids
exposures_orgs <- readRDS("../copy_number_analysis_organoids/robjects/exposures.RDS")
rownames(sigs_ascites) %in% segs@phenoData@data$name
segs@phenoData@data$name %in% rownames(sigs_ascites)
rownames(sigs_ascites)[rownames(sigs_ascites) == "16421.D705tp-D501tp"] =  "16421.D705-D501"
rownames(sigs_ascites)[rownames(sigs_ascites) == "16421.D705tp-D503tp"] = "16421.D705-D503"
previous_match <- F
if(previous_match){
ascc <- readxl::read_excel("data/AscitesSLXforOrganoidProject.xlsx")
ascc
sigs_ascites
gsub("*.[.]", "", rownames(sigs_ascites))
# organoidsMatched <- ascc$Derived_organoid[match(gsub(".*[.]","", rownames(sigs_ascites)), ascc$sWGS_barcode)]
###' BELOW:::: using the previous name, which is the correct match of ascites and PDO
###' i.e. the first three columns are the correct match, but the names for the
###' ascites are matched to the PDO number in INCORRECT_PREVIOUS_ORGANOID_NAME
organoidsMatched <- ascc$INCORRECT_PREVIOUS_ORGANOID_NAME[match(rownames(sigs_ascites), paste0(ascc$sWGS_SLX, '.', ascc$sWGS_barcode))]
###### BELOW::: it leads to an incorrect match
# organoidsMatched <- ascc$Derived_organoid[match(rownames(sigs_ascites), paste0(ascc$sWGS_SLX, '.', ascc$sWGS_barcode))]
add_to_figs <- ''
}else{
## using my final matching
add_to_figs <- '_latest'
ascc <- readxl::read_excel("data/matching_ascites_samples_Lena.xlsx")
organoidsMatched <- ascc$Derived_organoid[match(rownames(sigs_ascites), paste0(ascc$sWGS_SLX, '.', ascc$sWGS_barcode))]
}
rownames(sigs_ascites)[is.na(organoidsMatched)]
sigs_ascites <- sigs_ascites[!is.na(organoidsMatched),]
organoidsMatched <- organoidsMatched[!is.na(organoidsMatched)]
exposures_orgs[organoidsMatched,]
exp2 <- exposures_orgs[organoidsMatched,]
rownames(exp2)[duplicated(rownames(exp2))] <- paste0(rownames(exp2)[duplicated(rownames(exp2))], '_2')
sigs_ascites
sigs_ascites
make_unique <- function(i){
for(j in unique(i)){
if(sum(i == j) > 1){
i[i == j] = paste0((i[i == j]), '_', 1:(sum(i == j)))
}
}
i
}
make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs <- df_ascites_orgs[!(df_ascites_orgs[,'OVO4'] == '466_1'),] ## remove this pair due to bad quality (underpowered)
df_ascites_orgs$OVO4 <- gsub("_1", " (1)", df_ascites_orgs$OVO4)
df_ascites_orgs$OVO4 <- gsub("_2", " (2)", df_ascites_orgs$OVO4)
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
sigs_ascites
organoidsMatched
organoidsMatched
sigs_ascites
organoidsMatched
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
org=organoidsMatched,
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs <- df_ascites_orgs[!(df_ascites_orgs[,'OVO4'] == '466_1'),] ## remove this pair due to bad quality (underpowered)
df_ascites_orgs$OVO4 <- gsub("_1", " (1)", df_ascites_orgs$OVO4)
df_ascites_orgs$OVO4 <- gsub("_2", " (2)", df_ascites_orgs$OVO4)
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org'))
df_ascites_orgs
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
org=organoidsMatched,
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
org=organoidsMatched,
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
organoidsMatched
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs$org = organoidsMatched
df_ascites_orgs
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs$org = organoidsMatched
df_ascites_orgs <- df_ascites_orgs[!(df_ascites_orgs[,'OVO4'] == '466_1'),] ## remove this pair due to bad quality (underpowered)
df_ascites_orgs$OVO4 <- gsub("_1", " (1)", df_ascites_orgs$OVO4)
df_ascites_orgs$OVO4 <- gsub("_2", " (2)", df_ascites_orgs$OVO4)
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
saveRDS(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org')), file = "robjects/ascites_organoid_exposures.RDS")
=======
ch2 <- ComplexHeatmap::Heatmap(cor_CN_genes_of_interest_clade[[2]], cluster_columns = F, cluster_rows = F,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(cor_CN_genes_of_interest_clade[[2]][i, j], 1), x, y)
}, column_title = as.character(unique(dendrograminputclr))[2])
ch3 <- ComplexHeatmap::Heatmap(cor_CN_genes_of_interest_clade[[3]],
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(cor_CN_genes_of_interest_clade[[2]][i, j], 1), x, y)
})
ch1+ch2
plot(as.vector(cor_CN_genes_of_interest_clade[[1]]), as.vector(cor_CN_genes_of_interest_clade[[2]]))
abline(coef = c(0,1), lty='dashed')
## correlation of the most variable genes
cor_CN_genes_most_var <- cor(t(all_cn[order(var_all_cn, decreasing = T)[1:100],]))
ComplexHeatmap::Heatmap(cor_CN_genes_most_var)
ggplot(melt(all_cn_subset_GoI['MYC',]), aes(x=value))+geom_density()+#geom_vline(xintercept = all_cn_subset_GoI['MYC',1])
geom_segment(aes(x = value, xend=value, y=-Inf, yend=Inf), alpha=0.2)+theme_bw()+scale_x_continuous(trans = "log2")
umap_genes_GoI <- umap(t(all_cn_subset_GoI))
df_umap_selectedgenes <- cbind.data.frame(umap_genes_GoI$layout,
sample=colnames(all_cn_var),
clade=as.character(dendrograminputclr[match(colnames(all_cn_var), names(dendrograminputclr))]),
MYC=unlist(all_cn_var['MYC',]),
BRCA1=unlist(all_cn_var['BRCA1',]),
BRCA2=unlist(all_cn_var['BRCA2',])
)
ggplot(df_umap_selectedgenes,
aes(x=`1`, y=`2`, label=sample))+
geom_point( alpha=0.2, aes( color=clade, size=BRCA1))+
theme_bw()
umap_genes2 <- umap((all_cn_subset_GoI))
plot(umap_genes$layout)
plot(umap_genes2$layout) ## ??? looks very weird
give_umap_per_chrom <- function(chrom){
dta <- t(all_cn_var[ag_subsetchrom$seq_name == chrom,])
dta <- dta[,!grepl("NA.", colnames(dta))]
na_idx <- which(colnames(dta) == "NA")
if(length(na_idx)>0)  dta <- dta[,-na_idx]
if(!is.null(dim(dta))){
.umap_res <- umap(dta)
return(cbind.data.frame(.umap_res$layout,
sample=colnames(all_cn_var),
clade=as.character(dendrograminputclr[match(colnames(all_cn_var), names(dendrograminputclr))]),
MYC=unlist(all_cn_var['MYC',]),
BRCA1=unlist(all_cn_var['BRCA1',]),
BRCA2=unlist(all_cn_var['BRCA2',]))
)
}else{
NA
}
}
pdf("figures/umap_segments_per_chrom.pdf", width = 4.2, height = 3)
sapply(gtools::mixedsort(unique(ag_subsetchrom$seq_name)), function(chrom_it){
.umap <-  give_umap_per_chrom(chrom_it)
cat('Chromosome ', chrom_it, '\n')
if(!is.na(.umap)){
print(ggplot(.umap,
aes(x=`1`, y=`2`, label=sample))+
geom_point( alpha=0.2, aes( color=clade, size=MYC))+
theme_bw()+ggtitle(paste0('Chromosome ', chrom_it)))
}else{
print(ggplot()+ggtitle(paste0('Chromosome ', chrom_it)))
}
})
dev.off()
system("open figures")
##----- multiple regression to see which genes determine the two classes
# cor_CN_genes_of_interest_clade <- lapply(as.character(unique(dendrograminputclr)), function(clade_lab){
#   cor(remove_cols_with_no_variance(
all_cn_var_clades <- all_cn_var[,!(is.na(dendrograminputclr))]
dendrograminputclr_no_na <- dendrograminputclr[!(is.na(dendrograminputclr))]
dim(all_cn_var_clades)
length(dendrograminputclr_no_na)
all_cn_var_clades_df <- (data.frame( dendrograminputclr_no_na, t(all_cn_var_clades)))
all_cn_var_clades_df[1:4,1:4]
all_cn_var_clades_df$dendrograminputclr_no_na <- factor(all_cn_var_clades_df$dendrograminputclr_no_na)
all_cn_var_clades_df_bin <- cbind.data.frame(dendrograminputclr_no_na=all_cn_var_clades_df[,1], apply(all_cn_var_clades_df[,-1], 2, function(i) as.numeric(i<2)))
dim(all_cn_var_clades_df)
dim(all_cn_var_clades_df_bin)
data_for_SVM <- all_cn_var_clades_df
data_for_SVM <- all_cn_var_clades_df_bin
dendrograminputclr_no_na
training_set_idx <- sample(1:nrow(data_for_SVM), size = floor(.7*nrow(data_for_SVM)))
training_set = data_for_SVM[training_set_idx,]
validation_set = data_for_SVM[!(1:nrow(data_for_SVM) %in% training_set_idx),]
library(e1071)
library(caret)
var_genes <- apply(training_set, 2, var)
subset_cols <- c(1, order(var_genes[-1], decreasing = T)[1:1000]) ## selecting the top X most variable genes #1:ncol(training_set)
length(subset_cols)
svmfit = svm(dendrograminputclr_no_na ~ ., data = training_set[,subset_cols], kernel = "linear", cost = 10, scale = FALSE)
print(svmfit)
# pheatmap::pheatmap(svmfit$SV)
# pheatmap::pheatmap(svmfit$coef0)
validation_predicted = predict(svmfit, validation_set[,subset_cols])
confusionMatrix(validation_predicted, validation_set$dendrograminputclr_no_na)
dim(svmfit$coefs)
dim(svmfit$SV)
order_coefs_svm <- order(svmfit$coefs, decreasing = T)
order_coefs_svm
colnames(training_set)
ggplot(all_cn_var_clades_df[,c('dendrograminputclr_no_na', 'MYC')], aes(x=dendrograminputclr_no_na, y = MYC))+
geom_boxplot()+geom_jitter()+scale_y_continuous(trans = "log2")+theme_bw()
ggplot(all_cn_var_clades_df[,c('dendrograminputclr_no_na', 'CCNE1')], aes(x=dendrograminputclr_no_na, y = CCNE1))+
geom_boxplot()+geom_jitter()+scale_y_continuous(trans = "log2")+theme_bw()
ggplot(all_cn_var_clades_df[,c('dendrograminputclr_no_na', 'CDKN2D')], aes(x=dendrograminputclr_no_na, y = CDKN2D))+
geom_boxplot()+geom_jitter()+scale_y_continuous(trans = "log2")+theme_bw()
## ttest between the two groups
idx_s3 <- (all_cn_var_clades_df$dendrograminputclr_no_na == "S3-rich")
idx_s4 <- (all_cn_var_clades_df$dendrograminputclr_no_na == "S4-rich")
ttests_between_groups <- sapply(2:ncol(all_cn_var_clades_df), function(gene_idx){
t.test(all_cn_var_clades_df[idx_s3,gene_idx], all_cn_var_clades_df[idx_s4,gene_idx])
})
ttests_between_groups[,1]
dim(ttests_between_groups)
## pval
order_pval_ttest <- order(unlist(ttests_between_groups[3,]))
order_pval_ttest
colnames(all_cn_var_clades_df)[-1][order_pval_ttest[1:100]]
plot(unlist(ttests_between_groups[1,]),
-log10(unlist(ttests_between_groups[3,]))) ## volcano plot
genes_ttest_clades <- cbind.data.frame(tstat=unlist(ttests_between_groups[1,]),
minlogpval=-log10(unlist(ttests_between_groups[3,])),
minlogpvaladj=-log10(p.adjust(unlist(ttests_between_groups[3,]))),
gene=colnames(all_cn_var_clades_df)[-1],
chrom=ag$seq_name[match(genes_ttest_clades$gene, ag$gene_name)])
ggplot(genes_ttest_clades, aes(x=factor(chrom, level=gtools::mixedsort(unique(chrom))), y=minlogpvaladj))+
geom_boxplot()+geom_jitter(alpha=0.2)+theme_bw()+
geom_hline(yintercept = -log10(0.05), lty='dashed', col='blue')
head(melt(all_cn_var, measure.vars = NULL))
all_cn_var_df <- (melt(as(all_cn_var, 'matrix')))
all_cn_var_df$chrom=ag$seq_name[match(all_cn_var_df$Var1, ag$gene_name)]
# ggplot(all_cn_var_df, aes(x=factor(chrom, level=gtools::mixedsort(unique(chrom))), ## too large
#                                   y=value))+geom_boxplot()+geom_jitter(alpha=0.2)+theme_bw()
all_cn_var_df$clade <- dendrograminputclr[match(all_cn_var_df$Var2, names(dendrograminputclr))]
dim(all_cn_var_df)
all_cn_var_df_summary <- all_cn_var_df %>% dplyr::group_by(Var1) %>% dplyr::summarise(mean_val=mean(value))
all_cn_var_df_summary2 <- all_cn_var_df %>% dplyr::group_by(Var1, clade) %>% dplyr::summarise(mean_val=mean(value))
dim(all_cn_var_df_summary)
all_cn_var_df_summary$chrom=ag$seq_name[match(all_cn_var_df_summary$Var1, ag$gene_name)]
all_cn_var_df_summary2$chrom=ag$seq_name[match(all_cn_var_df_summary2$Var1, ag$gene_name)]
ggplot(all_cn_var_df_summary, aes(x=as.numeric(chrom), group=chrom,
y=mean_val, label=ifelse(mean_val<1.5, as.character(Var1), NA)))+
geom_boxplot()+geom_jitter(alpha=0.2, width = 0.2)+geom_label_repel(nudge_x = 0)+theme_bw()
all_cn_var_df_summary2[is.na(all_cn_var_df_summary2$chrom),]
ggplot(all_cn_var_df_summary2[!is.na(all_cn_var_df_summary2$chrom),],
aes(x=clade, group=clade, col=clade,
y=mean_val, label=ifelse(mean_val<1.5, as.character(Var1), NA)))+
# geom_boxplot()+
facet_wrap(.~as.numeric(chrom), scales = "free_x")+
geom_jitter(alpha=0.2, width = 0.2, aes(group=interaction(chrom, clade)))+
# geom_label_repel(nudge_x = 0)+
theme_bw()+labs(x='Clade and chromosome', y='Absolute CN')
ggsave("figures/average_CN_genes_per_chrom.pdf", width = 10, height = 10)
all_cn_var_df_summary2
# umap_genes <- umap((all_cn_var))
# plot(umap_genes$layout)
# plot(umap_genes$layout, xlim(-100, 100))
# plot(umap_genes$layout, xlim = c(-20, 20),  ylim = c(-20, 20), pch=19, cex=0.1) ## not very interesting
## primary and relapse
## read in relapse/primary information
load("../../../other_repos/britroc-1/data/britroc_30kb_signature_data.rds")
patient.meta
df_umap_britroc_rel_arx <- df_umap
df_umap_britroc_rel_arx$group = patient.meta$group[match(df_umap$sample, patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx$ploidy = patient.meta$ploidy[match(df_umap$sample, patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx$patient = patient.meta$PATIENT_ID[match(df_umap$sample, patient.meta$SAMPLE_ID)]
patients_both_samples <- unique(df_umap_britroc_rel_arx$patient)[which(sapply(unique(df_umap_britroc_rel_arx$patient), function(i) all(c('arx', 'rlps') %in% df_umap_britroc_rel_arx$group[df_umap_britroc_rel_arx$patient == i])))]
patients_both_samples <- patients_both_samples[!is.na(patients_both_samples)]
df_umap_britroc_rel_arx$patient_only_matched <- ifelse( (df_umap_britroc_rel_arx$patient %in% patients_both_samples),
yes = as.character(df_umap_britroc_rel_arx$patient),
no=NA)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, col=gsub('BRITROC-', 'BR', as.character(patient))))+
# geom_label_repel(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
#                  aes(x=`1`, y=`2`, col=patient, group=patient, label=patient_only_matched), alpha=0.8,
#                  max.overlaps = 10, size=2)+
# theme(legend.position = "bottom", )+
labs(col='', shape='')+guides(col=guide_legend(ncol=1))
ggsave("figures/umap_britroc_arx_rlps.pdf", width = 6, height = 6)
df_umap[which.max(df_umap$`1`),]
df_umap[(df_umap_britroc_rel_arx$`1`)>50,]
df_umap[(df_umap$`1`)>100,]
all_cn_var[,'JBLAB-4264PS']
all_cn_var[,'JBLAB-4264']
dim(df_umap_britroc_rel_arx)
df_umap_britroc_rel_arx
df_umap_britroc_rel_arx$patient_only_matched
df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),]
dim(df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),])
sapply(unique(df_umap_britroc_rel_arx$patient), function(i){
all(c('arx', 'rlps') %in% df_umap_britroc_rel_arx$group[df_umap_britroc_rel_arx$patient == i])
})
sapply(unique(patient.meta$patient), function(i){
all(c('arx', 'rlps') %in% patient.meta$group[patient.meta$patient == i])
})
patient.meta$patient
sapply(unique(patient.meta$PATIENT_ID), function(i){
all(c('arx', 'rlps') %in% patient.meta$group[patient.meta$PATIENT_ID == i])
})
table(sapply(unique(patient.meta$PATIENT_ID), function(i){
all(c('arx', 'rlps') %in% patient.meta$group[patient.meta$PATIENT_ID == i])
}))
table(sapply(unique(df_umap_britroc_rel_arx$patient), function(i){
all(c('arx', 'rlps') %in% df_umap_britroc_rel_arx$group[df_umap_britroc_rel_arx$patient == i])
}))
df_umap$sample
df_umap_britroc_rel_arx <- df_umap
df_umap_britroc_rel_arx$group = patient.meta$group[match(paste0(df_umap$sample, 'PS'), patient.meta$SAMPLE_ID)]
table(df_umap_britroc_rel_arx$group)
df_umap_britroc_rel_arx$group = patient.meta$group[match(gsub('PS', '', df_umap$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx
df_umap_britroc_rel_arx$sample
table(grepl("*PS$", df_umap_britroc_rel_arx$sample))
df_umap_britroc_rel_arx <- df_umap
df_umap_britroc_rel_arx <- df_umap_britroc_rel_arx[(grepl("*PS$", df_umap_britroc_rel_arx$sample)),]
df_umap_britroc_rel_arx$group = patient.meta$group[match(gsub('PS', '', df_umap$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx <- df_umap
df_umap_britroc_rel_arx <- df_umap_britroc_rel_arx[(grepl("*PS$", df_umap_britroc_rel_arx$sample)),]
df_umap_britroc_rel_arx$group = patient.meta$group[match(gsub('PS', '', df_umap_britroc_rel_arx$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx <- df_umap
df_umap_britroc_rel_arx <- df_umap_britroc_rel_arx[(grepl("*PS$", df_umap_britroc_rel_arx$sample)),]
df_umap_britroc_rel_arx$group = patient.meta$group[match(gsub('PS', '', df_umap_britroc_rel_arx$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx$ploidy = patient.meta$ploidy[match(gsub('PS', '', df_umap$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx <- df_umap
df_umap_britroc_rel_arx <- df_umap_britroc_rel_arx[(grepl("*PS$", df_umap_britroc_rel_arx$sample)),]
df_umap_britroc_rel_arx$group = patient.meta$group[match(gsub('PS', '', df_umap_britroc_rel_arx$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx$ploidy = patient.meta$ploidy[match(gsub('PS', '', df_umap_britroc_rel_arx$sample), patient.meta$SAMPLE_ID)]
df_umap_britroc_rel_arx$patient = patient.meta$PATIENT_ID[match(gsub('PS', '', df_umap_britroc_rel_arx$sample), patient.meta$SAMPLE_ID)]
patients_both_samples <- unique(df_umap_britroc_rel_arx$patient)[which(sapply(unique(df_umap_britroc_rel_arx$patient), function(i) all(c('arx', 'rlps') %in% df_umap_britroc_rel_arx$group[df_umap_britroc_rel_arx$patient == i])))]
patients_both_samples <- patients_both_samples[!is.na(patients_both_samples)]
df_umap_britroc_rel_arx$patient_only_matched <- ifelse( (df_umap_britroc_rel_arx$patient %in% patients_both_samples),
yes = as.character(df_umap_britroc_rel_arx$patient),
no=NA)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, col=gsub('BRITROC-', 'BR', as.character(patient))))+
# geom_label_repel(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
#                  aes(x=`1`, y=`2`, col=patient, group=patient, label=patient_only_matched), alpha=0.8,
#                  max.overlaps = 10, size=2)+
# theme(legend.position = "bottom", )+
labs(col='', shape='')+guides(col=guide_legend(ncol=1))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, col=gsub('BRITROC-', 'BR', as.character(patient))))+
# geom_label_repel(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
#                  aes(x=`1`, y=`2`, col=patient, group=patient, label=patient_only_matched), alpha=0.8,
#                  max.overlaps = 10, size=2)+
# theme(legend.position = "bottom", )+
labs(col='', shape='')+guides(col=guide_legend(ncol=2))
ggsave("figures/umap_britroc_arx_rlps.pdf", width = 6, height = 6)
dim(df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),])
table(sapply(unique(df_umap_britroc_rel_arx$patient), function(i){
all(c('arx', 'rlps') %in% df_umap_britroc_rel_arx$group[df_umap_britroc_rel_arx$patient == i])
}))
table(sapply(unique(patient.meta$PATIENT_ID), function(i){
all(c('arx', 'rlps') %in% patient.meta$group[patient.meta$PATIENT_ID == i])
}))
df_umap[which.max(df_umap$`1`),]
df_umap[(df_umap_britroc_rel_arx$`1`)>50,]
df_umap[(df_umap$`1`)>100,]
all_cn_var[,'JBLAB-4264PS']
all_cn_var[,'JBLAB-4264']
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, col=gsub('BRITROC-', 'BR', as.character(patient))))+
# geom_label_repel(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
#                  aes(x=`1`, y=`2`, col=patient, group=patient, label=patient_only_matched), alpha=0.8,
#                  max.overlaps = 10, size=2)+
# theme(legend.position = "bottom", )+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, col=gsub('BRITROC-', 'BR', as.character(patient))))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`, col=group), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
?geom_line
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow())+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
?arrow
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(size=1))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.30,"cm")))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.15,"cm")))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.15,"cm"), ends="first"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
df_umap_britroc_rel_arx$group
df_umap_britroc_rel_arx$group <- factor(df_umap_britroc_rel_arx$group)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.15,"cm"), ends="first"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.15,"cm"), colour=c('red', 'green')[group], ends="first"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.15,"cm")), colour=c('red', 'green')[group]))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient ), arrow = arrow(length=unit(0.15,"cm")), colour=c('red', 'green')[group])+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=c('red', 'green')[group] ), arrow = arrow(length=unit(0.15,"cm")))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, col=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm")))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm")))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
df_umap_britroc_rel_arx$group <- factor(df_umap_britroc_rel_arx$group, levels=c('rlps', 'arx'))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm")))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
df_umap_britroc_rel_arx$group <- factor(df_umap_britroc_rel_arx$group)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm", end='last')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm", end='second')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm", end='first')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm", ends='last')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm", ends='second')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm", ends='first')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient), arrow = arrow(length=unit(0.15,"cm", ends='first')))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
?arrow
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm"), ends="last"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
df_umap_britroc_rel_arx$group
df_umap_britroc_rel_arx$group <- factor(df_umap_britroc_rel_arx$group)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm"), ends="last"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
df_umap_britroc_rel_arx$group
df_umap_britroc_rel_arx$group <- factor(df_umap_britroc_rel_arx$group, levels=c('arx', 'rlps'))
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm"), ends="last"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
ggplot()+
geom_point(data = df_umap, aes(x=`1`, y=`2`), alpha=0.02, size=5)+
geom_point(data = df_umap_britroc_rel_arx, aes(x=`1`, y=`2`, shape=group))+
theme_bw()+
geom_line(data = df_umap_britroc_rel_arx[!is.na(df_umap_britroc_rel_arx$patient_only_matched),],
aes(x=`1`, y=`2`,group=patient, colour=group ), arrow = arrow(length=unit(0.15,"cm"), ends="first"))+
labs(col='', shape='')+guides(col=guide_legend(ncol=3))
ggsave("figures/umap_britroc_arx_rlps_2.pdf", width = 6.5, height = 6)
>>>>>>> ce0a7d8a1293685287cc1c5d453f51696f0478b0
