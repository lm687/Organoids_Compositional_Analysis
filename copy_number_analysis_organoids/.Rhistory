affected_nodes = unique(c(paste0('t', list_combinations_leaves),
give_children_nodes(current_path[grepl('Node', current_path)], c())))
# affected_nodes
# list_children=current_path[grepl('Node', current_path)]
# already_visited_internal = c()
affected_nodes = unique(c(select_leaves(affected_nodes), affected_nodes))
mut_matrix[select_leaves(affected_nodes), mut_it] = 1
## add the mutation to the Leaves themselves
mut_matrix[current_path[!grepl('Node', current_path)],mut_it] = 1
mut_matrix
}
}
tree
par(mfrow=c(1,2))
image(mut_matrix_original, min='original')
image(mut_matrix, min='imputated')
sum(mut_matrix_original)
sum(mut_matrix)
## blue == with mutation
## green == no mutation
par(mfrow=c(3,2), mar=c(1,1,2,1))
for(mut_it in 1:30){
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix_original[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, ' Original'), show.node.label = F, show.tip.label = T)
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, " Imputed"))
}
#
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix_original[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, ' Original'), show.node.label = F, show.tip.label = T)
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, " Imputed"))
mut_matrix_original[,mut_it]
mut_matrix[,mut_it]
mut_it = 29
mut_matrix_original[,mut_it]
mut_matrix[,mut_it]
rm(list = ls())
library(ape)
library(igraph)
library(ggm)
nnodes <- 10
tree <- rtree(n = nnodes)
adjacency_mat <- as(igraph::get.adjacency(ape::as.igraph.phylo(tree, directed = F), type = 'both'), 'matrix')
diag(adjacency_mat) = 1
plot(tree)
## and given a matrix of mutations in the tree
nmuts <- 200
## create a matrix of mutations
mut_matrix_original <- matrix(sample(c(0,1), size = nnodes*nmuts, replace = T, prob = c(0.8, 0.2)), nnodes, nmuts)
rownames(mut_matrix_original) <- paste0('t', 1:nnodes)
colnames(mut_matrix_original) <- paste0('mut', 1:nmuts)
## make sure each mutation appears in at least two samples
mut_matrix_original <- mut_matrix_original[,colSums(mut_matrix_original)>= 2]
nmuts <- ncol(mut_matrix_original)
## rows are nodes, columns are mutations
mut_matrix <- mut_matrix_original
## find paths from one node to another
all_paths_between_leaves <- lapply((rownames(adjacency_mat)), function(i){
.x <- lapply((rownames(adjacency_mat)), function(j){
if(which(rownames(adjacency_mat) == j) < which(rownames(adjacency_mat) == i)){
idx1 = which(rownames(adjacency_mat) == j)
idx2 = which(rownames(adjacency_mat) == i)
}else{
idx1 = which(rownames(adjacency_mat) == i)
idx2 = which(rownames(adjacency_mat) == j)
}
rownames(adjacency_mat)[ggm::findPath(adjacency_mat, idx1, idx2)]
})
names(.x) <- (rownames(adjacency_mat))
.x
})
names(all_paths_between_leaves) <- (rownames(adjacency_mat))
#-----------------------------------------------------------------------------------------#
select_leaves <- function(i){
i[grepl("^t", i)]
}
select_internal <- function(i){
i[grepl("^Node", i)]
}
select_leaves_name <- function(i){
i[grepl("^t", names(i))]
}
remove_last_element <- function(i){
i[-length(i)]
}
## add the mutation to all the children of the inner nodes (Node1, Node2, etc)
give_children_nodes <- function(list_children, already_visited_internal){
list_children_leaves <- sort(select_leaves(list_children))
list_children_internal <- sort(select_internal(list_children))
## remove internal nodes already used
list_children_internal <- list_children_internal[!(list_children_internal %in% already_visited_internal)]
## remove blacklisted nodes which are higher than the most recent common ancestor
list_children_internal <- list_children_internal[!(list_children_internal %in% common_ancestor)]
cat(list_children_leaves, '\n')
if(length(list_children_internal)>0){
if(length(list_children_internal) > 1){
affected_nodes = names(which(colSums(adjacency_mat[names(which(apply(adjacency_mat[list_children_internal, ], 2, max) == 1)),]) > 0))
}else{
affected_nodes <- names(which(colSums(adjacency_mat[names(which(adjacency_mat[list_children_internal, ] == 1)),]) > 0))
}
## remove internal nodes already used
affected_nodes <- affected_nodes[!(affected_nodes %in% already_visited_internal)]
## remove blacklisted nodes which are higher than the most recent common ancestor
affected_nodes <- affected_nodes[!(affected_nodes %in% common_ancestor)]
already_visited_internal <- c(already_visited_internal, list_children_internal)
return(unique(c(affected_nodes, give_children_nodes(affected_nodes, already_visited_internal))))
}else{
return(list_children_leaves)
}
}
#-----------------------------------------------------------------------------------------#
for(mut_it in 1:nmuts){
## for each mutations
## add the mutation in all samples in between the samples with the mutation
which_nodes_mutation <- which(mut_matrix[,mut_it] == 1)
## perform all traversals
for(list_combinations_leaves in combn(which_nodes_mutation, 2, simplify = F)){
leaf1 = names(list_combinations_leaves)[1]
leaf2 = names(list_combinations_leaves)[2]
common_ancestor = (all_paths_between_leaves$Node1[[leaf1]][all_paths_between_leaves$Node1[[leaf1]] %in% all_paths_between_leaves$Node1[[leaf2]]])
cat(paste0(leaf1, '->', leaf2, '\n'))
## starting from node1, go to node2
current_path <- all_paths_between_leaves[[leaf1]][[leaf2]]
affected_nodes = unique(c(paste0('t', list_combinations_leaves),
give_children_nodes(current_path[grepl('Node', current_path)], c())))
affected_nodes = unique(c(select_leaves(affected_nodes), affected_nodes))
mut_matrix[select_leaves(affected_nodes), mut_it] = 1
## add the mutation to the Leaves themselves
mut_matrix[current_path[!grepl('Node', current_path)],mut_it] = 1
}
}
par(mfrow=c(1,2))
image(mut_matrix_original, min='original')
image(mut_matrix, min='imputated')
sum(mut_matrix_original)
sum(mut_matrix)
## blue == with mutation
## green == no mutation
par(mfrow=c(3,2), mar=c(1,1,2,1))
for(mut_it in 1:30){
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix_original[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, ' Original'), show.node.label = F, show.tip.label = T)
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, " Imputed"))
}
##------------------------------------------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
require(ggplot2)
require(ggrepel)
require(dplyr)
require(reshape2)
require(jcolors)
require(biomaRt)
require(gridExtra)
library(jcolors)
library(parallel)
library(latex2exp)
library(GSVA)
library(GSVAdata)
library(DESeq2)
##------------------------------------------------------------------------------------------------------------##
## Note: any plots containing nearestGeneCN/cordfAll is wrong, as it had been computed with the incorrect organoid renaming
include_14_orgs = FALSE
include_11_orgs = TRUE
##------------------------------------------------------------------------------------------------------------##
##' 3' bias samples to remove
renaming = readxl::read_xlsx("../../../RNASeq_DE_resistant_sensitive/files/PDOnameProperSample_sWGS_RNAseq.xlsx")
if(include_14_orgs){
remove_samples = (c('PDO14', 'PDO16', 'PDO18'))
}else if(include_11_orgs){
remove_samples = (c('PDO14', 'PDO16', 'PDO18',
'PDO13', 'PDO4', 'PDO9',
'PDO17', 'FT10', 'FT7', 'FT7-bis'))
}
remove_samples_with_normal_fal = cbind.data.frame(PDO=remove_samples,
ID=renaming$ID[match(remove_samples, renaming$PDO)],
RNASeq=renaming$sampleNameRNAseq[match(remove_samples, renaming$PDO)])
remove_samples = remove_samples_with_normal_fal[grepl('PDO', remove_samples_with_normal_fal$PDO),]
##------------------------------------------------------------------------------------------------------------##
##------------------------------------------------------------------------------------------------------------##
joint_counts_CN0 = readRDS("../output/output_GRCh37_with_14_orgs/joint_counts_CN_TPM_20210506104217.RDS")
ecDNA <- joint_counts_CN0 %>% filter(CN.value > 8)
length(unique(ecDNA$PDO))
ecDNAdcast <- dcast(ecDNA, CN.gene_name~PDO, value.var='CN.value')
pdo_no_ecDNA <- unique(joint_counts_CN0$PDO)[!(unique(joint_counts_CN0$PDO) %in% unique(ecDNA$PDO))]
joint_counts_CN0$PDO = renaming$PDO[match(joint_counts_CN0$CN.L1, renaming$ID)] ## because PDO was created with RNASeq data, so if there's none we didn't have the PDO name
ecDNA <- joint_counts_CN0 %>% filter(CN.value > 8)
length(unique(ecDNA$PDO))
ecDNAdcast <- dcast(ecDNA, CN.gene_name~PDO, value.var='CN.value')
pdo_no_ecDNA <- unique(joint_counts_CN0$PDO)[!(unique(joint_counts_CN0$PDO) %in% unique(ecDNA$PDO))]
ecDNAdcast <- cbind(ecDNAdcast, matrix(NA, nrow=nrow(ecDNAdcast), ncol=length(pdo_no_ecDNA)))
colnames(ecDNAdcast) <- c(colnames(ecDNAdcast)[1:(18-length(pdo_no_ecDNA)+1)],
as.character(pdo_no_ecDNA))
NA_for_zero <- function(i){
i[is.na(i)] <- 0
i
}
rownames(ecDNAdcast) <- ecDNAdcast$CN.gene_name
ecDNAdcast$CN.gene_name <- NULL
##-------------------------------------------------------
## ecDNA
##-------------------------------------------------------
library(pheatmap)
pheatmap::pheatmap(log(NA_for_zero(ecDNAdcast)+1),
cluster_rows = T, cluster_cols = T)
rownames(ecDNAdcast)
genes_interest_ecdna <- c('AGO2', 'AKT2', 'AMIGO2',
'ARID2', 'CCNE1', 'CCNE2', 'CNOT2', 'EGFR', 'ERBB2', 'ESRP1', 'FOXA2',
'FOXH1', 'GAPDHS', 'HSF1', 'IGF2BP2', 'IL8', 'LIPH', 'MDM2', 'MECOM',
'MYC', 'NFKBIB', 'OPTN', 'POLB', 'PROSER2', 'TOP1MT', 'ZWINT')
ecDNAdcast2 <- ecDNAdcast
rownames(ecDNAdcast2)[!(rownames(ecDNAdcast2) %in% genes_interest_ecdna)] = make.names(rep('.', nrow(ecDNAdcast2)-length(genes_interest_ecdna)), unique = T)
print(pheatmap::pheatmap(log(NA_for_zero(ecDNAdcast2)+1),
cluster_rows = T, cluster_cols = T))
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
### files in  all_CN_states_per_gene/ created using script get_CN_of_genes.R
# library(tsne)
library(umap)
library(ggrepel)
library(dplyr)
library(grid)
library(reshape2)
dendrograminputclr <- readRDS("/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/copy_number_analysis_organoids/robjects/cluster_clades_imput002clr.RDS")
ref_dir <- ""
data_flder <- "/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/Data/"
gtf.file <- file.path(data_flder,
"Homo_sapiens.GRCh37.87.gtf.gz")
sqlite_file <- 'Homo_sapiens.GRCh37.87.sqlite'
sqlite_path <- file.path(data_flder, sqlite_file)
if(!file.exists(sqlite_path)) {
## generate the SQLite database file
ensembldb::ensDbFromGtf(gtf=gtf.file, path = '', outfile=sqlite_file)
}
#------------------------------------------------------------------------#
#------------------------------------------------------------------------#
## UMAP
# umap_res <- umap(t(all_cn_var[1:2000,]))
umap_res <- umap(t(all_cn_var))
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
### files in  all_CN_states_per_gene/ created using script get_CN_of_genes.R
# library(tsne)
library(umap)
library(ggrepel)
library(dplyr)
library(grid)
library(reshape2)
dendrograminputclr <- readRDS("/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/copy_number_analysis_organoids/robjects/cluster_clades_imput002clr.RDS")
ref_dir <- ""
data_flder <- "/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/Data/"
gtf.file <- file.path(data_flder,
"Homo_sapiens.GRCh37.87.gtf.gz")
sqlite_file <- 'Homo_sapiens.GRCh37.87.sqlite'
sqlite_path <- file.path(data_flder, sqlite_file)
!file.exists(sqlite_path)
data_flder
if(!file.exists(sqlite_path)) {
## generate the SQLite database file
ensembldb::ensDbFromGtf(gtf=gtf.file, path = '', outfile=sqlite_file)
}
EnsDb.Hsapiens.v87 <- ensembldb::EnsDb(sqlite_file)
# Genes, used to annotated the TPM matrix to send to Maria
ag <- ensembldb::genes(EnsDb.Hsapiens.v87, filter=list(AnnotationFilter::GeneBiotypeFilter('protein_coding')), return.type="DataFrame")
ag_subsetchrom <- ag[!(ag$seq_name %in% c("MT", "X", "Y")) & !grepl("GL",ag$seq_name),]
flder <- "/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/RNASeq_and_CN/20191218_ViasM_BJ_orgaBrs/output/all_CN_states_per_gene/"
fles <- list.files(flder, full.names = T)
fles <- fles[grepl('RDS', fles)]
length(fles)
gene_CN <- lapply(fles, readRDS)
basename(fles)[grepl('early', (fles))]
cn <- lapply(gene_CN, `[`, 2)
all_cn <- (do.call('cbind', cn))
colnames(all_cn) <- gsub(".RDS", "", basename(fles))
rownames(all_cn) <- make.names(ag_subsetchrom$gene_name, unique = T)
var_all_cn <- apply(all_cn, 1, var)
all_cn_var <- all_cn[var_all_cn>0,]
all_cn_var[ag_subsetchrom$seq_name == "8",]
all_cn[ag_subsetchrom$seq_name == "8",]
##remove 12 samples which seem quite weird
all_cn <- all_cn[,!(colnames(all_cn) %in% remove_samples)]
remove_samples <- c('IM_311PS', 'IM_312PS', 'JBLAB-4211', 'JBLAB-4263', 'JBLAB-4263PS',
'JBLAB-4264', 'JBLAB-4264PS', 'JBLAB-4265') #names(cutree_hclust_most_var)[which(cutree_hclust_most_var == 2)]
##remove 12 samples which seem quite weird
all_cn <- all_cn[,!(colnames(all_cn) %in% remove_samples)]
all_cn_var <- all_cn_var[,!(colnames(all_cn_var) %in% remove_samples)]
min(all_cn) ## there shouldn't be any negative values!
dim(all_cn)
apply(all_cn, 1, min)
which_neg <- (apply(all_cn, 1, min) < 0)
table(which_neg)
plot(which_neg, type='h')
min_genes <- apply(all_cn, 1, min)
which_neg <- (min_genes)
table(which_neg)
plot(which_neg, type='h')
min_genes <- apply(all_cn, 1, min)
which_neg <- (min_genes) < 0
table(which_neg)
plot(which_neg, type='h')
plot(min_genes, type='h')
max_genes <- apply(all_cn, 1, max)
plot(max_genes, type='h')
#------------------------------------------------------------------------#
#------------------------------------------------------------------------#
## UMAP
# umap_res <- umap(t(all_cn_var[1:2000,]))
umap_res <- umap(t(all_cn_var))
dev.off()
table(dendrograminputclr)
dendrograminputclr[dendrograminputclr == 1] <- 'S4-rich'
dendrograminputclr[dendrograminputclr == 2] <- 'S3-rich'
df_umap <- cbind.data.frame(umap_res$layout,
sample=colnames(all_cn_var),
clade=as.character(dendrograminputclr[match(colnames(all_cn_var), names(dendrograminputclr))]),
MYC=unlist(all_cn_var['MYC',]),
BRCA1=unlist(all_cn_var['BRCA1',]),
BRCA2=unlist(all_cn_var['BRCA2',]),
CCNE1=unlist(all_cn_var['CCNE1',]),
CDKN2D=unlist(all_cn_var['CDKN2D',])
)
categorise_samples <- function(i){
if(grepl('JBLAB', i)){
'JBLAB'
}else if(grepl('IM', i)){
'IM'
}else if(grepl('TCGA', i)){
'TCGA'
}else{
'ICGC'
}
}
df_umap$dataset <- sapply(rownames(df_umap), categorise_samples)
ggplot(df_umap,
aes(x=`1`, y=`2`, label=sample, shape=dataset))+
geom_point( alpha=0.4, aes( color=clade, size=MYC))+
# geom_label_repel()+
theme_bw()
# ??? COPY NUMBER OF -10??
sort(unlist(all_cn))[1:10]
quantiles = apply(all_cn, 2, quantile, seq(0, 1, length.out=20), na.rm=T)
# quantiles <- quantiles[1:10,]
quantilespca <- prcomp(t(quantiles), scale. = T)
quantilestsne <- Rtsne::Rtsne(t(quantiles))
library(ggplot2)
library(ggrepel)
ggplot(cbind.data.frame(quantilestsne$Y),
aes(x=`1`, y=`2`))+geom_point()+
theme_bw()
ggplot(cbind.data.frame(quantilespca$x[,1:2]),
aes(x=PC1, y=PC2))+geom_point()+
theme_bw()
df_tsne <- cbind.data.frame(quantilestsne$Y[,1:2], averagelow=average_lower1p5,
anyecna=anyecna, fractionecna=fractionecna,
fraction2or1vicinity=fraction2or1vicinity)
brcaStatus = readRDS(file.path('../../../other_repos/cnsigs_Initial_submission/survival_analysis/from_ruben/survival_models/TCGA_OVBRCAonly_Exposures_and_BRCA_Status_plusGene.rds'))
brcaStatus$Sample <- as.character(brcaStatus$Sample)
brcaStatus$Status <- as.character(brcaStatus$Status)
brcaStatus$Gene <- as.character(brcaStatus$Gene)
brcaStatus$Signature <- as.character(brcaStatus$Signature)
df_tsne$brca = brcaStatus$Status[match(rownames(df_tsne), brcaStatus$Sample)]
df_tsne$BRCA2 = brcaStatus$Gene[match(rownames(df_tsne), brcaStatus$Sample)] == 'BRCA2'
df_tsne$Signature = brcaStatus$Signature[match(rownames(df_tsne), brcaStatus$Sample)]
library(gridExtra)
library(reshape2)
df_tsne$brca_v2 = df_tsne$brca
df_tsne$brca_v2[df_tsne$brca_v2 %in% c('LOH in BRCA1/2') ] = NA
df_tsne$BRCA2 = brcaStatus$Gene[match(rownames(df_tsne), brcaStatus$Sample)] == 'BRCA2'
df_tsne <- cbind.data.frame(quantilestsne$Y[,1:2], averagelow=average_lower1p5,
anyecna=anyecna, fractionecna=fractionecna,
fraction2or1vicinity=fraction2or1vicinity)
average_lower1p5 = colMeans(all_cn < 1.5)
anyecna = apply(all_cn, 2, function(i) any(i >= 8))
fractionecna = apply(all_cn, 2, function(i) mean(i >= 8, na.rm=T))
fraction2or1vicinity= apply(all_cn, 2, function(i) mean( ((i >= 0.8) & (i <= 1.2)) | ((i >= 1.8) & (i <= 2.2)), na.rm=T))
table(anyecna)
df_tsne <- cbind.data.frame(quantilestsne$Y[,1:2], averagelow=average_lower1p5,
anyecna=anyecna, fractionecna=fractionecna,
fraction2or1vicinity=fraction2or1vicinity)
brcaStatus = readRDS(file.path('../../../other_repos/cnsigs_Initial_submission/survival_analysis/from_ruben/survival_models/TCGA_OVBRCAonly_Exposures_and_BRCA_Status_plusGene.rds'))
brcaStatus$Sample <- as.character(brcaStatus$Sample)
brcaStatus$Status <- as.character(brcaStatus$Status)
brcaStatus$Gene <- as.character(brcaStatus$Gene)
brcaStatus$Signature <- as.character(brcaStatus$Signature)
df_tsne$brca = brcaStatus$Status[match(rownames(df_tsne), brcaStatus$Sample)]
df_tsne$BRCA2 = brcaStatus$Gene[match(rownames(df_tsne), brcaStatus$Sample)] == 'BRCA2'
df_tsne$Signature = brcaStatus$Signature[match(rownames(df_tsne), brcaStatus$Sample)]
library(gridExtra)
library(reshape2)
df_tsne$brca_v2 = df_tsne$brca
df_tsne$brca_v2[df_tsne$brca_v2 %in% c('LOH in BRCA1/2') ] = NA
cowplot::plot_grid(
# ggplot(df_tsne,
#      aes(x=`1`, y=`2`, col=averagelow))+geom_point()+
# theme_bw(),#+lims(x=c(-20, 50), y=c(-10, 10)),
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=anyecna))+geom_point()+
theme_bw()+#theme(legend.position = "bottom")+
labs(col='pecDNA', x='TSNE1', y='TSNE2'),#+lims(x=c(-20, 50), y=c(-10, 10)),
# ggplot(df_tsne,
#        aes(x=`1`, y=`2`, col=log(fractionecna+0.001)))+geom_point()+
#   theme_bw(),#+lims(x=c(-20, 50), y=c(-10, 10)),
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(fraction2or1vicinity)))+geom_point()+
theme_bw()+#theme(legend.position = "bottom")+
labs(col='Fraction in CN={1,2}', x='TSNE1', y='TSNE2'),#+lims(x=c(-20, 50), y=c(-10, 10)),
# ggplot(df_tsne,
#        aes(x=`1`, y=`2`, col=factor(brca)))+geom_point()+
#   theme_bw(),#+lims(x=c(-20, 50), y=c(-10, 10))
ggplot()+
geom_point(data=df_tsne[-which(df_tsne$BRCA2),],
aes(x=`1`, y=`2`), alpha=0.2, col='grey')+
geom_point(data=df_tsne[which(df_tsne$BRCA2),],
aes(x=`1`, y=`2`, col=factor(BRCA2), shape=brca_v2))+
theme_bw()+labs(col='BRCA2 mut', x='TSNE1', y='TSNE2')  # ggplot(df_tsne,
#        aes(x=`1`, y=`2`, col=factor(brca_v2)))+geom_point()+
#   theme_bw()+labs(col='BRCA1/2 status', x='TSNE1', y='TSNE2')#+theme(legend.position = "bottom")+
#guides(col=guide_legend(nrow=5,byrow=TRUE))
, ncol=3, rel_widths = c(2.7, 3,3.2)
)
quantilespca
all_cn
dim(all_cn)
apply(all_cn, 2, function(i) mean(i>8))
df_tsne$fraction_ecDNA = apply(all_cn, 2, function(i) mean(i>8))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=fraction_ecDNA))+geom_point()+
theme_bw()+
labs(col='Fraction in CN={1,2}', x='TSNE1', y='TSNE2')
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(fraction_ecDNA)))+geom_point()+
theme_bw()+
labs(col='Fraction in CN={1,2}', x='TSNE1', y='TSNE2')
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(fraction_ecDNA+1)))+geom_point()+
theme_bw()+
labs(col='Fraction in CN={1,2}', x='TSNE1', y='TSNE2')
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(fraction_ecDNA+1)))+geom_point()+
theme_bw()#+
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(fraction_ecDNA+0.01)))+geom_point()+
theme_bw()#+
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(fraction_ecDNA+0.0001)))+geom_point()+
theme_bw()#+
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=(fraction_ecDNA)))+geom_point()+
theme_bw()#+
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=cut(fraction_ecDNA, 10)))+geom_point()+
theme_bw()#+
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=cut(fraction_ecDNA, 10)))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ag
dim(ag)
dim(ag)
dim(all_cn)
all_cn
head(all_cn)
all_cn[1:4,1:4]
df_tsne$MYC = df_tsne['MYC',]
df_tsne['MYC',]
df_tsne$MYC = all_cn['MYC',]
v
all_cn['MYC',]
all_cn['MYC',1:10]
dim(df_tsne)
df_tsne$MYC = as.vector(all_cn['MYC',])
as.vector(all_cn['MYC',])
df_tsne$MYC = unlist(all_cn['MYC',])
aes(x=`1`, y=`2`, col=MYC)+geom_point()+
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=MYC))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=log(MYC)))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=(MYC)>9))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=(MYC)>8))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
quantilestsne$Y
quantilestsne$Y[,1]
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantilestsne$Y[,1]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
quantiles
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantiles[2,]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantiles[1,]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantiles[5,]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantiles[4,]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantiles[8,]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
ggplot(df_tsne,
aes(x=`1`, y=`2`, col=quantiles[9,]))+geom_point()+
theme_bw()+facet_wrap(.~cut(fraction_ecDNA, 10))
quantiles
dim(quantiles)
pairs(quantiles[1:4,1:3])
pairs(t(quantiles)[1:4,1:3])
pairs(t(quantiles[1:4,1:3]))
dim(quantiles)
pairs(t(quantiles))
