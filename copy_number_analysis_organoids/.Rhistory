hidden_values<-rep(NA,L)
temp<-hidden_values[1]<-s1
for (i in 2:L){
hidden_values[i]<-sample(S,size=1,replace=TRUE,prob=A[temp,])
temp<-hidden_values[i]
}
hidden_values
## Emitted values
#sequences of emitted states
emitted_values<-rep(NA,L)
for (i in 1:L){
emitted_values[i]<-sample(V,size=1,replace=TRUE,prob=B[hidden_values[i],])
}
emitted_values
plot(emitted_values, type='h')
## Plot the resulting sequences of hidden and emitted states on the same graph.
#plots sequences of hidden and emitted states on the same graph
#pdf("Graph1.pdf")
opar <- par(no.readonly = TRUE)
par(mar = c(4, 4.1, 4.8, 2.1))
plot(emitted_values,type="h",xlim=c(0,115),xlab="",xaxt="n",ylab="",col='blue',lwd=1.5)
lines(hidden_values,col='red',lwd=2,type = "h")
axis(1, at = seq(0, 115, by = 10))
axis(1, at = seq(0, 115, 5), labels = NA)
title(xlab = "Index",font.lab=2,mgp = c(2.5, 1, 0))    # Add x-axis text
title(ylab = "Sequence of state",font.lab=2,mgp = c(2.5, 1, 0))    # Add y-axis text
legend(x="top", inset=c(0, -0.3),
legend = c("emitted state","hidden state"),col=c("blue","red"),lwd=c(1.5,2),xpd=TRUE, horiz = TRUE)
#creates a csv file for 115 sequences
data<-data.frame(cbind(hidden_values,emitted_values))
forward_algorithm<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
alpha[1,]<-initial_distribution*emission_matrix[,visible_data[1]]
for (i in 2:(no_emitted_values)){
transitted<-alpha[(i-1),] %*% transition_matrix
alpha[i,]<-transitted*emission_matrix[,visible_data[i]]
}
return(alpha)
}
# forward_algorithm(values$emitted_values,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
forward_algorithm(emitted_values,A,B,mu_naught)
#Log likelihood of GC sequence under the model in (1)
forward_algorithm_scaled<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(unlist(log_L))
}
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
emitted_sequences <- c(1,1,2,4,5)
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n_arg <- c_n
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)+1
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
alpha_hat
baum_welch<-function(emitted_sequences,hidden_values){
#initialization
mu_0<-c(0.5,0.5)
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
#iteration
for (t in 1:N){
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
E_nij<-matrix(0,2,2)
for (m in 1:N){
E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
}
trans_mat<-apply(E_nij,1,function(x) x/colSums(E_nij))
emission_mat<-rep(NA,1)
}
#termination
}
# E_nij<-matrix(0,2,2)
# for (m in 1:N){
#   E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
# }
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
## sum the number of times that we see the transition from k to l in the observed data
sum_over_j_i <- matrix(NA, ncol=ncol(alpha_hat), nrow=length(emitted_sequences))
sum_over_j_i
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
f[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
length(emitted_sequences)
sum(sapply(1:(length(emitted_sequences)-1)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
ncol(alpha_hat)
(length(emitted_sequences)-1)
sum(sapply(1:(length(emitted_sequences)-1), function(i)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
visible_data=rep(1,5)
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
beta_hat
alpha_hat
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sum(sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]}))
}
}
A
alpha_hat
alpha_hat[length(emitted_sequences]
alpha_hat[length(emitted_sequences)]
alpha_hat[length(emitted_sequences),]
A
onesigma <- rbind(c(1694, 1726, 28.90),
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma
head(melt(onesigma))
require(reshape2)
head(melt(onesigma))
head(melt(onesigma)onesigma)
onesigma
colnames(onesigma) <- c('start', 'end', 'onesigma')
require(ggplot2)
ggplot(onesigma, aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
data.frame(onesigma)
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(xmin=start, xend=end, ymin=0, yend=onesigma))+geom_ribbon()
onesigma
onesigma[1,'start']:onesigma[1,'end']
lapply(1:nrow(onesigma), function(i) (onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) rbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))_
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma'])))
onesigma
head(onesigma)
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
ggplot(data.frame(onesigma), aes(xmin=start, x=end, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, y=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), col=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), fill=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, fill=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_step()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_errorbar()
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library('GEOquery')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library('GEOquery')
gse <- getGEO("GSE165897", GSEMatrix = TRUE)
show(gse)
gse$`GSE165897-GPL16791_series_matrix.txt.gz`
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$taxid_ch1
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$geo_accession
filePaths = getGEOSuppFiles("GSE165897")
pvals_diagRE_DMDL_nonexo_SP_adj
pvals_fullRE_DMSL_nonexo_SP_adj
# rstudioapi() is not allowed in running shiny apps
# setwd(dirname(rstudioapi::getSourceEditorContext()$path)) ## set working directory
rm(list = ls()) ## clear objects
library(visNetwork) ## interactive network visualisation package
library(viridisLite) ## colour package
set.seed(234) # 'random' number generator
version = '' # default
metadata_file = paste0("in_files/metadata", version, ".txt")
edges_file = paste0("in_files/dataframe_edges", version, ".txt")
out_file = paste0("html_files", version, ".html")
## Reading in data files
# note: source files (metadata.txt, dataframe_edges.txt) need identical name entries (ordering doesn't matter)
metadata = read.table(metadata_file, stringsAsFactors = FALSE, sep = "\t", comment.char = "#", quote = '"')
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(devtools)
library(gridExtra)
# install('~/software/QDNAseqmod/') ## I have had to modify DESCRIPTION and added "mod" to its name
library(QDNAseqmod)
library(ggplot2)
library(reshape2)
segs <- readRDS("data/20220511BH_ascites_absoluteCN_bestfit.rds")
segs@phenoData@data$name
source("../../../other_repos/britroc-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../../other_repos/britroc-cnsignatures-bfb69cd72c50/helper_functions.R")
source("helper_functions.R")
component_parameters = readRDS("../../britroc-cnsignatures-bfb69cd72c50/data/component_parameters.rds")
feat_sig_mat = readRDS("../../britroc-cnsignatures-bfb69cd72c50/data/feat_sig_mat.rds")
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
sig_data <- as.matrix(sig_data[,1:7])
recompute_exposures <- F
if(recompute_exposures){
features <- extractCopynumberFeatures(segs)
SxC <- generateSampleByComponentMatrix(CN_features = features)
# sigs_ascites <- t(quantifySignaturesLM(SxC, feat_sig_mat, sig_thresh=0))
sigs_ascites <- t(quantifySignatures(SxC, feat_sig_mat))
rownames(sigs_ascites) <- gsub("_", "-", rownames(sigs_ascites))
saveRDS(sigs_ascites, "robjects/sigs_ascites.RDS")
}else{
sigs_ascites <- readRDS("robjects/sigs_ascites.RDS")
}
## For one of the organoids (PDO11), use the previous ascites exposures that Geoff computed
previous_ascites <- readRDS("../copy_number_analysis_organoids/robjects/fig4_ascites.RDS")
sigs_ascites['14369.A004',] = unlist(previous_ascites[which(previous_ascites$sample == 'PDO11') - 1,-c(1,9,10)])
## read the exposures from the organoids
exposures_orgs <- readRDS("../copy_number_analysis_organoids/robjects/exposures.RDS")
rownames(sigs_ascites) %in% segs@phenoData@data$name
segs@phenoData@data$name %in% rownames(sigs_ascites)
rownames(sigs_ascites)[rownames(sigs_ascites) == "16421.D705tp-D501tp"] =  "16421.D705-D501"
rownames(sigs_ascites)[rownames(sigs_ascites) == "16421.D705tp-D503tp"] = "16421.D705-D503"
previous_match <- F
if(previous_match){
ascc <- readxl::read_excel("data/AscitesSLXforOrganoidProject.xlsx")
ascc
sigs_ascites
gsub("*.[.]", "", rownames(sigs_ascites))
# organoidsMatched <- ascc$Derived_organoid[match(gsub(".*[.]","", rownames(sigs_ascites)), ascc$sWGS_barcode)]
###' BELOW:::: using the previous name, which is the correct match of ascites and PDO
###' i.e. the first three columns are the correct match, but the names for the
###' ascites are matched to the PDO number in INCORRECT_PREVIOUS_ORGANOID_NAME
organoidsMatched <- ascc$INCORRECT_PREVIOUS_ORGANOID_NAME[match(rownames(sigs_ascites), paste0(ascc$sWGS_SLX, '.', ascc$sWGS_barcode))]
###### BELOW::: it leads to an incorrect match
# organoidsMatched <- ascc$Derived_organoid[match(rownames(sigs_ascites), paste0(ascc$sWGS_SLX, '.', ascc$sWGS_barcode))]
add_to_figs <- ''
}else{
## using my final matching
add_to_figs <- '_latest'
ascc <- readxl::read_excel("data/matching_ascites_samples_Lena.xlsx")
organoidsMatched <- ascc$Derived_organoid[match(rownames(sigs_ascites), paste0(ascc$sWGS_SLX, '.', ascc$sWGS_barcode))]
}
rownames(sigs_ascites)[is.na(organoidsMatched)]
sigs_ascites <- sigs_ascites[!is.na(organoidsMatched),]
organoidsMatched <- organoidsMatched[!is.na(organoidsMatched)]
exposures_orgs[organoidsMatched,]
exp2 <- exposures_orgs[organoidsMatched,]
rownames(exp2)[duplicated(rownames(exp2))] <- paste0(rownames(exp2)[duplicated(rownames(exp2))], '_2')
sigs_ascites
sigs_ascites
make_unique <- function(i){
for(j in unique(i)){
if(sum(i == j) > 1){
i[i == j] = paste0((i[i == j]), '_', 1:(sum(i == j)))
}
}
i
}
make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs <- df_ascites_orgs[!(df_ascites_orgs[,'OVO4'] == '466_1'),] ## remove this pair due to bad quality (underpowered)
df_ascites_orgs$OVO4 <- gsub("_1", " (1)", df_ascites_orgs$OVO4)
df_ascites_orgs$OVO4 <- gsub("_2", " (2)", df_ascites_orgs$OVO4)
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
sigs_ascites
organoidsMatched
organoidsMatched
sigs_ascites
organoidsMatched
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
org=organoidsMatched,
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs <- df_ascites_orgs[!(df_ascites_orgs[,'OVO4'] == '466_1'),] ## remove this pair due to bad quality (underpowered)
df_ascites_orgs$OVO4 <- gsub("_1", " (1)", df_ascites_orgs$OVO4)
df_ascites_orgs$OVO4 <- gsub("_2", " (2)", df_ascites_orgs$OVO4)
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org'))
df_ascites_orgs
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
org=organoidsMatched,
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
org=organoidsMatched,
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
organoidsMatched
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs$org = organoidsMatched
df_ascites_orgs
df_ascites_orgs <- rbind.data.frame(cbind.data.frame(sigs_ascites, group='ascites',
OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])),
cbind.data.frame(exposures_orgs[organoidsMatched,], group='organoids', OVO4=make_unique(ascc$OV04[match(organoidsMatched, ascc$Derived_organoid)])))
df_ascites_orgs$org = organoidsMatched
df_ascites_orgs <- df_ascites_orgs[!(df_ascites_orgs[,'OVO4'] == '466_1'),] ## remove this pair due to bad quality (underpowered)
df_ascites_orgs$OVO4 <- gsub("_1", " (1)", df_ascites_orgs$OVO4)
df_ascites_orgs$OVO4 <- gsub("_2", " (2)", df_ascites_orgs$OVO4)
ggplot(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org')), aes(x=group, y=value, fill=variable))+
geom_bar(stat="identity")+facet_wrap(.~OVO4, ncol=6)+
scale_fill_brewer(palette="Dark2")+
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
saveRDS(melt(df_ascites_orgs,
id.vars = c('group', 'OVO4', 'org')), file = "robjects/ascites_organoid_exposures.RDS")
