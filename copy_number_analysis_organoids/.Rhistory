find_split(splts[[2]])
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
## Should not be necessary:
z[!is.finite(z)] <- NA
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1)
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple")
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", col='blue')
length(x)
rnorm(23)
contour(rnorm(23), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
dev.off()
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
image(x, x, z)
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
knitr::opts_chunk$set(cache = TRUE)
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
library(MASS)
library(pheatmap)
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("helper_functions.R")
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
chrlen = readRDS("data/chrlen.RDS")
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org<- as(readRDS("data/organoid_exposures_Aug21.rds"), 'matrix')
rownames(org) <- paste0('Sample ', 1:nrow(org))
createBarplot(org, remove_labels = TRUE, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
#------------ Load ------------#
natgen = natgen_metadata = list()
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
natgen[[1]] <- as.matrix(sig_data[,1:7])
createBarplot(natgen[[1]])
natgen_metadata[[1]] <- sig_data[,8:10]
natgen[[2]] <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
names(natgen_metadata) = names(natgen) = c('ExposuresNatGen', 'UpdatedExposures')
#------------ Only keep TCGA samples which are of good enough quality------------#
summary_ascat = read.table("data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
bool_tcga= lapply(natgen, function(i) grepl('TCGA', rownames(i)))
rm_na = function(df) !apply(df, 1, function(rw) all(is.na(rw)))
## modify the dataframes
for(version in 1:2){
rm_bad_samples = !(sapply(rownames(natgen[[version]])[bool_tcga[[version]]], give_short_names) %in% good_tcga)
natgen[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen[[version]] = natgen[[version]][rm_na(natgen[[version]]),]
natgen_metadata[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen_metadata[[version]] = natgen_metadata[[version]][rm_na(natgen_metadata[[version]]),]
}
rownames(natgen[[1]]) = as.character(sapply(rownames(natgen[[1]]), give_short_names))
#------------ add the non-TCGA samples to natgen2 ------------#
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
bool_tcga_metadata = lapply(natgen_metadata, function(i) grepl('TCGA', rownames(i))) ## re-compute
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!bool_tcga[[1]],])
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!bool_tcga[[1]],])
stopifnot(dim(natgen[[2]])[1] == dim(natgen_metadata[[2]])[1])
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
cat('The percentage of zeros in each cohort is:\n')
zeros_percentage = lapply(list(organoids=list(org),
ExposuresNatGen=split(x = natgen[[1]], f = factor(natgen_metadata[[1]]$study)),
UpdatedExposures=split(x = natgen[[2]], f = factor(natgen_metadata[[2]]$study))),
function(j) lapply(j, function(i) paste0(signif(sum(i==0)/length(i)*100, 5), '%')))
names(zeros_percentage) = c('organoids', 'ExposuresNatGen', 'UpdatedExposures')
print(zeros_percentage)
# Only selecting those which are TCGA
num_of_current_not_in_previous = sum(is.na(match(rownames(natgen[[2]])[bool_tcga[[2]]],
natgen[[1]])[bool_tcga[[1]]]))
num_of_previous_not_in_current = sum(is.na(match(rownames(natgen[[1]])[bool_tcga[[1]]],
rownames(natgen[[2]])[bool_tcga[[2]]])))
num_exposures_tcga_previous = length(rownames(natgen[[1]])[bool_tcga[[1]]]) ## Natgen exposures
num_exposures_tcga_current = length(rownames(natgen[[2]])[bool_tcga[[2]]]) ## new, from Ruben
which_natgen = 'UpdatedSignatures'
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Organoid ', rownames(org_clr))
pca_from_projection = prcomp_all = df_prcomp_exposures = list()
which_natgens = c('UpdatedExposures')
for(which_natgen in which_natgens){
prcomp_all[[which_natgen]] <- princomp(as(clr(natgen[[which_natgen]]), 'matrix'))
df_prcomp_exposures[[which_natgen]] <- data.frame(prcomp_all[[which_natgen]]$scores[,1:2], study=natgen_metadata[[which_natgen]]$study, labels=NA)
df_prcomp_exposures_org <- data.frame(predict(prcomp_all[[which_natgen]], (org_clr_robustzeroes))[,1:2], 'Organoid', rownames(org))
colnames(df_prcomp_exposures_org) <- c('Comp.1', 'Comp.2', 'study', 'labels')
df_prcomp_exposures[[which_natgen]] <- rbind(df_prcomp_exposures[[which_natgen]], df_prcomp_exposures_org)
df_prcomp_exposures[[which_natgen]]$labels <- gsub('Sample ', '', df_prcomp_exposures[[which_natgen]]$labels) ##here
myColors <- col_vector[1:length(unique(df_prcomp_exposures[[which_natgen]]$study))]
names(myColors) <- unique(df_prcomp_exposures[[which_natgen]]$study)
#ggthemr('flat dark')
#ggthemr_reset()
# set_swatch(myColors)
var_explained1 <- (prcomp_all[[which_natgen]]$sdev**2)/sum(prcomp_all[[which_natgen]]$sdev**2)
pca_from_projection[[which_natgen]] = ( ggplot(df_prcomp_exposures[[which_natgen]], aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures[[which_natgen]][!is.na(df_prcomp_exposures[[which_natgen]]$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw())
}
names(df_prcomp_exposures) = which_natgens
pca_from_projection[['UpdatedExposures_onlyTCGA']]= ggplot(df_prcomp_exposures[[which_natgen]][grepl('TCGA|Organoid',
rownames(df_prcomp_exposures[[which_natgen]])),],
aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures[[which_natgen]][grepl('TCGA|Organoid', rownames(df_prcomp_exposures[[which_natgen]])) & !is.na(df_prcomp_exposures[[which_natgen]]$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: only TCGA", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
pca_all_clinical <- pca_from_projection[['UpdatedExposures']]+theme(legend.position = 'bottom')
pca_tcga <- pca_from_projection[['UpdatedExposures_onlyTCGA']]+theme(legend.position = 'bottom')
grid.arrange(pca_all_clinical,
#pca_from_projection[[2]]+theme(legend.position = 'bottom'),
pca_tcga,
ncol=2)
ggsave(filename = "figures/pca_all.pdf", plot = pca_all_clinical)
ggsave(filename = "figures/pca_tcga.pdf", plot = pca_tcga)
selected_underrepresented_left <- natgen$UpdatedExposures[which(df_prcomp_exposures$UpdatedExposures$Comp.1 < min(df_prcomp_exposures$UpdatedExposures[df_prcomp_exposures$UpdatedExposures$study == 'Organoid','Comp.1'])),]
selected_underrepresented_right <- natgen$UpdatedExposures[which(df_prcomp_exposures$UpdatedExposures$Comp.1 > max(df_prcomp_exposures$UpdatedExposures[df_prcomp_exposures$UpdatedExposures$study == 'Organoid','Comp.1'])),]
grid.arrange(createBarplot(as(selected_underrepresented_left, 'matrix'), remove_labels = TRUE)+
ggtitle('Underrepresented (left)')+theme(legend.position = "bottom"),
createBarplot(as(selected_underrepresented_right, 'matrix'), remove_labels = TRUE)+
ggtitle('Underrepresented (right)')+theme(legend.position = "bottom"),
createBarplot(org, remove_labels = TRUE)+ggtitle('Organoids')+theme(legend.position = "bottom"),
ncol=3)
par(mfrow=c(1,2))
for(i in 1:2){
barplot(prcomp_all$UpdatedExposures$loadings[,i], main=paste0('Loadings of the\n', c('first', 'second')[i], ' principal component'))
}
all_natgen = lapply(natgen, function(i) rbind(i, org))
natgen_clr = lapply(natgen, function(i) as(clr(i), 'matrix'))
names(natgen_clr) = names(natgen)
organoid_metadata <- cbind.data.frame(study=rep('organoids', nrow(org_clr_robustzeroes)), age=NA, age.cat=NA)
rownames(organoid_metadata) <- rownames(org_clr_robustzeroes)
all_metadata <- lapply(natgen_metadata, function(i) rbind(i, organoid_metadata))
all_clr <- lapply(natgen_clr, function(i) rbind(i, org_clr_robustzeroes))
names(all_clr) = names(all_metadata) = names(all_natgen) =  names(natgen)
give_dendrogram <- function(which_natgen){
rm_infinite <- apply(all_clr[[which_natgen]], 1, function(x) any(is.infinite(x)))
cat(which(rm_infinite), 'removed due to infinite values')
all_clr_clean <- all_clr[[which_natgen]][!rm_infinite,]
dendro_all <- as.dendrogram(hclust(dist(all_clr_clean)))
return(dendro_all)
}
plot_dendro = function(dendro_all, which_natgen, which_label="Symbol"){
levels_study <- levels(factor(all_metadata[[which_natgen]][labels(dendro_all),'study']))
levels_study
which_level_organoids <- which(grepl('organoids', levels_study))
cols <- rep(NA, length(levels_study))
colour_organoid = 'blue' #'#88E9A2'
cols[which_level_organoids] <- colour_organoid
if(which_natgen == 'ExposuresNatGen'){
cols[-which_level_organoids] <- c('#FFA07A', '#FA8072', '#E9967A', '#F08080')
}else if(which_natgen == 'UpdatedExposures'){
cols[-which_level_organoids] <- c('#FFA07A')
}
labels_colors(dendro_all) <- cols[factor(all_metadata[[which_natgen]][labels(dendro_all),'study'])]
labels_org_bool <- labels_colors(dendro_all) == colour_organoid
if(which_label == "Symbol"){
labels(dendro_all)[labels_org_bool] <- rep('○', sum(labels_org_bool))#rep('●', sum(labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep('•', sum(!labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}else{
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}
cex_labels <- rep(1, length(labels_org_bool))
cex_labels[labels_org_bool] <- 0.9
dendro_all <- set(dendro_all, "labels_cex", cex_labels)
plot(dendro_all, cex=0.4, cex.lab=4, main='Dendrogram based on the exposures\n(Aitchison distance)')
}
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures')
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures', which_label="not_symbol")
pdf("figures/dendrogram.pdf", width = 5, height = 4)
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures')
dev.off()
pdf("figures/dendrogram_with_labels.pdf", width = 10, height = 8)
par(mar=c(8,4,4,4))
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures', which_label="not_symbol")
dev.off()
labels(dendro_UpdatedExposures)[grep('Sample', labels(dendro_UpdatedExposures))]
heatmap_dendrogram_df = t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)),rownames(all_natgen$UpdatedExposures))],])
colnames_heatmap_dendrogram_df = colnames(heatmap_dendrogram_df)
colnames_heatmap_dendrogram_df[1:10]
colnames_heatmap_dendrogram_df[!grep('Sample',colnames_heatmap_dendrogram_df)] = ""
colnames_heatmap_dendrogram_df[1:10]
grep('Sample',colnames_heatmap_dendrogram_df)
!grep('Sample',colnames_heatmap_dendrogram_df)
which(!grep('Sample',colnames_heatmap_dendrogram_df))
colnames_heatmap_dendrogram_df
rm(list = ls())
library(optparse)
library(rstan)
library(ggplot2)
library(dplyr)
library(reshape2)
library(MCMCpack)
library(plyr)
library(CompSign)
library(scales)
library(optparse)
debug=T
if(debug){
setwd("/Users/morril01/Documents/PhD/GlobalDA/code/")
opt = list(); opt$files_posteriors = c("../data/inference/Kidney-RCC.papillary_signatures_20000_MROO.RData", "../data/inference/Kidney-RCC.papillary_signatures_20000_DMROO.RData", "../data/inference/Kidney-RCC.papillary_signatures_20000_LNMROO.RData")
}else{
option_list = list(
make_option(c("--files_posteriors"), type="character", default=NA,
help="File with the posterior, with directory included", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
opt$files_posteriors = strsplit(opt$files_posteriors, " ")[[1]]
print(opt$files_posteriors)
}
cat('Arguments read')
print(opt$files_posteriors)
source("3_analysis/helper/helper_analyse_posteriors.R")
source("3_analysis/helper/helper_simulation.R")
source("2_inference/helper/helper_DA_stan.R")
if(length(opt$files_posteriors) == 1){
files_posterior_split = sapply(opt$files_posteriors, function(i) strsplit(i, "_")[[1]])
}else if(length(opt$files_posteriors) >= 2){
files_posterior_split = sapply(opt$files_posteriors, function(i) strsplit(i, "_")[[1]])
}else if(length(opt$files_posteriors) > 2){
files_posterior_split = do.call('cbind', sapply(opt$files_posteriors, function(i) strsplit(i, "_")[[1]]))
}
print(files_posterior_split)
ct = unique(basename(files_posterior_split[1,]))
type_feature = unique(files_posterior_split[2,])
nits =  as.numeric(files_posterior_split[3,])
model = gsub("ROO.RData", "",files_posterior_split[4,])
names(nits) = model
donors = read.table("../data/restricted/pcawg/icgc-dataset-1591612699408/donor.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
files_donors = read.table("../data/restricted/pcawg/repository_1567600367.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
give_roo_wrapper = function(.it_features, .list_CT){
it_features = .it_features
list_CT = .list_CT
source("3_analysis/helper/load_ROO.R", local = TRUE)
return(objects_sigs_per_CT[[it_features]][[list_CT]])
}
ROO_object = give_roo_wrapper(type_feature, ct)
## Load (1) the posteriors and (2) the covariate matrix Z and the random effect matrix Z
posteriors_and_covariates = lapply(opt$files_posteriors,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA" ){
# no file
list(NA, NA)
}else{
print(f)
load(f)
fit = tryCatch(rstan::extract(fit_stan))
if(is.null(fit)){
## no samples
list(NA, NA)
}else{
list(fit, list(X=X, Z=Z))
}
}
})
getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
knitr::opts_chunk$set(cache = TRUE)
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
library(MASS)
library(pheatmap)
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("helper_functions.R")
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
chrlen = readRDS("data/chrlen.RDS")
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org<- as(readRDS("data/organoid_exposures_Aug21.rds"), 'matrix')
rownames(org) <- paste0('Sample ', 1:nrow(org))
createBarplot(org, remove_labels = TRUE, order_labels = names(sort(org[,1]))) +
ggtitle('Exposures for the organoids')
#------------ Load ------------#
natgen = natgen_metadata = list()
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
natgen[[1]] <- as.matrix(sig_data[,1:7])
createBarplot(natgen[[1]])
natgen_metadata[[1]] <- sig_data[,8:10]
natgen[[2]] <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
names(natgen_metadata) = names(natgen) = c('ExposuresNatGen', 'UpdatedExposures')
#------------ Only keep TCGA samples which are of good enough quality------------#
summary_ascat = read.table("data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
bool_tcga= lapply(natgen, function(i) grepl('TCGA', rownames(i)))
rm_na = function(df) !apply(df, 1, function(rw) all(is.na(rw)))
## modify the dataframes
for(version in 1:2){
rm_bad_samples = !(sapply(rownames(natgen[[version]])[bool_tcga[[version]]], give_short_names) %in% good_tcga)
natgen[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen[[version]] = natgen[[version]][rm_na(natgen[[version]]),]
natgen_metadata[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen_metadata[[version]] = natgen_metadata[[version]][rm_na(natgen_metadata[[version]]),]
}
rownames(natgen[[1]]) = as.character(sapply(rownames(natgen[[1]]), give_short_names))
#------------ add the non-TCGA samples to natgen2 ------------#
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
bool_tcga_metadata = lapply(natgen_metadata, function(i) grepl('TCGA', rownames(i))) ## re-compute
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!bool_tcga[[1]],])
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!bool_tcga[[1]],])
stopifnot(dim(natgen[[2]])[1] == dim(natgen_metadata[[2]])[1])
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
cat('The percentage of zeros in each cohort is:\n')
zeros_percentage = lapply(list(organoids=list(org),
ExposuresNatGen=split(x = natgen[[1]], f = factor(natgen_metadata[[1]]$study)),
UpdatedExposures=split(x = natgen[[2]], f = factor(natgen_metadata[[2]]$study))),
function(j) lapply(j, function(i) paste0(signif(sum(i==0)/length(i)*100, 5), '%')))
names(zeros_percentage) = c('organoids', 'ExposuresNatGen', 'UpdatedExposures')
print(zeros_percentage)
# Only selecting those which are TCGA
num_of_current_not_in_previous = sum(is.na(match(rownames(natgen[[2]])[bool_tcga[[2]]],
natgen[[1]])[bool_tcga[[1]]]))
num_of_previous_not_in_current = sum(is.na(match(rownames(natgen[[1]])[bool_tcga[[1]]],
rownames(natgen[[2]])[bool_tcga[[2]]])))
num_exposures_tcga_previous = length(rownames(natgen[[1]])[bool_tcga[[1]]]) ## Natgen exposures
num_exposures_tcga_current = length(rownames(natgen[[2]])[bool_tcga[[2]]]) ## new, from Ruben
which_natgen = 'UpdatedSignatures'
org_clr <- clr_mat(org)
org_clr_robustzeroes <- as(compositions::clr(org), 'matrix')
rownames(org_clr_robustzeroes) <- rownames(org_clr) <- paste0('Organoid ', rownames(org_clr))
pca_from_projection = prcomp_all = df_prcomp_exposures = list()
which_natgens = c('UpdatedExposures')
for(which_natgen in which_natgens){
prcomp_all[[which_natgen]] <- princomp(as(clr(natgen[[which_natgen]]), 'matrix'))
df_prcomp_exposures[[which_natgen]] <- data.frame(prcomp_all[[which_natgen]]$scores[,1:2], study=natgen_metadata[[which_natgen]]$study, labels=NA)
df_prcomp_exposures_org <- data.frame(predict(prcomp_all[[which_natgen]], (org_clr_robustzeroes))[,1:2], 'Organoid', rownames(org))
colnames(df_prcomp_exposures_org) <- c('Comp.1', 'Comp.2', 'study', 'labels')
df_prcomp_exposures[[which_natgen]] <- rbind(df_prcomp_exposures[[which_natgen]], df_prcomp_exposures_org)
df_prcomp_exposures[[which_natgen]]$labels <- gsub('Sample ', '', df_prcomp_exposures[[which_natgen]]$labels) ##here
myColors <- col_vector[1:length(unique(df_prcomp_exposures[[which_natgen]]$study))]
names(myColors) <- unique(df_prcomp_exposures[[which_natgen]]$study)
#ggthemr('flat dark')
#ggthemr_reset()
# set_swatch(myColors)
var_explained1 <- (prcomp_all[[which_natgen]]$sdev**2)/sum(prcomp_all[[which_natgen]]$sdev**2)
pca_from_projection[[which_natgen]] = ( ggplot(df_prcomp_exposures[[which_natgen]], aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures[[which_natgen]][!is.na(df_prcomp_exposures[[which_natgen]]$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: ", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw())
}
names(df_prcomp_exposures) = which_natgens
pca_from_projection[['UpdatedExposures_onlyTCGA']]= ggplot(df_prcomp_exposures[[which_natgen]][grepl('TCGA|Organoid',
rownames(df_prcomp_exposures[[which_natgen]])),],
aes(x=Comp.1, y=Comp.2, col=study))+
geom_point() +
geom_label_repel(data = df_prcomp_exposures[[which_natgen]][grepl('TCGA|Organoid', rownames(df_prcomp_exposures[[which_natgen]])) & !is.na(df_prcomp_exposures[[which_natgen]]$labels),], aes(label=labels))+
ggtitle(paste0("PCA of both datasets with projection,\n dataset: only TCGA", which_natgen))+
labs(x=paste0('PC1 (', round(var_explained1[1], 2)*100, '%)'),
y=paste0('PC2 (', round(var_explained1[2], 2)*100, '%)'))+
theme_bw()
pca_all_clinical <- pca_from_projection[['UpdatedExposures']]+theme(legend.position = 'bottom')
pca_tcga <- pca_from_projection[['UpdatedExposures_onlyTCGA']]+theme(legend.position = 'bottom')
grid.arrange(pca_all_clinical,
#pca_from_projection[[2]]+theme(legend.position = 'bottom'),
pca_tcga,
ncol=2)
ggsave(filename = "figures/pca_all.pdf", plot = pca_all_clinical)
ggsave(filename = "figures/pca_tcga.pdf", plot = pca_tcga)
selected_underrepresented_left <- natgen$UpdatedExposures[which(df_prcomp_exposures$UpdatedExposures$Comp.1 < min(df_prcomp_exposures$UpdatedExposures[df_prcomp_exposures$UpdatedExposures$study == 'Organoid','Comp.1'])),]
selected_underrepresented_right <- natgen$UpdatedExposures[which(df_prcomp_exposures$UpdatedExposures$Comp.1 > max(df_prcomp_exposures$UpdatedExposures[df_prcomp_exposures$UpdatedExposures$study == 'Organoid','Comp.1'])),]
grid.arrange(createBarplot(as(selected_underrepresented_left, 'matrix'), remove_labels = TRUE)+
ggtitle('Underrepresented (left)')+theme(legend.position = "bottom"),
createBarplot(as(selected_underrepresented_right, 'matrix'), remove_labels = TRUE)+
ggtitle('Underrepresented (right)')+theme(legend.position = "bottom"),
createBarplot(org, remove_labels = TRUE)+ggtitle('Organoids')+theme(legend.position = "bottom"),
ncol=3)
par(mfrow=c(1,2))
for(i in 1:2){
barplot(prcomp_all$UpdatedExposures$loadings[,i], main=paste0('Loadings of the\n', c('first', 'second')[i], ' principal component'))
}
all_natgen = lapply(natgen, function(i) rbind(i, org))
natgen_clr = lapply(natgen, function(i) as(clr(i), 'matrix'))
names(natgen_clr) = names(natgen)
organoid_metadata <- cbind.data.frame(study=rep('organoids', nrow(org_clr_robustzeroes)), age=NA, age.cat=NA)
rownames(organoid_metadata) <- rownames(org_clr_robustzeroes)
all_metadata <- lapply(natgen_metadata, function(i) rbind(i, organoid_metadata))
all_clr <- lapply(natgen_clr, function(i) rbind(i, org_clr_robustzeroes))
names(all_clr) = names(all_metadata) = names(all_natgen) =  names(natgen)
give_dendrogram <- function(which_natgen){
rm_infinite <- apply(all_clr[[which_natgen]], 1, function(x) any(is.infinite(x)))
cat(which(rm_infinite), 'removed due to infinite values')
all_clr_clean <- all_clr[[which_natgen]][!rm_infinite,]
dendro_all <- as.dendrogram(hclust(dist(all_clr_clean)))
return(dendro_all)
}
plot_dendro = function(dendro_all, which_natgen, which_label="Symbol"){
levels_study <- levels(factor(all_metadata[[which_natgen]][labels(dendro_all),'study']))
levels_study
which_level_organoids <- which(grepl('organoids', levels_study))
cols <- rep(NA, length(levels_study))
colour_organoid = 'blue' #'#88E9A2'
cols[which_level_organoids] <- colour_organoid
if(which_natgen == 'ExposuresNatGen'){
cols[-which_level_organoids] <- c('#FFA07A', '#FA8072', '#E9967A', '#F08080')
}else if(which_natgen == 'UpdatedExposures'){
cols[-which_level_organoids] <- c('#FFA07A')
}
labels_colors(dendro_all) <- cols[factor(all_metadata[[which_natgen]][labels(dendro_all),'study'])]
labels_org_bool <- labels_colors(dendro_all) == colour_organoid
if(which_label == "Symbol"){
labels(dendro_all)[labels_org_bool] <- rep('○', sum(labels_org_bool))#rep('●', sum(labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep('•', sum(!labels_org_bool))
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}else{
labels(dendro_all)[!labels_org_bool] <- rep(NA, sum(!labels_org_bool))
}
cex_labels <- rep(1, length(labels_org_bool))
cex_labels[labels_org_bool] <- 0.9
dendro_all <- set(dendro_all, "labels_cex", cex_labels)
plot(dendro_all, cex=0.4, cex.lab=4, main='Dendrogram based on the exposures\n(Aitchison distance)')
}
dendro_UpdatedExposures = give_dendrogram('UpdatedExposures')
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures')
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures', which_label="not_symbol")
pdf("figures/dendrogram.pdf", width = 5, height = 4)
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures')
dev.off()
pdf("figures/dendrogram_with_labels.pdf", width = 10, height = 8)
par(mar=c(8,4,4,4))
plot_dendro(dendro_UpdatedExposures, which_natgen = 'UpdatedExposures', which_label="not_symbol")
dev.off()
heatmap_dendrogram_df = t(all_natgen$UpdatedExposures[rownames(all_natgen$UpdatedExposures)[match(gsub("Organoid ", "", labels(dendro_UpdatedExposures)),rownames(all_natgen$UpdatedExposures))],])
colnames_heatmap_dendrogram_df = colnames(heatmap_dendrogram_df)
# colnames_heatmap_dendrogram_df[1:10]
colnames_heatmap_dendrogram_df[!grepl('Sample',colnames_heatmap_dendrogram_df)] = ""
colnames_heatmap_dendrogram_df[grepl('Sample',colnames_heatmap_dendrogram_df)] = "*"
head(melt(heatmap_dendrogram_df))
ggplot(melt(heatmap_dendrogram_df), aes(x=Var1, y=Var2, fill=value))+geom_tile()
dev.off()
ggplot(melt(heatmap_dendrogram_df), aes(x=Var1, y=Var2, fill=value))+geom_tile()
dev.off()
