geom_smooth(method = "lm") +
labs(x = "Days", y = "Weight", title="Mouse 642") +
theme(panel.background = element_rect(fill = NA), axis.text.x = element_text(angle= 30, size = 10)) + scale_x_continuous(breaks = seq (0, 500, 50)) + scale_y_log10()
plot.PDO4
save_plot("../figures/PDO4.pdf", plot.PDO4)
#PDO5
plot.PDO5 <- micewlatest.df %>%
filter(mouseNumber == "645") %>%
ggplot(aes(x=days, y=weight)) +
geom_point(color= "darkgreen", size = 1) +
geom_smooth(method = "lm") +
labs(x = "Days", y = "Weight", title="Mouse 645") +
theme(panel.background = element_rect(fill = NA), axis.text.x = element_text(angle= 30, size = 10)) + scale_x_continuous(breaks = seq (0, 500, 50)) + scale_y_log10()
plot.PDO5
save_plot("../figures/PDO5.pdf", plot.PDO5)
#PDO8
plot.PDO8 <- micewlatest.df %>%
filter(mouseNumber == "466") %>%
ggplot(aes(x=days, y=weight)) +
geom_point(color= "darkgreen", size = 1) +
geom_smooth(method = "lm") +
labs(x = "Days", y = "Weight", title="Mouse 466") +
theme(panel.background = element_rect(fill = NA), axis.text.x = element_text(angle= 30, size = 10)) + scale_x_continuous(breaks = seq (0, 500, 50)) + scale_y_log10()
plot.PDO8
save_plot("../figures/PDO8.pdf", plot.PDO8)
#PDO10
plot.PDO10 <- micewlatest.df %>%
filter(mouseNumber == "471") %>%
ggplot(aes(x=days, y=weight)) +
geom_point(color= "darkgreen", size = 1) +
geom_smooth(method = "lm") +
labs(x = "Days", y = "Weight", title="Mouse 471") +
theme(panel.background = element_rect(fill = NA), axis.text.x = element_text(angle= 30, size = 10)) + scale_x_continuous(breaks = seq (0, 500, 50)) + scale_y_log10()
plot.PDO10
save_plot("../figures/PDO10.pdf", plot.PDO10)
#PDO12
plot.PDO12 <- micewlatest.df %>%
filter(mouseNumber == "468") %>%
ggplot(aes(x=days, y=weight)) +
geom_point(color= "darkgreen", size = 1) +
geom_smooth(method = "lm") +
labs(x = "Days", y = "Weight", title="Mouse 468") +
theme(panel.background = element_rect(fill = NA), axis.text.x = element_text(angle= 30, size = 10)) + scale_x_continuous(breaks = seq (0, 500, 50)) + scale_y_log10()
plot.PDO12
save_plot("../figures/PDO12.pdf", plot.PDO12)
library(tidyverse)
library(readr)
PDS_PDO <- read_csv("../data/20191107-auc.csv")
View(X20191107_auc)
PDS_PDO$sample <- as.factor(PDS_PDO$sample)
PDS_PDO$sample <- as.factor(PDS_PDO$sample)
PDS_PDO.plot<- ggplot(data = PDS_PDO, aes(auc_ll5.sph, auc_ll5.org, colour = sample))+
geom_point() +
labs(x="Patient-derived spheroids", y="Patient-derived organoids")+
theme_classic() +
geom_smooth(method=lm, se=FALSE)
cor.test(PDS_PDO$auc_ll5.org, PDS_PDO$auc_ll5.sph, method = "pearson", conf.level = 0.95)
plot(PDS_PDO.plot)
passagesorganoids <- read_csv ("../data/AUCdifferentPassagesW.csv")
passagesorganoids$sample <- as.factor(passagesorganoids$sample)
passagesorganoids<-spread(passagesorganoids, key=passage, value=AUC)
passagesorganoid.plot<- ggplot(data = passagesorganoids, aes(early, late, colour = sample))+
geom_point() +
theme_classic() +
geom_smooth(method=lm)
plot(passagesorganoid.plot)
bioreporganoids <- read_csv ("../data/AUCbiolrepW.csv")
bioreporganoids$sample <- as.factor(bioreporganoids$sample)
bioreporganoids<-spread(bioreporganoids, key=replicate, value=AUC)
bioreporganoid.plot<- ggplot(data = bioreporganoids, aes(rep1, rep2, colour = sample))+
geom_point() +
theme_classic() +
geom_smooth(method=lm)
cor.test(bioreporganoids$rep1, bioreporganoids$rep2, method = "pearson", conf.level = 0.95)
plot(bioreporganoid.plot)
install.packages("googlesheets")
googlesheets::gs_url("https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0")
remove.packages("googlesheets")
install.packages('gsheet')
library(gsheet)
gsheet2tbl('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file = gsheet2tbl('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file
summary_file$`<!DOCTYPE html>`
summary_file = gsheet2text('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file = gsheet2text('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file
summary_file = gsheet2tbl('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file
xtable::xtable(summary_file)
require(GSVA)
require(GSVAdata)
c2BroadSets
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
data(c2BroadSets) ## from GSVAdata
c2BroadSets
c2BroadSets$NAKAMURA_CANCER_MICROENVIRONMENT_UP
c2BroadSets
c2BroadSets$NAKAMURA_CANCER_MICROENVIRONMENT_DN
names(c2BroadSets)
names(c2BroadSets)[grep('microenvironment', names(c2BroadSets))]
View(names(c2BroadSets))
vignette(gsvaData)
vignette("gsvaData")
vignette("GSVAData")
vignette
vignette("GSVAdata")
?GSVAdata
d <- 5
beta = rbind(runif(d-1), runif(d-1))
beta
n <- 200
rep(c(0,1), each=n2)
rep(c(0,1), each=n)
x = cbind(rep(1, n*2), rep(c(0,1), each=n))
x %*% beta
probs = x %*% beta
lambda_nmuts <- 150
beta = rbind(runif(d-1), runif(d-1))
x = cbind(rep(1, n*2), rep(c(0,1), each=n))
probs = x %*% beta
apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1)
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
Y
probs
probs = cbind(x %*% beta, 0)
probs
source("~/Documents/PhD/GlobalDA/code/2_inference_TMB/helper_TMB.R")
probs = softmax(cbind(x %*% beta, 0))
probs
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## are there bias in standard multinomial regression from nnet?
library(nnet)
nnet::multinom(formula = Y~x)
res_multinom = nnet::multinom(formula = Y~x)
res_multinom
res_multinom$coefnames
coef(res_multinom)
res_multinom = nnet::multinom(formula = Y~x[,2])
res_multinom
coef(res_multinom)
beta
Y
Y[,ncol(Y):1]
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
coef(res_multinom)
beta
coef(res_multinom)[(d-1):1,]
coef(res_multinom)[(d-1):1,]
t(beta)
list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta))
give_est = function()
give_est = function(){
probs = softmax(cbind(x %*% beta, 0))
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
return(list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta)))
}
}
give_est = function(){
probs = softmax(cbind(x %*% beta, 0))
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
return(list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta)))
}
ests = replicate(n = 100, give_est())
ests
ests[est_beta,]
ests['est_beta',]
sapply(ests['est_beta',], as.vector)
head(melt(sapply(ests['est_beta',], as.vector)))
library(reshape2)
head(melt(sapply(ests['est_beta',], as.vector)))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_boxplot()
library(ggplot2)
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_boxplot()
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_boxplot()
ests
sapply(ests['est_beta',], as.vector)
beta
as.vector(beta)
bias = sapply(ests['est_beta',], function(i) as.vector(i) - as.vector(beta))
bias
ggplot(bias, aes(x=Var1, group=Var1, y=value))+geom_boxplot()
ggplot(melt(bias), aes(x=Var1, group=Var1, y=value))+geom_boxplot()
bias
bias = melt(bias)
bias
bias$Var1
bias$type_beta = rep('Intercept', 'Slope')
bias$type_beta
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*2*n)
bias
dim(bias)
d-1
n
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n)
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n/2)
head(bias)
1:(d-1)
rep(c(1:(d-1), each=2))
rep(1:(d-1), each=2)
rep(rep(1:(d-1), each=2), n/2)
length(rep(rep(1:(d-1), each=2), n/2))
dim(bias)
bias$idx_param = rep(rep(1:(d-1), each=2), n/2)
bias$param = paste0(bias$type_beta, bias$idx_param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta, scales = "free_x")
ests
ests['est_beta',]
head(melt(ests['est_beta',]))
ests['est_beta',]
head(melt(as.vector(ests['est_beta',])))
head(melt(sapply(ests['est_beta',], as.vector)))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_point()
beta
as.vector(beta)
cbind(1:(2*(d-1)), as.vector(beta))
cbind.data.frame(Var11:(2*(d-1)), value=as.vector(beta))
cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_point()+
geom_line(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
beta
ests['est_beta',
]
bias = sapply(ests['est_beta',], function(i) as.vector(i) - as.vector(t(beta)))
bias = melt(bias)
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n/2)
bias$idx_param = rep(rep(1:(d-1), each=2), n/2)
bias$param = paste0(bias$type_beta, bias$idx_param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta, scales = "free_x")
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(t(beta))), aes(x=Var1, y=value))
rm(list = ls())
setwd("~/Documents/PhD/GlobalDA/code/2_inference_TMB/")
library(TMB)
library(ggplot2)
library(dplyr)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
source("../2_inference/helper/helper_DA_stan.R") ## for normalise_rw
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
TMB::compile("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/fullRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda"))
TMB::compile("mm_multinomial/diagRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_dirichletmultinomial_single_lambda"))
TMB::compile("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/FE_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/FE_dirichletmultinomial"))
TMB::compile("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/diagRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/diagRE_ME_dirichletmultinomial"))
TMB::compile("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/sparseRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/sparseRE_ME_dirichletmultinomial"))
TMB::compile("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/sparseRE_ME_dirichletmultinomialsinglelambda.cpp", "-std=gnu++17")
dyn.load(dynlib("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/sparseRE_ME_dirichletmultinomialsinglelambda"))
TMB::compile("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/sparseRE_ME_dirichletmultinomial_singlecov.cpp", "-std=gnu++17")
dyn.load(dynlib("../../current/Dirichlet_Multinomial_Dom/code/TMB_models/sparseRE_ME_dirichletmultinomial_singlecov"))
enough_samples = readLines("~/Desktop/CT_sufficient_samples.txt")
df_all_samples = data.frame(do.call('rbind', lapply(enough_samples, function(i) rbind(c(i, 'signatures'), c(i, "nucleotidesubstitution1")))))
nonexogenous = read.table("../../data/cosmic/exogenous_signatures_SBS.txt", sep = "\t", comment.char = "#", fill = F)
library(parallel)
idx=13
i = df_all_samples[idx,]
typedata = i[1,2]
obj_subset <- give_subset_sigs_TMBobj(load_PCAWG(ct = i[1,1], typedata = i[1,2]),
sigs_to_remove = unique(nonexogenous$V1))
obj_subset
obj_subset
colSums(obj_subset$Y)
rowSums(obj_subset)
rowSums(obj_subset$Y)
obj_subset
obj_subset$z
dim(obj_subset$z)
dim(obj_subset$x)
xxxx=load_PCAWG(ct = i[1,1], typedata = i[1,2])
dim(xxxx$x)
dim(xxxx$z)
give_subset_sigs_TMBobj = function(sig_obj, sigs_to_remove){
sig_obj$Y = sig_obj$Y[,!(colnames(sig_obj$Y) %in% sigs_to_remove)]
keep_obs = rowSums(sig_obj$Y) > 0
sig_obj$Y = sig_obj$Y[keep_obs,]
sig_obj$x = sig_obj$x[keep_obs,]
sig_obj$z = sig_obj$z[keep_obs,]
return(sig_obj)
}
obj_subset <- give_subset_sigs_TMBobj(load_PCAWG(ct = i[1,1], typedata = i[1,2]),
sigs_to_remove = unique(nonexogenous$V1))
dim(obj_subset$x)
dim(obj_subset$z)
dim(obj_subset$Y)
x = wrapper_run_TMB_debug(object = obj_subset,
model = "fullRE_DM", return_report=T)
x
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "sparseRE_nonexo_DM_",
paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
which(df_all_samples$X2 == "signatures")
which(df_all_samples$X2 == "signatures")[-(1:5)]
which(df_all_samples$X2 == "signatures")[-(1:6)]
which(df_all_samples$X2 == "signatures")[-(1:7)]
# mclapply(which(df_all_samples$X2 == "signatures"),
mclapply(which(df_all_samples$X2 == "signatures")[-(1:7)],
function(idx){
i = df_all_samples[idx,]
typedata = i[1,2]
obj_subset <- give_subset_sigs_TMBobj(load_PCAWG(ct = i[1,1], typedata = i[1,2]),
sigs_to_remove = unique(nonexogenous$V1))
if(dim(obj_subset$Y)[2] <  dim(load_PCAWG(ct = i[1,1], typedata = i[1,2])$Y)[2]){
x = wrapper_run_TMB_debug(object = obj_subset,
model = "fullRE_DM", return_report=T)
x
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "sparseRE_nonexo_DM_",
paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
# idx_cov_to_fill_read <- as.integer(strsplit(subset_sigs_sparse_cov_idx[subset_sigs_sparse_cov_idx$V1 == ct,2], ",")[[1]])
# x = wrapper_run_TMB_debug(object = obj_subset, iter.max = 500, init_log_lambda = 3, return_report = T,
#                       model = "sparseRE_DM",
#                       idx_cov_to_fill=idx_cov_to_fill_read-1)
# saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "sparseRE_nonexo_DM_",
#                                 paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
}
})
mclapply(which(df_all_samples$X2 == "signatures"),
function(idx){
i = df_all_samples[idx,]
typedata = i[1,2]
obj_subset <- give_subset_sigs_TMBobj(load_PCAWG(ct = i[1,1], typedata = i[1,2]),
sigs_to_remove = unique(nonexogenous$V1))
if(dim(obj_subset$Y)[2] <  dim(load_PCAWG(ct = i[1,1], typedata = i[1,2])$Y)[2]){
x = wrapper_run_TMB_debug(object = obj_subset,
model = "fullRE_DM", return_report=T)
x
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
# idx_cov_to_fill_read <- as.integer(strsplit(subset_sigs_sparse_cov_idx[subset_sigs_sparse_cov_idx$V1 == ct,2], ",")[[1]])
# x = wrapper_run_TMB_debug(object = obj_subset, iter.max = 500, init_log_lambda = 3, return_report = T,
#                       model = "sparseRE_DM",
#                       idx_cov_to_fill=idx_cov_to_fill_read-1)
# saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "sparseRE_nonexo_DM_",
#                                 paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
}
})
aa <- readRDS(ile=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
aa <- readRDS(file=paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(df_all_samples[idx,], collapse = "_"), ".RDS"))
aa
wald_TMB_wrapper(aa)
df_all_samples[idx,]
df_all_samples
df_all_samples[df_all_samples$X2 == "signatures",]
df_all_samples[df_all_samples$X2 == "signatures",1]
sapply(df_all_samples[df_all_samples$X2 == "signatures",1], function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
})
sapply(sapply(df_all_samples[df_all_samples$X2 == "signatures",1], function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
}), function(j){
aa <- readRDS(file=j)
cbind(i, wald_TMB_wrapper(aa))
})
sapply(df_all_samples[df_all_samples$X2 == "signatures",1], function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
})
sapply(sapply(df_all_samples[df_all_samples$X2 == "signatures",1], function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
}), function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
df_all_samples[idx,]
sapply(apply(df_all_samples[df_all_samples$X2 == "signatures",], 1, function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
}), function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
apply(df_all_samples[df_all_samples$X2 == "signatures",], 1, function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
})
fles_nonexo <- apply(df_all_samples[df_all_samples$X2 == "signatures",], 1, function(i){
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/", "fulLRE_nonexo_DM_",
paste0(i, collapse = "_"), ".RDS")
})
fles_nonexo
sapply(fles_nonexo, function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1"2"], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1:2], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1:10], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1:20], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
length(fles_nonexo)
sapply(fles_nonexo[1:25], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1:27], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1:26], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
sapply(fles_nonexo[1:25], function(j){
aa <- readRDS(file=j)
# cbind(i, wald_TMB_wrapper(aa))
})
fles_nonexo[26]
sapply(fles_nonexo[1:25], function(j){
aa <- try(readRDS(file=j))
if(typeof(aa) == "character"){
c(i, NA)
}else{
c(i, wald_TMB_wrapper(aa))
}
})
t(sapply(fles_nonexo[1:25], function(j){
aa <- try(readRDS(file=j))
if(typeof(aa) == "character"){
c(i, NA)
}else{
c(i, wald_TMB_wrapper(aa))
}
}))
t(sapply(fles_nonexo, function(j){
aa <- try(readRDS(file=j))
if(typeof(aa) == "character"){
c(i, NA)
}else{
c(i, wald_TMB_wrapper(aa))
}
}))
t(sapply(fles_nonexo, function(j){
aa <- try(readRDS(file=j))
if(typeof(aa) == "character"){
c(j, NA)
}else{
c(j, wald_TMB_wrapper(aa))
}
}))
t(sapply(fles_nonexo, function(j){
aa <- try(readRDS(file=j))
if(typeof(aa) == "character"){
c(basename(j), NA)
}else{
c(basename(j), wald_TMB_wrapper(aa))
}
}))
rm(list = ls())
library(reshape2)
library(ggplot2)
library(ggdendro)
library(pheatmap)
library(readxl)
library(gridExtra)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
renaming <- readxl::read_excel("../../RNASeq_DE_resistant_sensitive/files/PDOnameProperSample_sWGS_RNAseq.xlsx")
organoid_list = c('118976org', '119148orgb', '23868org')
absCN = lapply(paste0("../data/absCN_clean_", organoid_list, ".RDS"), readRDS)
names(absCN) = organoid_list
names(absCN) = gsub("orgb", "org", names(absCN))
names(absCN) = renaming$PDO[match(names(absCN), renaming$ID)]
saveRDS(absCN, "../robjects/fig2_absCN.RDS")
organoid_list = renaming$PDO[match(gsub("orgb", "org", organoid_list), renaming$ID)]
# image(absCN[[1]])
#
# plot(hclust(dist(absCN[[org_it]])))
# org_it = '23868org'
## remove the outliers
outliers = list()
outliers$`118976org` = c(12, 10, 11, 7, 5, 6, 4, 3, 1, 2, 8, 9, 158)
outliers$`119148orgb` = c(13, 1, 2, 8, 12, 9, 3, 10, 7, 6, 5, 4, 11, 379, 381)
outliers$`23868org` = c(1,2,3, 4, 5, 6, 7, 8)
names(outliers) = renaming$PDO[match(gsub("orgb", "org", names(outliers)), renaming$ID)]
