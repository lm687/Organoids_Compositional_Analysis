visEdges(arrows ="to")
graph # plot
knitr::opts_chunk$set(cache = TRUE)
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
library(MASS)
library(pheatmap)
library(ggdendro)
library(readxl)
library(CNTools)
library(GenomicRanges)
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("helper_functions.R")
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
chrlen = readRDS("data/chrlen.RDS")
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org<- as(readRDS("data/organoid_exposures.rds"), 'matrix')
# rownames(org) <- paste0('Sample ', 1:nrow(org))
names_orgs = readxl::read_xlsx("data/NewOrganoidNaming.xlsx")
names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
rownames(org) = names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
rename_rows = function(i, new_names){
rownames(i) = new_names; return(i)}
org
org$s5
org[,'s5']
sapply(1:ncol(org), function(j) org[,'s5']/org[,j])
head(melt(sapply(1:ncol(org), function(j) org[,'s5']/org[,j])))
library(reshape2)
head(melt(sapply(1:ncol(org), function(j) org[,'s5']/org[,j])))
melt_exposures$Var1 == 'PDO1'
melt_exposures = (melt(sapply(1:ncol(org), function(j) org[,'s5']/org[,j])))
melt_exposures$group = ifelse(melt_exposures$Var1 == 'PDO1', 'WGD', 'No WGD')
melt_exposures
head(melt_exposures)
ggplot(melt_exposures, aes(x=Var2, y=value, col=Var1))+geom_point()+facet_wrap(.~group)
melt_exposures %>% filter(Var1 == 'PDO1')
org[,'s5']
melt_exposures_WGD = (melt(sapply(1:ncol(org), function(j) org[,'s4']/org[,j])))
melt_exposures_WGD$group = ifelse(melt_exposures_WGD$Var1 == 'PDO1', 'WGD', 'No WGD')
ggplot(melt_exposures, aes(x=Var2, y=value, col=Var1))+geom_point()+facet_wrap(.~group)
melt_exposures %>% filter(Var1 == 'PDO1')
ggplot(melt_exposures_WGD, aes(x=Var2, y=value, col=Var1))+geom_point()+facet_wrap(.~group)
ggplot(melt_exposures_WGD %>% filter(Var2 == 2), aes(x=Var2, y=value, col=Var1))+geom_point()+facet_wrap(.~group)
org[,'s4']/org[,'s2']
grid.arrange(ggplot(melt_exposures_WGD, aes(x=Var2, y=value, col=Var1))+geom_point()+facet_wrap(.~group),
ggplot(melt_exposures_WGD %>% filter(Var2 == 2), aes(x=Var2, y=value, col=Var1))+geom_point()+facet_wrap(.~group), ncol=2)
## all CN signatures
rm(list = ls())
organoids = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/organoid_exposures_Aug21.rds")
ruben = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/3_tcga_exposuresYAPSA.rds")
geoff_with_meta = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/sig_data_unorm.RDS")
geoff = geoff_with_meta[,1:7]
roland = sapply(list.files("~/Documents/PhD/ProjectOvarianMultisampleTree/out/robj/exposures/", full.names = T), function(i) t(readRDS(i)))
roland2 = sapply(list.files("~/Documents/PhD/ProjectOvarianMultisampleTree/out/robj/exposures_non_multi/", full.names = T), function(i) t(readRDS(i)))
load("~/Documents/PhD/other_repos/britroc-1/data/britroc_30kb_signature_data.rds")
britroc_new = t(sig_quants)
organoids = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/organoid_exposures.rds")
## all CN signatures
rm(list = ls())
organoids = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/organoid_exposures.rds")
ruben = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/3_tcga_exposuresYAPSA.rds")
geoff_with_meta = readRDS("~/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/sig_data_unorm.RDS")
geoff = geoff_with_meta[,1:7]
roland = sapply(list.files("~/Documents/PhD/ProjectOvarianMultisampleTree/out/robj/exposures/", full.names = T), function(i) t(readRDS(i)))
roland2 = sapply(list.files("~/Documents/PhD/ProjectOvarianMultisampleTree/out/robj/exposures_non_multi/", full.names = T), function(i) t(readRDS(i)))
load("~/Documents/PhD/other_repos/britroc-1/data/britroc_30kb_signature_data.rds")
britroc_new = t(sig_quants)
## new vs old britroc exposures
plot(as.vector(britroc_new),
as.vector(unlist(geoff[match(rownames(britroc_new),
rownames(geoff)),])), xlab='New Britroc (Phil)', ylab='Old britroc (Geoff)')
geoff_melt_matching = melt(geoff[match(rownames(britroc_new),
rownames(geoff)),])
dim(geoff_melt_matching)[1] == dim(melt(britroc_new))[1]
britroc_melt = melt(britroc_new)
britroc_melt$value_geoff = geoff_melt_matching$value
all_exposures = list(organoids,
ruben,
geoff,
britroc_new,
do.call('rbind', roland),
do.call('rbind', roland2))
all_exposures_meta = rep(c('organoids', 'ruben', 'geoff', 'britroc_new', 'roland', 'roland2'), sapply(all_exposures, nrow))
all_exposures_rbind = do.call('rbind', all_exposures)
all_exposures_rbind
## WGD
all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']
## WGD
plot(all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2'])
## WGD
plot(density(all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']))
## WGD
head(melt(all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']))
## WGD
ggplot(melt(all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']), aes(y=value))+geom_violin()
## WGD
ggplot(melt(all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']), aes(x=1, y=value))+geom_violin()
## WGD
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt")
wgd1
## WGD
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt", header = T)
wgd2 = read.table("~/Desktop/consensus.20170217.purity.ploidy.txt", header = T)
head(wgd2)
wgd1
colnames(wgd1)[colnames(wgd1) == 'wgd'] = 'wgd_status'
head(wgd1)
wgd1
wgd1
## WGD
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt", header = T)
wgd2 = read.table("~/Desktop/consensus.20170217.purity.ploidy.txt", header = T)
# colnames(wgd1)[colnames(wgd1) == 'wgd'] = 'wgd_status'
wgd = rbind.data.frame(cbind.data.frame(sample=wgd1$patient, wgs=wgd1$wgd),
cbind.data.frame(sample=wgd2$samplename, wgs=wgd2$wgd_status))
wgd
match(rownames(all_exposures_rbind), wgd$sample)
all_exposures_rbind
wgd_status = match(rownames(all_exposures_rbind), wgd$sample)
melt(all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2'])
ggplot(cbind(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']), aes(x=wgd_status, y=value))+geom_violin()
ggplot(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']), aes(x=wgd_status, y=value))+geom_violin()
ggplot(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']),
aes(x=wgd_status, y=ratios4s2))+geom_violin()
ggplot(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']),
aes(x=wgd_status, group=wgd_status, y=ratios4s2))+geom_violin()
iew(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']))
View(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']))
wgd_status
wgd_status = wgd[match(rownames(all_exposures_rbind), wgd$sample)]
## WGD
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt", header = T)
wgd2 = read.table("~/Desktop/consensus.20170217.purity.ploidy.txt", header = T)
# colnames(wgd1)[colnames(wgd1) == 'wgd'] = 'wgd_status'
wgd = rbind.data.frame(cbind.data.frame(sample=wgd1$patient, wgs=wgd1$wgd),
cbind.data.frame(sample=wgd2$samplename, wgs=wgd2$wgd_status))
wgd_status = wgd$wgs[match(rownames(all_exposures_rbind), wgd$sample)]
wgd_status
table(wgd_status)
length(wgd)
dim9wgd
dim(wgd)
rownames(all_exposures_rbind)
wgd$sample
rownames(all_exposures_rbind)
sapply(rownames(all_exposures_rbind), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse='-'))
wgd_status = wgd$wgs[match(sapply(rownames(all_exposures_rbind), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse='-')),
wgd$sample)]
table(wgd_status)
wgd_status
## WGD
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt", header = T)
wgd2 = read.table("~/Desktop/consensus.20170217.purity.ploidy.txt", header = T)
# colnames(wgd1)[colnames(wgd1) == 'wgd'] = 'wgd_status'
wgd = rbind.data.frame(cbind.data.frame(sample=wgd1$patient, wgs=wgd1$wgd),
cbind.data.frame(sample=wgd2$samplename, wgs=wgd2$wgd_status))
wgd$sample
wgd_status = wgd$wgs[match(sapply(rownames(all_exposures_rbind), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse='-')),
wgd$sample)]
table(wgd_status)
wgd$sample[!is.na(wgd_status)]
View(wgd$sample[!is.na(wgd_status)])
ggplot(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']),
aes(x=wgd_status, group=wgd_status, y=ratios4s2))+geom_violin()
ggplot(cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2']),
aes(x=factor(wgd_status, levels=c('TRUE', 'FALSE')), group=wgd_status, y=ratios4s2))+geom_violin()
wgd_status = factor(wgd_status, levels=c('TRUE', 'FALSE'))
## WGD
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt", header = T)
wgd2 = read.table("~/Desktop/consensus.20170217.purity.ploidy.txt", header = T)
# colnames(wgd1)[colnames(wgd1) == 'wgd'] = 'wgd_status'
wgd = rbind.data.frame(cbind.data.frame(sample=wgd1$patient, wgs=wgd1$wgd),
cbind.data.frame(sample=wgd2$samplename, wgs=wgd2$wgd_status))
wgd$sample
wgd_status = wgd$wgs[match(sapply(rownames(all_exposures_rbind), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse='-')),
wgd$sample)]
table(wgd_status)
wgd$sample[!is.na(wgd_status)] ## both TCGA and ICGC
df_wgd = cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2'])
wgd_status = factor(wgd_status, levels=c('TRUE', 'FALSE'))
wgd_status
wgd1 = read.table("~/Desktop/Haase2019_TCGA.giScores.wgd.txt", header = T)
wgd2 = read.table("~/Desktop/consensus.20170217.purity.ploidy.txt", header = T)
# colnames(wgd1)[colnames(wgd1) == 'wgd'] = 'wgd_status'
wgd = rbind.data.frame(cbind.data.frame(sample=wgd1$patient, wgs=wgd1$wgd),
cbind.data.frame(sample=wgd2$samplename, wgs=wgd2$wgd_status))
wgd$sample
wgd_status = wgd$wgs[match(sapply(rownames(all_exposures_rbind), function(i) paste0(strsplit(i, '-')[[1]][1:3], collapse='-')),
wgd$sample)]
table(wgd_status)
wgd$sample[!is.na(wgd_status)] ## both TCGA and ICGC
df_wgd = cbind.data.frame(wgd_status=wgd_status,ratios4s2=all_exposures_rbind[,'s4']/all_exposures_rbind[,'s2'])
df_wgd$wgd_status = factor(wgd_status, levels=c('TRUE', 'FALSE'))
df_wgd
df_wgd$wgd_status
ggplot(df_wgd,
aes(x=wgs_status, group=wgd_status, y=ratios4s2))+geom_violin()
head(df_wgd)
ggplot(df_wgd, aes(x=wgs_status, group=wgd_status, y=ratios4s2))+geom_violin()
ggplot(df_wgd, aes(x=wgd_status, group=wgd_status, y=ratios4s2))+geom_violin()
ggplot(droplevels(df_wgd), aes(x=wgd_status, group=wgd_status, y=ratios4s2))+geom_violin()
df_wgd
ggplot(df_wgd %>% filter(!is.na(df_wgd)), aes(x=wgd_status, group=wgd_status, y=ratios4s2))+geom_violin()
ggplot(df_wgd %>% filter(!is.na(df_wgd)), aes(x=wgd_status, group=wgd_status, y=ratios4s2))+geom_violin()+scale_y_continuous(trans = "log2")
ggplot(df_wgd %>% filter(!is.na(df_wgd)), aes(x=wgd_status, group=wgd_status, y=ratios4s2))+
geom_violin()+geom_jitter()+scale_y_continuous(trans = "log2")
organoids_absolute_copynumber = readRDS("data/organoid_absolute_CN.rds")
organoids_absolute_copynumber = readRDS("data/organoid_absolute_CN.rds")
organoids_absolute_copynumber2 = readRDS("~/Desktop/absoluteCN_organoids/organoid_absolute_CN.rds")
organoids_absolute_copynumber
organoids_absolute_copynumber == organoids_absolute_copynumber2
organoids_absolute_copynumber
organoids_absolute_copynumber2
assayData(organoids_absolute_copynumber)
segments(organoids_absolute_copynumber)
(organoids_absolute_copynumber@assayData)
(organoids_absolute_copynumber@assayData$copynumber)
organoids_absolute_copynumber2@assayData$copynumber
(organoids_absolute_copynumber@assayData$copynumber) == organoids_absolute_copynumber2@assayData$copynumber
all((organoids_absolute_copynumber@assayData$copynumber) == organoids_absolute_copynumber2@assayData$copynumber)
all((organoids_absolute_copynumber@assayData$copynumber) == organoids_absolute_copynumber2@assayData$copynumber, na.rm = T)
exp
exposures
exposures = readRDS("~/Desktop/")
exposures = readRDS("~/Desktop/organoid_exposures.rds")
exposures
head(melt(exposures))
require(reshape2)
head(melt(exposures))
exposures
head(melt(cbind(rownames(exposures), exposures)))
head(melt(cbind(org=rownames(exposures), exposures)))
ggplot(melt(cbind(org=rownames(exposures), exposures)), aes(x=org, y=value, col=variable))+geom_bar(stat='identity')
require(ggplot)
require(ggplot2)
ggplot(melt(cbind(org=rownames(exposures), exposures)), aes(x=org, y=value, col=variable))+geom_bar(stat='identity')
ggplot(melt(cbind(org=rownames(exposures), exposures)), aes(x=org, y=value, fill=variable))+geom_bar(stat='identity')
org<- as(readRDS("data/organoid_exposures.rds"), 'matrix')
org
exposures
org
exposures
org == exposures
ggplot(melt(cbind(org=rownames(exposures), exposures)), aes(x=org, y=value, fill=variable))+geom_bar(stat='identity')
# rownames(org) <- paste0('Sample ', 1:nrow(org))
names_orgs = readxl::read_xlsx("data/NewOrganoidNaming.xlsx")
names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
rownames(exposures) = names_orgs$`new name`[match(rownames(exposures), paste0(names_orgs$`old name`, 'org'))]
exposures
exposures
rename_rows(org, gsub('Sample ', 'PDO', rownames(org)))
rename_rows = function(i, new_names){
rownames(i) = new_names; return(i)}
rename_rows(org, gsub('Sample ', 'PDO', rownames(org)))
org
exposures
exposures
rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures)))
rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures))
rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures)))
exposures
rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures)))
createBarplot(rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures))), remove_labels = FALSE, order_labels = gsub('Sample ', 'PDO', names(sort(org[,1])))) +
scale_fill_brewer(palette="Dark2")+labs(y='Exposure')+
ggtitle('Exposures for the organoids')+labs(x='')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
source("helper_functions.R")
createBarplot(rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures))), remove_labels = FALSE, order_labels = gsub('Sample ', 'PDO', names(sort(org[,1])))) +
scale_fill_brewer(palette="Dark2")+labs(y='Exposure')+
ggtitle('Exposures for the organoids')+labs(x='')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
createBarplot(rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures))), remove_labels = FALSE, order_labels = gsub('Sample ', 'PDO', names(sort(exposures[,1])))) +
scale_fill_brewer(palette="Dark2")+labs(y='Exposure')+
ggtitle('Exposures for the organoids')+labs(x='')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures)))
createBarplot(rename_rows(exposures, gsub('Sample ', 'PDO', rownames(exposures))))
createBarplot
exposures
gsub('Sample ', 'PDO', names(sort(exposures[,1])))
sort(exposures[,1])
rownames(exposures
)
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
library(MASS)
library(pheatmap)
library(ggdendro)
library(readxl)
library(CNTools)
library(GenomicRanges)
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("helper_functions.R")
gsub('Sample ', 'PDO', names(sort(exposures[,1])))
rm(list = ls())
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
library(MASS)
library(pheatmap)
library(ggdendro)
library(readxl)
library(CNTools)
library(GenomicRanges)
source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("helper_functions.R")
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
chrlen = readRDS("data/chrlen.RDS")
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
org<- as(readRDS("data/organoid_exposures.rds"), 'matrix')
# rownames(org) <- paste0('Sample ', 1:nrow(org))
names_orgs = readxl::read_xlsx("data/NewOrganoidNaming.xlsx")
names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
rownames(org) = names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
rename_rows = function(i, new_names){
rownames(i) = new_names; return(i)}
createBarplot(rename_rows(org, gsub('Sample ', 'PDO', rownames(org))), remove_labels = FALSE, order_labels = gsub('Sample ', 'PDO', names(sort(org[,1])))) +
scale_fill_brewer(palette="Dark2")+labs(y='Exposure')+
ggtitle('Exposures for the organoids')+labs(x='')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
createBarplot(rename_rows(org, gsub('Sample ', 'PDO', rownames(org))), remove_labels = FALSE, order_labels = gsub('Sample ', 'PDO', names(sort(org[,1])))) +
scale_fill_brewer(palette="Dark2")+labs(y='Exposure')+
ggtitle('Exposures for the organoids')+labs(x='')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
exposures = readRDS("~/Desktop/ascites_exposures.rds")
dim(exposures)
ascites = read.csv("data/asorg_PDO.csv")
ascites
ascites = read.csv("data/asorg_PDO.csv")
exposures = readRDS("~/Desktop/ascites_exposures.rds")
exposures
ascites
book_ascites = readxl::read_xlsx("Users/morril01/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/Book1.xlsx")
book_ascites = readxl::read_xlsx("/Users/morril01/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/Book1.xlsx")
book_ascites
rownames(exposures)
rownames(exposures) = book_ascites$organoid[match(rownames(exposures), book_ascites$`JBLAB-number`)]
book_ascites$organoid[match(rownames(exposures), book_ascites$`JBLAB-number`)]
match(rownames(exposures), book_ascites$`JBLAB-number`)
exposures = exposures[match(rownames(exposures), book_ascites$`JBLAB-number`),]
exposures
rownames(exposures)
apply(exposures, 1, is.na)
colSums(apply(exposures, 1, is.na))
colSums(apply(exposures, 1, is.na)) == 7
exposures = exposures[!colSums(apply(exposures, 1, is.na)) == 7,]
exposures
book_ascites$organoid[match(rownames(exposures), book_ascites$`JBLAB-number`)]
rownames(exposures)
match(rownames(exposures), book_ascites$`JBLAB-number`)
exposures
exposures = readRDS("~/Desktop/ascites_exposures.rds")
exposures
ggplot(melt(cbind(org=rownames(exposures), exposures)), aes(x=org, y=value, fill=variable))+geom_bar(stat='identity')
org == exposures
book_ascites = readxl::read_xlsx("/Users/morril01/Documents/PhD/other_repos/b_tape/Vias_Brenton/copy_number_analysis_organoids/data/Book1.xlsx")
exposures = exposures[match(book_ascites$`JBLAB-number`, rownames(exposures)),]
exposures
rownames(exposures) = book_ascites$organoid[match(book_ascites$`JBLAB-number`, rownames(exposures))]
exposures
exposures
ascites
exposures
rownames(exposures)
gsub('org', '', rownames(exposures))
ascites[gsub('org', '', rownames(exposures)),]
match(gsub('org', '', rownames(exposures)) rownames(ascites))
ascites[match(gsub('org', '', rownames(exposures)), rownames(ascites)),]
match(gsub('org', '', rownames(exposures)), rownames(ascites))
rownames(ascites)
ascites
ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),]
exposures
ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),] == exposures
ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)]
exposures
ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)] == exposures
ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)]
exposures
ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)] == exposures
all.equal(ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)], exposures)
as.matrix(scites[match(gsub('org', '', rownames(exposures)))
)
as.matrix(ascites[match(gsub('org', '', rownames(exposures)))
)
as.matrix(ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)])
matched_ascites = ascites[match(gsub('org', '', rownames(exposures)), (ascites$sample)),2:ncol(ascites)]
matched_ascites[1,] == exposures[1,]
matched_ascites
exposures
exposures[1,]
matched_ascites
exposures[1,]
matched_ascites[1,]
exposures[1,]
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../copy_number_analysis_organoids/helper_functions.R")
library(gridExtra)
library(dplyr)
orgs = c('23868org', '119148orgb', '118976org')
exposures = lapply(paste0("../data/signature_object_sc_cache_",  orgs, ".RDS"), readRDS)
absCN = lapply(paste0("../data/absCN_clean_",  orgs, ".RDS"), readRDS)
names(exposures) = names(absCN)= orgs
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../../../../other_repos/britroc-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../../../../other_repos/britroc-cnsignatures-bfb69cd72c50/helper_functions.R")
library(grid)
org='23868org'
org_tab = read.csv(paste0("../UID-", org, ".csv"), check.names = FALSE)
org_tab = apply(org_tab, 2, as.numeric)
keep_idx = org_tab[,1:4][,'num_noisy'] == 0
org_clean = org_tab[keep_idx,-(1:4)]
org_tab = org_tab[keep_idx,]
rownames(org_clean) = paste0('scSample_', org_tab[,1])
## remove segments which don't have values
org_clean = org_clean[,!(rowSums(apply(org_clean, 1, is.na)) == nrow(org_clean))]
.colnames_pos = colnames(org_clean)
.colnames_pos2 = lapply(.colnames_pos, function(i) strsplit(i, split = ":")[[1]])
chrom = sapply(.colnames_pos2, function(i) i[1])
.colnames_pos3 = lapply(.colnames_pos2, function(i) strsplit(i[2], '-')[[1]])
starts = sapply(.colnames_pos3, function(i) as.numeric(gsub(",", "", i[1])) )
ends = sapply(.colnames_pos3, function(i) as.numeric(gsub(",", "", i[2])) )
org_clean
.colnames_pos = colnames(org_clean)
.colnames_pos2 = lapply(.colnames_pos, function(i) strsplit(i, split = ":")[[1]])
chrom = sapply(.colnames_pos2, function(i) i[1])
.colnames_pos3 = lapply(.colnames_pos2, function(i) strsplit(i[2], '-')[[1]])
starts = sapply(.colnames_pos3, function(i) as.numeric(gsub(",", "", i[1])) )
ends = sapply(.colnames_pos3, function(i) as.numeric(gsub(",", "", i[2])) )
starts
starts
.colnames_pos3
paste0(starts, ends)
paste0(starts, ':', ends)
GenomicRanges::GRanges(paste0(starts, ':', ends))
GenomicRanges::GRanges(paste0(starts, ':', ends), seqinfo = chrom)
GenomicRanges::GRanges(paste0(starts, ':', ends), seqnames = hrom)
GenomicRanges::GRanges(paste0(starts, ':', ends), seqnames = chrom)
GenomicRanges::GRanges(ranges = paste0(starts, ':', ends), seqnames = chrom)
?
GRanges
GRanges
chrom
GenomicRanges::GRanges(ranges = paste0('chr', chrom, ':', starts, '-', ends))
paste0('chr', chrom, ':', starts, '-', ends)
as(paste0('chr', chrom, ':', starts, '-', ends), "GRanges")
gr = as(paste0('chr', chrom, ':', starts, '-', ends), "GRanges")
gr
